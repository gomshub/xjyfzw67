Perfect! Here’s a simple step-by-step guide to:
	1.	Create a JKS (with private key and self-signed cert)
	2.	Use it in Tomcat for HTTPS (incoming)
	3.	Use it in your App (dev path) for secure calls (outgoing)

⸻

Step 1: Create a JKS on Windows

Option A: Using keytool (comes with Java)

Open Command Prompt and run:

keytool -genkeypair -alias perimeterkey -keyalg RSA -keysize 2048 -validity 365 \
-keystore perimeter.jks -storepass changeit -keypass changeit \
-dname "CN=localhost, OU=Dev, O=MyCompany, L=City, ST=State, C=IN"

This creates:
	•	perimeter.jks with:
	•	Private key
	•	Self-signed public cert

changeit is the password — replace it with your own.

⸻

Option B: Using Keystore Explorer (GUI tool)
	1.	Open Keystore Explorer
	2.	File → New → Choose JKS
	3.	Set a password (e.g., changeit)
	4.	Right-click → Generate Key Pair
	5.	Fill:
	•	Algorithm: RSA
	•	Alias: perimeterkey
	•	Validity: 365
	•	DN: Fill in CN, O, etc.
	6.	Save as perimeter.jks

⸻

Step 2: Copy the JKS to Both Locations
	•	Copy perimeter.jks to Tomcat folder (e.g.):

C:\apache-tomcat-x.x.x\conf\perimeter.jks


	•	Copy it to app/dev path (e.g.):

C:\myapp\dev\perimeter.jks



⸻

Step 3: Configure Tomcat to Use the JKS

Edit conf/server.xml:

Find this section:

<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
           maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
           keystoreFile="conf/perimeter.jks"
           keystorePass="changeit"
           keyAlias="perimeterkey"
           clientAuth="false" sslProtocol="TLS" />

Make sure:
	•	keystoreFile = path to the JKS file
	•	keystorePass = matches your password
	•	keyAlias = matches alias you created (perimeterkey)

Then restart Tomcat

⸻

Step 4: Configure Your App to Use the Same JKS

In your app’s config or Tomcat startup options (setenv.bat), add:

set JAVA_OPTS=%JAVA_OPTS% -Djavax.net.ssl.keyStore=C:\myapp\dev\perimeter.jks
set JAVA_OPTS=%JAVA_OPTS% -Djavax.net.ssl.keyStorePassword=changeit
set JAVA_OPTS=%JAVA_OPTS% -Djavax.net.ssl.trustStore=C:\myapp\dev\perimeter.jks
set JAVA_OPTS=%JAVA_OPTS% -Djavax.net.ssl.trustStorePassword=changeit

Or if it’s a Spring Boot app, you can set in application.properties:

server.ssl.key-store=classpath:perimeter.jks
server.ssl.key-store-password=changeit
server.ssl.key-alias=perimeterkey



⸻

Step 5: (Optional) Add External Certificates to Truststore

If your app calls another service (like https://otherapi.com), you might need to:
	1.	Download that service’s public certificate
	2.	Import into your JKS:

keytool -importcert -alias otherapi-cert -keystore perimeter.jks -storepass changeit -file otherapi.crt

This makes your app trust that external HTTPS service.

⸻

✅ Done!

Now:
	•	Tomcat is secured with HTTPS using perimeter.jks
	•	Your app can use the same keystore for signing, HTTPS calls, etc.

⸻

Want me to generate a sample JKS or show screenshots with Keystore Explorer for better clarity?