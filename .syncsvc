Here is the complete module structure, code, and deployment configuration for testing locally and deploying on Kubernetes.

Folder Structure

jira-sync-service/
│
├── app/
│   ├── __init__.py
│   ├── jira_sync.py        # Main application logic with all services
│   ├── config.py           # Configuration for environment variables
│   ├── db_utils.py         # Utility functions for database operations
│   └── html_utils.py       # Utility functions to generate HTML
│
├── requirements.txt         # Python dependencies
├── Dockerfile               # Docker image setup
├── jira-sync-service.yaml   # Kubernetes Deployment and Service YAML
└── README.md                # Instructions to run locally or deploy

File Contents

1. app/__init__.py

This initializes the Flask app and loads configurations.

from flask import Flask
from app.config import Config

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    return app

2. app/config.py

Centralized configuration for environment variables.

import os

class Config:
    JIRA_API_URL = os.getenv("JIRA_API_URL", "https://your-jira-instance/rest/api/2")
    JIRA_API_TOKEN = os.getenv("JIRA_API_TOKEN", "your-token")
    ORACLE_DB_PROD_CONN_STR = os.getenv("ORACLE_DB_PROD_CONN_STR", "prod-db-connection-string")
    ORACLE_DB_QUALITY_CONN_STR = os.getenv("ORACLE_DB_QUALITY_CONN_STR", "quality-db-connection-string")

3. app/db_utils.py

Utility functions for database operations.

import cx_Oracle

def get_db_connection(environment, config):
    conn_str = (
        config.ORACLE_DB_PROD_CONN_STR if environment == "prod" else config.ORACLE_DB_QUALITY_CONN_STR
    )
    return cx_Oracle.connect(conn_str)


def fetch_jira_issues(cursor):
    query = """
        SELECT jira_number, job_number, first_comment, last_comment, update_comment
        FROM jira_issues
    """
    cursor.execute(query)
    return cursor.fetchall()


def update_comment_in_db(cursor, jira_number):
    query = """
        UPDATE jira_issues
        SET update_comment = NULL
        WHERE jira_number = :jira_number
    """
    cursor.execute(query, {"jira_number": jira_number})

4. app/html_utils.py

Utility for generating HTML files.

from io import StringIO

def generate_jira_details_html(rows):
    html_file = StringIO()
    html_file.write("<html><head><title>JIRA Details</title></head><body>")
    html_file.write("<h1>JIRA Details</h1>")
    html_file.write("<table border='1'><thead><tr>")
    html_file.write("<th>JIRA Number</th><th>Job Number</th><th>First Comment</th><th>Recent Comment</th><th>Update Comment</th>")
    html_file.write("</tr></thead><tbody>")

    for row in rows:
        jira_number, job_number, first_comment, last_comment, update_comment = row
        html_file.write("<tr>")
        html_file.write(f"<td><a href='https://your-jira-instance/browse/{jira_number}'>{jira_number}</a></td>")
        html_file.write(f"<td>{job_number or 'N/A'}</td>")
        html_file.write(f"<td>{first_comment or 'No Comments'}</td>")
        html_file.write(f"<td>{last_comment or 'No Comments'}</td>")
        html_file.write(f"<td>{update_comment or 'No Update Comment'}</td>")
        html_file.write("</tr>")

    html_file.write("</tbody></table>")
    html_file.write("</body></html>")
    html_file.seek(0)
    return html_file

5. app/jira_sync.py

Main application logic with all services.

from flask import Flask, jsonify, request, send_file
from app import create_app
from app.db_utils import get_db_connection, fetch_jira_issues
from app.html_utils import generate_jira_details_html

app = create_app()

@app.route('/fetch_jira_details', methods=['GET'])
def fetch_jira_details():
    environment = request.args.get('environment', 'prod').lower()
    try:
        conn = get_db_connection(environment, app.config)
        cursor = conn.cursor()
        rows = fetch_jira_issues(cursor)
        html_output = generate_jira_details_html(rows)
        cursor.close()
        conn.close()
        return send_file(html_output, mimetype='text/html', as_attachment=True, attachment_filename="Jira_Details.html")
    except Exception as e:
        app.logger.error(f"Error fetching JIRA details: {str(e)}")
        return jsonify({"error": str(e)}), 500

# Add other services here...
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)

6. requirements.txt

Python dependencies.

Flask==2.3.3
cx_Oracle==8.3.0
requests==2.31.0

7. Dockerfile

Build the Docker image.

FROM python:3.9-slim

WORKDIR /app

COPY . /app

RUN pip install -r requirements.txt

CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app.jira_sync:app"]

8. jira-sync-service.yaml

Kubernetes Deployment and Service YAML.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-sync-service
  labels:
    app: jira-sync-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jira-sync-service
  template:
    metadata:
      labels:
        app: jira-sync-service
    spec:
      containers:
        - name: jira-sync-service
          image: your-docker-image:latest
          ports:
            - containerPort: 5000
          env:
            - name: JIRA_API_URL
              value: "https://your-jira-instance/rest/api/2"
            - name: JIRA_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: jira-sync-secrets
                  key: jira-api-token
            - name: ORACLE_DB_PROD_CONN_STR
              valueFrom:
                secretKeyRef:
                  name: jira-sync-secrets
                  key: oracle-db-prod
            - name: ORACLE_DB_QUALITY_CONN_STR
              valueFrom:
                secretKeyRef:
                  name: jira-sync-secrets
                  key: oracle-db-quality
---
apiVersion: v1
kind: Secret
metadata:
  name: jira-sync-secrets
type: Opaque
data:
  jira-api-token: <base64-encoded-token>
  oracle-db-prod: <base64-encoded-prod-connection-string>
  oracle-db-quality: <base64-encoded-quality-connection-string>
---
apiVersion: v1
kind: Service
metadata:
  name: jira-sync-service
spec:
  selector:
    app: jira-sync-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000

How to Test Locally

	1.	Set the environment variables in your local system:

export JIRA_API_URL="https://your-jira-instance/rest/api/2"
export JIRA_API_TOKEN="your-jira-api-token"
export ORACLE_DB_PROD_CONN_STR="prod-db-connection-string"
export ORACLE_DB_QUALITY_CONN_STR="quality-db-connection-string"


	2.	Run the application locally:

python -m flask --app app.jira_sync run --host=0.0.0.0 --port=5000


	3.	Test the endpoints:
	•	Fetch JIRA details as an HTML file:

curl -X GET "http://localhost:5000/fetch_jira_details?environment=prod" -o Jira_Details.html



How to Deploy on Kubernetes

	1.	Build and push the Docker image:

docker build -t your-docker-repo/jira-sync-service:latest .
docker push your-docker-repo/jira-sync-service:latest


	2.	Apply the Kubernetes resources:

kubectl apply -f jira-sync-service.yaml


	3.	Access the service via the Kubernetes ClusterIP or Ingress configuration.

This setup ensures a complete local development and Kubernetes deployment environment for the jira-sync-service.