Here’s the complete Python module structure with the updated logic for connecting to Prod or Quality databases, Helm configuration, Kubernetes deployment files, and Gunicorn setup, including the handling of secrets.

1. Project Structure

jira_oracle_sync/
│
├── app/
│   ├── __init__.py              # Flask app initialization
│   ├── jira_sync.py             # Core sync logic
│   ├── db.py                    # Database connection logic (Prod/Quality)
│   ├── utils.py                 # Utility functions (regex, env determination)
│   ├── templates/
│   │   └── result_list.html     # HTML template for the JIRA report
│
├── requirements.txt             # Python dependencies
├── Dockerfile                   # Docker configuration
├── wsgi.py                      # Gunicorn WSGI entry point
├── helm/
│   ├── chart.yaml               # Helm chart for deployment
│   └── values.yaml              # Helm values for environment-specific configurations
├── kube/
│   ├── deployment.yaml          # Kubernetes deployment configuration
│   ├── service.yaml             # Kubernetes service configuration
│   ├── secrets.yaml             # Kubernetes secret management for sensitive data
│   └── configmap.yaml           # Environment variables config map
└── config.py                    # Flask app configuration

2. Python Code

app/jira_sync.py - Main sync logic to fetch JIRA issues and upsert into Oracle DB

import requests
from flask import Flask, render_template, Response
from app.db import OracleDB
from app.utils import extract_job_number, determine_env

app = Flask(__name__)
db = OracleDB()

JIRA_API_URL = "https://your-jira-instance/rest/api/2/search"
JIRA_BEARER_TOKEN = "your_jira_token"

@app.route('/sync_jira', methods=['GET'])
def sync_jira():
    headers = {'Authorization': f'Bearer {JIRA_BEARER_TOKEN}'}
    params = {'jql': 'your_filter_here'}  # Add your JIRA JQL filter
    response = requests.get(JIRA_API_URL, headers=headers, params=params)
    jira_issues = response.json()['issues']
    
    updated_jiras = []
    not_updated_jiras = []
    
    for issue in jira_issues:
        jira_number = issue['key']
        summary = issue['fields']['summary']
        status = issue['fields']['status']['name']
        description = issue['fields']['description']
        creation_date = issue['fields']['created']
        comments = issue['fields']['comment']['comments']
        first_comment = comments[0] if comments else None
        last_comment = comments[-1] if comments else None
        criticity = issue['fields']['priority']['name']

        job_number = extract_job_number(summary)

        if job_number:
            env = determine_env(job_number)
            db.insert_or_update_jira(
                jira_number, summary, status, job_number, criticity, description, creation_date, first_comment, last_comment, env
            )
            updated_jiras.append((jira_number, job_number, criticity, creation_date))
        else:
            not_updated_jiras.append((jira_number, criticity, creation_date))

    html_content = render_template(
        'result_list.html',
        updated_jiras=updated_jiras,
        not_updated_jiras=not_updated_jiras
    )

    return Response(html_content, mimetype='text/html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

app/db.py - OracleDB class to manage connections with dynamic environments

import cx_Oracle
import os

class OracleDB:
    def __init__(self):
        # Retrieve connection strings from environment variables
        self.prod_conn_str = os.getenv('ORACLE_DB_PROD_CONN_STR')
        self.quality_conn_str = os.getenv('ORACLE_DB_QUALITY_CONN_STR')
        
    def connect(self, env):
        """Connect to the selected environment (Prod or Quality)."""
        if env == 'prod':
            self.conn = cx_Oracle.connect(self.prod_conn_str)
        elif env == 'quality':
            self.conn = cx_Oracle.connect(self.quality_conn_str)
        else:
            raise ValueError(f"Unknown environment: {env}")

    def close(self):
        if self.conn:
            self.conn.close()

    def insert_or_update_jira(self, jira_number, summary, status, job_number, criticity, description, creation_date, first_comment, last_comment, env):
        self.connect(env)
        cursor = self.conn.cursor()

        sql = """
        MERGE INTO jira_issues t
        USING dual
        ON (t.jira_number = :jira_number)
        WHEN MATCHED THEN
            UPDATE SET
                t.status = :status,
                t.summary = :summary,
                t.job_number = :job_number,
                t.criticity = :criticity,
                t.description = :description,
                t.creation_date = :creation_date,
                t.first_comment = :first_comment,
                t.last_comment = :last_comment
        WHEN NOT MATCHED THEN
            INSERT (jira_number, status, summary, job_number, criticity, description, creation_date, first_comment, last_comment)
            VALUES (:jira_number, :status, :summary, :job_number, :criticity, :description, :creation_date, :first_comment, :last_comment)
        """
        cursor.execute(sql, [jira_number, status, summary, job_number, criticity, description, creation_date, first_comment, last_comment])
        self.conn.commit()
        self.close()

app/utils.py - Utility functions to extract job number and determine environment

import re

def extract_job_number(summary):
    """Extract job number from the summary."""
    match = re.search(r'Job Number: (\d+)', summary)
    return match.group(1) if match else None

def determine_env(job_number):
    """Determine environment (Prod or Quality) based on job number."""
    if job_number.startswith('P'):
        return 'prod'
    elif job_number.startswith('Q'):
        return 'quality'
    else:
        raise ValueError(f"Invalid job number format: {job_number}")

app/templates/result_list.html - HTML template for rendering the sync report

<!DOCTYPE html>
<html>
<head>
    <title>JIRA Sync Report</title>
</head>
<body>
    <h2>Updated successfully to respective environment</h2>
    <table border="1">
        <thead>
            <tr>
                <th>JIRA Number</th>
                <th>Job Number</th>
                <th>Criticity</th>
                <th>Creation Date</th>
            </tr>
        </thead>
        <tbody>
        {% for jira, job, criticity, date in updated_jiras %}
            <tr>
                <td><a href="https://your-jira-instance/browse/{{ jira }}">{{ jira }}</a></td>
                <td><a href="https://your-job-instance/job/{{ job }}">{{ job }}</a></td>
                <td>{{ criticity }}</td>
                <td>{{ date }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <h2>Not Updated into DB</h2>
    <table border="1">
        <thead>
            <tr>
                <th>JIRA Number</th>
                <th>Criticity</th>
                <th>Creation Date</th>
            </tr>
        </thead>
        <tbody>
        {% for jira, criticity, date in not_updated_jiras %}
            <tr>
                <td><a href="https://your-jira-instance/browse/{{ jira }}">{{ jira }}</a></td>
                <td>{{ criticity }}</td>
                <td>{{ date }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</body>
</html>

3. Dockerfile

FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt .

RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "wsgi:app"]

4. WSGI (wsgi.py)

from app.jira_sync import app

if __name__ == "__main__":
    app.run()

5. Kubernetes Configuration

Deployment (kube/deployment.yaml)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-oracle-sync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jira-oracle-sync
  template:
    metadata:
      labels:
        app: jira-oracle-sync
    spec:
      containers:
      - name: jira-oracle-sync
        image: your-docker-repo/jira-oracle-sync:latest
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: jira-oracle-sync-config
        env:
        - name: ORACLE_DB_PROD_CONN_STR
          valueFrom:
            secretKeyRef:
              name: jira-oracle-sync-secrets
              key: oracle-prod-conn-str
        - name: ORACLE_DB_QUALITY_CONN_STR
          valueFrom:
            secretKeyRef:
              name: jira-oracle-sync-secrets
              key: oracle-quality-conn-str

Secrets (kube/secrets.yaml)

apiVersion: v1
kind: Secret
metadata:
  name: jira-oracle-sync-secrets
type: Opaque
data:
  oracle-prod-conn-str: base64_encoded_prod_conn_str
  oracle-quality-conn-str: base64_encoded_quality_conn_str

ConfigMap (kube/configmap.yaml)

apiVersion: v1
kind: ConfigMap
metadata:
  name: jira-oracle-sync-config
data:
  JIRA_API_URL: "https://your-jira-instance/rest/api/2/search"
  JIRA_BEARER_TOKEN: "your_jira_token"

Service (kube/service.yaml)

apiVersion: v1
kind: Service
metadata:
  name: jira-oracle-sync-service
spec:
  selector:
    app: jira-oracle-sync
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000

6. Helm Configuration

Chart (helm/chart.yaml)

apiVersion: v2
name: jira-oracle-sync
description: A Helm chart for deploying JIRA Oracle sync service.
version: 1.0.0

Values (helm/values.yaml)

replicaCount: 1
image:
  repository: your-docker-repo/jira-oracle-sync
  pullPolicy: IfNotPresent
  tag: latest

service:
  type: ClusterIP
  port: 80

env:
  JIRA_API_URL: "https://your-jira-instance/rest/api/2/search"
  JIRA_BEARER_TOKEN: "your_jira_token"

7. Requirements.txt

Flask==2.0.3
requests==2.26.0
cx_Oracle==8.3
gunicorn==20.1.0
Jinja2==3.0.3

This setup includes everything from your Flask app running on Gunicorn to Kubernetes deployment with Helm, secret handling, and multi-environment DB connections.