Sure! Below is a Python implementation to watch changes in the database for the `UPDATE_COMMENT` and `UPDATE_STATUS` fields across different environments (prod, quality, dev) and update the corresponding JIRA issues. The code includes:

1. **Database connection setup** for multiple environments.
2. **Function to fetch updates** from the database.
3. **Function to update JIRA issues** using the JIRA API.
4. **Main service loop** to check for updates and process them.

### `config.py`
```python
import os

# Database configurations for different environments
DB_CONFIG = {
    'prod': {
        'host': os.getenv("DB_PROD_HOST"),
        'user': os.getenv("DB_PROD_USER"),
        'password': os.getenv("DB_PROD_PASS"),
        'database': os.getenv("DB_PROD_NAME")
    },
    'quality': {
        'host': os.getenv("DB_QUALITY_HOST"),
        'user': os.getenv("DB_QUALITY_USER"),
        'password': os.getenv("DB_QUALITY_PASS"),
        'database': os.getenv("DB_QUALITY_NAME")
    },
    'dev': {
        'host': os.getenv("DB_DEV_HOST"),
        'user': os.getenv("DB_DEV_USER"),
        'password': os.getenv("DB_DEV_PASS"),
        'database': os.getenv("DB_DEV_NAME")
    }
}

# JIRA configurations
JIRA_BASE_URL = os.getenv("JIRA_BASE_URL")
JIRA_USERNAME = os.getenv("JIRA_USERNAME")
JIRA_API_TOKEN = os.getenv("JIRA_API_TOKEN")
```

### `db_client.py`
```python
import mysql.connector
from mysql.connector import Error

class DbClient:
    def __init__(self, config):
        self.config = config

    def get_connection(self):
        return mysql.connector.connect(
            host=self.config['host'],
            user=self.config['user'],
            password=self.config['password'],
            database=self.config['database']
        )

    def fetch_updates(self):
        updates = []
        try:
            connection = self.get_connection()
            cursor = connection.cursor(dictionary=True)
            cursor.execute("SELECT id, jira_no, update_comment, update_status FROM jira_updates_log WHERE processed = FALSE")
            updates = cursor.fetchall()
        except Error as e:
            print(f"Error fetching updates: {e}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()
        return updates

    def mark_as_processed(self, update_id):
        try:
            connection = self.get_connection()
            cursor = connection.cursor()
            cursor.execute("UPDATE jira_updates_log SET processed = TRUE WHERE id = %s", (update_id,))
            connection.commit()
        except Error as e:
            print(f"Error marking update as processed: {e}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()
```

### `jira_client.py`
```python
import requests
from config import JIRA_BASE_URL, JIRA_USERNAME, JIRA_API_TOKEN

class JiraClient:
    def __init__(self):
        self.base_url = JIRA_BASE_URL
        self.auth = (JIRA_USERNAME, JIRA_API_TOKEN)

    def update_issue(self, jira_no, update_comment=None, update_status=None):
        headers = {
            "Content-Type": "application/json"
        }

        if update_comment:
            comment_url = f"{self.base_url}/rest/api/2/issue/{jira_no}/comment"
            comment_data = {"body": update_comment}
            response = requests.post(comment_url, json=comment_data, headers=headers, auth=self.auth)
            if response.status_code != 201:
                print(f"Failed to update comment for {jira_no}: {response.text}")

        if update_status:
            transitions_url = f"{self.base_url}/rest/api/2/issue/{jira_no}/transitions"
            transitions_response = requests.get(transitions_url, headers=headers, auth=self.auth)
            transitions = transitions_response.json().get('transitions', [])
            transition_id = next((t['id'] for t in transitions if t['name'].lower() == update_status.lower()), None)

            if transition_id:
                transition_data = {"transition": {"id": transition_id}}
                response = requests.post(transitions_url, json=transition_data, headers=headers, auth=self.auth)
                if response.status_code != 204:
                    print(f"Failed to update status for {jira_no}: {response.text}")
            else:
                print(f"Transition {update_status} not found for {jira_no}")
```

### `sync_service.py`
```python
from db_client import DbClient
from jira_client import JiraClient
from config import DB_CONFIG

class SyncService:
    def __init__(self):
        self.jira_client = JiraClient()

    def process_updates(self, environment):
        db_client = DbClient(DB_CONFIG[environment])
        updates = db_client.fetch_updates()

        for update in updates:
            jira_no = update['jira_no']
            update_comment = update['update_comment']
            update_status = update['update_status']

            self.jira_client.update_issue(jira_no, update_comment, update_status)
            db_client.mark_as_processed(update['id'])

if __name__ == "__main__":
    sync_service = SyncService()

    # Process updates for each environment
    for env in ['prod', 'quality', 'dev']:
        sync_service.process_updates(env)
```

### Running the Sync Service
To run the sync service periodically, you can use a cron job or schedule it using another task scheduler like Bamboo. Hereâ€™s how you can create a shell script to run the sync service:

### `run_sync_service.sh`
```sh
#!/bin/bash

# Activate the virtual environment if needed
# source /path/to/your/virtualenv/bin/activate

# Navigate to the directory containing your sync_service.py
cd /path/to/your/module

# Run the sync service
python sync_service.py
```

### Setting Up a Cron Job
1. **Open Crontab**:
   ```sh
   crontab -e
   ```

2. **Add Cron Job**:
   To run the script every 10 minutes, add the following line:
   ```sh
   */10 * * * * /path/to/run_sync_service.sh
   ```

### Summary
- **Database and JIRA Configuration**: Set up your database and JIRA configurations in `config.py`.
- **Database Client**: Implement a database client in `db_client.py` to fetch updates and mark them as processed.
- **JIRA Client**: Implement a JIRA client in `jira_client.py` to update comments and statuses.
- **Sync Service**: Implement the main synchronization logic in `sync_service.py` to process updates for different environments.
- **Shell Script and Cron Job**: Use a shell script and a cron job to run the sync service periodically.

Ensure you replace placeholder values like database credentials, JIRA instance URL, and paths with your actual values.