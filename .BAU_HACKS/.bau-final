To generate a single HTML file that contains both updated and non-updated JIRAs after syncing with the Oracle DB, I will update the Python code to handle this scenario. The updated file will contain two sections:

	1.	Updated successfully to respective environment – JIRAs that were inserted/updated in the database.
	2.	Not Updated into DB – JIRAs that could not be updated in the database due to the missing Job_Number.

Updated Python Code (jira_sync.py)

Here’s how the Python code can be updated to handle both updated and non-updated JIRAs and return a combined HTML file as the result:

from flask import Flask, jsonify, request, send_file
import cx_Oracle
import requests
import os
import re
from io import StringIO

app = Flask(__name__)

# JIRA API and DB connection details
JIRA_API_URL = os.getenv('JIRA_API_URL')
JIRA_API_TOKEN = os.getenv('JIRA_API_TOKEN')
ORACLE_DB_PROD_CONN_STR = os.getenv('ORACLE_DB_PROD_CONN_STR')
ORACLE_DB_QUALITY_CONN_STR = os.getenv('ORACLE_DB_QUALITY_CONN_STR')

headers = {
    'Authorization': f'Bearer {JIRA_API_TOKEN}',
    'Content-Type': 'application/json'
}

@app.route('/sync_jira', methods=['GET'])
def sync_jira():
    # Get JIRA issues via the API
    response = requests.get(JIRA_API_URL, headers=headers)
    issues = response.json().get('issues', [])
    
    updated_jiras = []
    non_updated_jiras = []

    for issue in issues:
        jira_number = issue['key']
        status = issue['fields']['status']['name']
        summary = issue['fields']['summary']
        criticality = issue['fields'].get('priority', {}).get('name', 'N/A')
        description = issue['fields'].get('description', 'N/A')
        creation_date = issue['fields']['created']
        comments = issue['fields']['comment']['comments']
        first_comment = comments[0]['body'] if comments else "No Comments"
        last_comment = comments[-1]['body'] if comments else "No Comments"

        # Extract Job_Number from summary using regex
        job_number_match = re.search(r"Job_(\d+)", summary)
        job_number = job_number_match.group(1) if job_number_match else None

        # Determine which DB to connect based on Job_Number
        if job_number:
            conn_str = ORACLE_DB_PROD_CONN_STR if 'prod' in summary.lower() else ORACLE_DB_QUALITY_CONN_STR
            conn = cx_Oracle.connect(conn_str)
            cursor = conn.cursor()

            # Insert or update the data in the appropriate DB
            cursor.execute("""
                MERGE INTO jira_issues ji
                USING dual
                ON (ji.jira_number = :jira_number)
                WHEN MATCHED THEN
                    UPDATE SET ji.status = :status, ji.summary = :summary, ji.job_number = :job_number,
                               ji.criticality = :criticality, ji.description = :description, ji.creation_date = :creation_date,
                               ji.first_comment = :first_comment, ji.last_comment = :last_comment
                WHEN NOT MATCHED THEN
                    INSERT (jira_number, status, summary, job_number, criticality, description, creation_date, first_comment, last_comment)
                    VALUES (:jira_number, :status, :summary, :job_number, :criticality, :description, :creation_date, :first_comment, :last_comment)
            """, [jira_number, status, summary, job_number, criticality, description, creation_date, first_comment, last_comment])
            conn.commit()
            cursor.close()
            conn.close()

            # Add to the updated list
            updated_jiras.append({
                'jira_number': jira_number,
                'job_number': job_number,
                'criticality': criticality,
                'creation_date': creation_date
            })
        else:
            # Add to the non-updated list if no Job_Number
            non_updated_jiras.append({
                'jira_number': jira_number,
                'criticality': criticality,
                'creation_date': creation_date
            })
    
    # After processing all JIRAs, generate the HTML file
    html_output = generate_html(updated_jiras, non_updated_jiras)
    
    # Return the HTML file as the response
    return send_file(html_output, mimetype='text/html', as_attachment=True, attachment_filename="Result_list.html")

def generate_html(updated_jiras, non_updated_jiras):
    # Create an in-memory file for the HTML
    html_file = StringIO()
    
    # Start HTML content
    html_file.write("<html><head><title>JIRA Sync Report</title></head><body>")
    html_file.write("<h1>JIRA Sync Report</h1>")
    
    # Section for Updated JIRAs
    html_file.write("<h2>Updated successfully to respective environment</h2>")
    html_file.write("<table border='1'><thead><tr><th>JIRA Number</th><th>Job Number</th><th>Criticality</th><th>Creation Date</th></tr></thead><tbody>")
    for jira in updated_jiras:
        html_file.write(f"<tr><td><a href='https://your-jira-instance/browse/{jira['jira_number']}'>{jira['jira_number']}</a></td>")
        html_file.write(f"<td>{jira['job_number']}</td>")
        html_file.write(f"<td>{jira['criticality']}</td>")
        html_file.write(f"<td>{jira['creation_date']}</td></tr>")
    html_file.write("</tbody></table>")

    # Section for Non-Updated JIRAs
    html_file.write("<h2>Not Updated into DB</h2>")
    html_file.write("<table border='1'><thead><tr><th>JIRA Number</th><th>Criticality</th><th>Creation Date</th></tr></thead><tbody>")
    for jira in non_updated_jiras:
        html_file.write(f"<tr><td><a href='https://your-jira-instance/browse/{jira['jira_number']}'>{jira['jira_number']}</a></td>")
        html_file.write(f"<td>{jira['criticality']}</td>")
        html_file.write(f"<td>{jira['creation_date']}</td></tr>")
    html_file.write("</tbody></table>")
    
    # End HTML content
    html_file.write("</body></html>")
    
    # Move cursor to the beginning of the StringIO object
    html_file.seek(0)
    
    return html_file

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)

Explanation of Updates:

	1.	Processing JIRA Data:
	•	Each JIRA issue is fetched from the JIRA API and processed. If a Job_Number is found, the JIRA is inserted or updated in the Oracle DB.
	•	If no Job_Number is found, it is added to the “Not Updated” list.
	2.	Generating the HTML Report:
	•	The HTML report is generated using the generate_html function.
	•	The report contains two sections:
	•	JIRAs that were updated in the respective environment (with Job_Number).
	•	JIRAs that were not updated (without Job_Number).
	•	The HTML file is returned as a file download.

3. Updated Dockerfile

If you haven’t already, ensure your Dockerfile reflects these changes:

FROM python:3.8-slim

WORKDIR /app

COPY requirements.txt .

RUN pip install -r requirements.txt

COPY . .

CMD ["gunicorn", "--bind", "0.0.0.0:5000", "wsgi:app"]

4. API Endpoint URL

Ensure your sync_jira.sh script uses the correct API endpoint to call this service:

KUBE_SERVICE_URL="http://jira-oracle-sync-service"
response=$(curl -s -o ${HTML_FILE} -w "%{http_code}" ${KUBE_SERVICE_URL}/sync_jira)

This updated code structure ensures that:

	•	JIRAs are inserted/updated in the respective environment’s DB (Prod or Quality).
	•	The HTML report contains both the updated JIRAs and the non-updated JIRAs.
	•	The HTML file is returned as part of the response and can be captured in your Bamboo script for email delivery.

5. Shell Script

No changes are required to the shell script (sync_jira.sh) except for using the correct Kubernetes service endpoint URL to retrieve the HTML file.

This solution provides a full report with successful updates and items that could not be processed due to missing Job_Number.

=#=#=#

Here’s the complete structure, Python module, and Kubernetes YAML configuration for a Flask application that synchronizes JIRA issues with an Oracle database. This includes inserting, updating, and deleting JIRA records based on the JIRA API filter. The setup uses Kubernetes secrets to securely store the JIRA API token and Oracle DB connection strings, with the environment (Prod or Quality) being selected based on the job number.

1. Project Structure

jira_oracle_sync/
│
├── app/
│   ├── __init__.py              # Flask app initialization
│   ├── jira_sync.py             # Core sync logic
│   ├── db.py                    # Database connection logic (Prod/Quality)
│   ├── utils.py                 # Utility functions (regex, env determination)
│   ├── templates/
│   │   └── result_list.html     # HTML template for the JIRA report
│
├── requirements.txt             # Python dependencies
├── Dockerfile                   # Docker configuration
├── wsgi.py                      # Gunicorn WSGI entry point
├── helm/
│   ├── chart.yaml               # Helm chart for deployment
│   └── values.yaml              # Helm values for environment-specific configurations
├── kube/
│   ├── deployment.yaml          # Kubernetes deployment configuration
│   ├── service.yaml             # Kubernetes service configuration
│   ├── secrets.yaml             # Kubernetes secret management for sensitive data
│   └── configmap.yaml           # Environment variables config map
└── config.py                    # Flask app configuration

2. Python Module

app/jira_sync.py - Main Sync Logic

import os
import requests
from flask import Flask, render_template, Response
from app.db import OracleDB
from app.utils import extract_job_number, determine_env

app = Flask(__name__)
db = OracleDB()

JIRA_API_URL = "https://your-jira-instance/rest/api/2/search"
JIRA_API_TOKEN = os.getenv('JIRA_API_TOKEN')

@app.route('/sync_jira', methods=['GET'])
def sync_jira():
    headers = {'Authorization': f'Bearer {JIRA_API_TOKEN}'}
    params = {'jql': 'your_filter_here'}  # Add your JIRA JQL filter
    response = requests.get(JIRA_API_URL, headers=headers, params=params)
    jira_issues = response.json()['issues']
    
    updated_jiras = []
    not_updated_jiras = []
    jira_numbers_in_api = []

    # Process each JIRA issue from API response
    for issue in jira_issues:
        jira_number = issue['key']
        summary = issue['fields']['summary']
        status = issue['fields']['status']['name']
        description = issue['fields']['description']
        creation_date = issue['fields']['created']
        comments = issue['fields']['comment']['comments']
        first_comment = comments[0] if comments else None
        last_comment = comments[-1] if comments else None
        criticity = issue['fields']['priority']['name']

        job_number = extract_job_number(summary)
        jira_numbers_in_api.append(jira_number)

        if job_number:
            # Determine the environment (Prod or Quality) based on job number
            env = determine_env(job_number)
            
            # Insert or Update JIRA issue in the respective environment
            db.insert_or_update_jira(
                jira_number, summary, status, job_number, criticity, description, creation_date, first_comment, last_comment, env
            )
            updated_jiras.append((jira_number, job_number, criticity, creation_date))
        else:
            not_updated_jiras.append((jira_number, criticity, creation_date))

    # Fetch existing JIRAs from the DB for deletion check
    for env in ['prod', 'quality']:
        existing_jiras_in_db = db.get_existing_jiras(env)
        for jira_number in existing_jiras_in_db:
            if jira_number not in jira_numbers_in_api:
                # If JIRA is not in the API response, delete it from the respective DB
                db.delete_jira(jira_number, env)

    # Generate HTML report
    html_content = render_template(
        'result_list.html',
        updated_jiras=updated_jiras,
        not_updated_jiras=not_updated_jiras
    )

    return Response(html_content, mimetype='text/html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

app/db.py - Oracle DB Connection and Operations

import cx_Oracle
import os

class OracleDB:
    def __init__(self):
        self.prod_conn_str = os.getenv('ORACLE_DB_PROD_CONN_STR')
        self.quality_conn_str = os.getenv('ORACLE_DB_QUALITY_CONN_STR')
        
    def connect(self, env):
        """Connect to the selected environment (Prod or Quality)."""
        if env == 'prod':
            self.conn = cx_Oracle.connect(self.prod_conn_str)
        elif env == 'quality':
            self.conn = cx_Oracle.connect(self.quality_conn_str)
        else:
            raise ValueError(f"Unknown environment: {env}")

    def close(self):
        if self.conn:
            self.conn.close()

    def insert_or_update_jira(self, jira_number, summary, status, job_number, criticity, description, creation_date, first_comment, last_comment, env):
        self.connect(env)
        cursor = self.conn.cursor()

        sql = """
        MERGE INTO jira_issues t
        USING dual
        ON (t.jira_number = :jira_number)
        WHEN MATCHED THEN
            UPDATE SET
                t.status = :status,
                t.summary = :summary,
                t.job_number = :job_number,
                t.criticity = :criticity,
                t.description = :description,
                t.creation_date = :creation_date,
                t.first_comment = :first_comment,
                t.last_comment = :last_comment
        WHEN NOT MATCHED THEN
            INSERT (jira_number, status, summary, job_number, criticity, description, creation_date, first_comment, last_comment)
            VALUES (:jira_number, :status, :summary, :job_number, :criticity, :description, :creation_date, :first_comment, :last_comment)
        """
        cursor.execute(sql, [jira_number, status, summary, job_number, criticity, description, creation_date, first_comment, last_comment])
        self.conn.commit()
        self.close()

    def get_existing_jiras(self, env):
        """Retrieve all JIRA numbers from the database for the specified environment."""
        self.connect(env)
        cursor = self.conn.cursor()
        
        sql = "SELECT jira_number FROM jira_issues"
        cursor.execute(sql)
        existing_jiras = [row[0] for row in cursor.fetchall()]
        self.close()
        
        return existing_jiras

    def delete_jira(self, jira_number, env):
        """Delete a JIRA issue from the database."""
        self.connect(env)
        cursor = self.conn.cursor()
        
        sql = "DELETE FROM jira_issues WHERE jira_number = :jira_number"
        cursor.execute(sql, [jira_number])
        self.conn.commit()
        self.close()

app/utils.py - Utility Functions

import re

def extract_job_number(summary):
    """Extract job number from the summary."""
    match = re.search(r'Job Number: (\d+)', summary)
    return match.group(1) if match else None

def determine_env(job_number):
    """Determine environment (Prod or Quality) based on job number."""
    if job_number.startswith('P'):
        return 'prod'
    elif job_number.startswith('Q'):
        return 'quality'
    else:
        raise ValueError(f"Invalid job number format: {job_number}")

app/templates/result_list.html - HTML Template for Sync Report

<!DOCTYPE html>
<html>
<head>
    <title>JIRA Sync Report</title>
</head>
<body>
    <h2>Updated successfully to respective environment</h2>
    <table border="1">
        <thead>
            <tr>
                <th>JIRA Number</th>
                <th>Job Number</th>
                <th>Criticity</th>
                <th>Creation Date</th>
            </tr>
        </thead>
        <tbody>
        {% for jira, job, criticity, date in updated_jiras %}
            <tr>
                <td><a href="https://your-jira-instance/browse/{{ jira }}">{{ jira }}</a></td>
                <td><a href="https://your-job-instance/job/{{ job }}">{{ job }}</a></td>
                <td>{{ criticity }}</td>
                <td>{{ date }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <h2>Not Updated into DB</h2>
    <table border="1">
        <thead>
            <tr>
                <th>JIRA Number</th>
                <th>Criticity</th>
                <th>Creation Date</th>
            </tr>
        </thead>
        <tbody>
        {% for jira, criticity, date in not_updated_jiras %}
            <tr>
                <td><a href="https://your-jira-instance/browse/{{ jira }}">{{ jira }}</a></td>
                <td>{{ criticity }}</td>
                <td>{{ date }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</body>
</html>

3. Dockerfile

FROM python:3.8-slim

WORKDIR /app

COPY requirements.txt .

RUN pip install -r requirements.txt

COPY . .

CMD ["gunicorn", "--bind", "0.0.0.0:5000", "wsgi:app"]

4. wsgi.py - Gunicorn Entry Point

from app.jira_sync import app

if __name__ == "__main__":
    app.run()

5. Kubernetes and Helm Configuration

kube/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-oracle-sync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jira-oracle-sync
  template:
    metadata:
      labels:
        app: jira-oracle-sync
    spec:
      containers:
      - name: jira-oracle-sync
        image: your-docker-repo/jira-oracle-sync:latest
        ports:
        - containerPort: 5000
        env:
        - name: ORACLE_DB_PROD_CONN_STR
          valueFrom:
            secretKeyRef:
              name: jira-oracle-sync-secrets
              key: oracle-prod-conn-str
        - name: ORACLE_DB_QUALITY_CONN_STR
          valueFrom:
            secretKeyRef:
              name: jira-oracle-sync-secrets
              key: oracle-quality-conn-str
        - name: JIRA_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: jira-oracle-sync-secrets
              key: jira-api-token

kube/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: jira-oracle-sync-service
spec:
  selector:
    app: jira-oracle-sync
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000

kube/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: jira-oracle-sync-secrets
type: Opaque
data:
  oracle-prod-conn-str: base64_encoded_prod_conn_str
  oracle-quality-conn-str: base64_encoded_quality_conn_str
  jira-api-token: base64_encoded_jira_api_token

kube/configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: jira-oracle-sync-config
data:
  JIRA_API_URL: "https://your-jira-instance/rest/api/2/search"

Helm Configuration:

	•	helm/chart.yaml

apiVersion: v2
name: jira-oracle-sync
description: A Helm chart for deploying JIRA Oracle sync service.
version: 1.0.0

	•	helm/values.yaml

replicaCount: 1
image:
  repository: your-docker-repo/jira-oracle-sync
  pullPolicy: IfNotPresent
  tag: latest

service:
  type: ClusterIP
  port: 80

6. requirements.txt

Flask==2.0.3
requests==2.26.0
cx_Oracle==8.3
gunicorn==20.1

7. Base64 Encoding of Secrets

To encode secrets for Kubernetes:

echo -n 'your_connection_string' | base64
echo -n 'your_jira_api_token' | base64

This is the complete structure for a Kubernetes-based Python service using Flask and Gunicorn, securely interacting with JIRA and Oracle DB across environments.