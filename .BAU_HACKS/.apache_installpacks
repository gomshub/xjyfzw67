To configure a path for accessing scripts through a web server like **Nginx** or **Apache**, you need to modify their respective configuration files. Below are the details of how to configure both Nginx and Apache to serve a directory that contains your shell scripts.

### 1. **Nginx Configuration**

#### Nginx Config File:
- The main configuration file for Nginx is typically located at:
  - **Global config file**: `/etc/nginx/nginx.conf`
  - **Site-specific config file**: `/etc/nginx/sites-available/default` (or any other configuration file under `sites-available`)

#### Steps to Configure Nginx to Serve Scripts:

1. **Edit Nginx configuration file**:
   You can edit the server block in `/etc/nginx/sites-available/default` or create a custom configuration file. In this example, we will use `/etc/nginx/sites-available/default`.

2. **Configure the path for scripts**:
   Add a `location` block in the Nginx configuration to serve the scripts.

   Example configuration for serving a script directory:
   ```nginx
   server {
       listen 80;
       server_name example.com;  # Use your domain or IP

       location /scripts/ {
           # The directory where your scripts are stored
           alias /path/to/your/scripts/;
           autoindex on;  # Optional: allows directory listing
           allow all;  # Allow all requests, or configure specific IPs as needed
       }
   }
   ```

   - `alias /path/to/your/scripts/;` points to the directory where your scripts are located.
   - `autoindex on;` allows directory listing if you want users to see the scripts in that directory (optional).
   - Replace `/path/to/your/scripts/` with the actual path where your shell scripts reside.

3. **Restart Nginx**:
   After making the changes, restart Nginx to apply the new configuration:
   ```bash
   sudo systemctl restart nginx
   ```

#### Example Access:
Once this is configured, you can access your script from a browser or a `curl` command:
```bash
http://example.com/scripts/install_pack.sh
```

### 2. **Apache Configuration**

#### Apache Config File:
- The main configuration file for Apache is typically located at:
  - **Global config file**: `/etc/httpd/httpd.conf` (for RedHat/CentOS/Fedora)
  - **Site-specific config file**: `/etc/apache2/sites-available/000-default.conf` (for Debian/Ubuntu)
  - Alternatively, you can configure your scripts in a `.htaccess` file, but it's better to modify the main configuration.

#### Steps to Configure Apache to Serve Scripts:

1. **Edit Apache configuration file**:
   Open the configuration file (for example, `/etc/apache2/sites-available/000-default.conf` on Ubuntu) in a text editor:
   ```bash
   sudo nano /etc/apache2/sites-available/000-default.conf
   ```

2. **Configure the path for scripts**:
   Add a `DocumentRoot` or `Alias` directive to serve the scripts.

   Example configuration for serving a script directory:
   ```apache
   <VirtualHost *:80>
       DocumentRoot /var/www/html
       ServerName example.com  # Your domain or IP address

       Alias /scripts/ /path/to/your/scripts/  # Map the /scripts/ URL to the actual directory
       
       <Directory /path/to/your/scripts/>
           Options +Indexes  # Allow directory listing, optional
           AllowOverride None  # Prevent .htaccess overrides
           Require all granted  # Allow all requests, or configure as needed
       </Directory>
   </VirtualHost>
   ```

   - `Alias /scripts/ /path/to/your/scripts/;` maps the `/scripts/` URL to the actual location on the filesystem.
   - `<Directory /path/to/your/scripts/>` specifies permissions and settings for the directory where your scripts are stored.
   - `Options +Indexes` allows directory listing (optional).
   - `Require all granted` allows all users to access the directory (you can restrict access by IP if needed).

3. **Restart Apache**:
   After making the changes, restart Apache to apply the new configuration:
   ```bash
   sudo systemctl restart apache2  # For Debian/Ubuntu systems
   sudo systemctl restart httpd    # For RedHat/CentOS/Fedora systems
   ```

#### Example Access:
Once this is configured, you can access your script via the following URL:
```bash
http://example.com/scripts/install_pack.sh
```

### Additional Security Considerations:
- **Permissions**: Ensure that the script directory and files have the appropriate read and execute permissions for the web server user (`www-data` for Nginx/Apache on many Linux distributions).
  ```bash
  sudo chown -R www-data:www-data /path/to/your/scripts
  sudo chmod -R 755 /path/to/your/scripts
  ```
- **Restricting Access**: If you don't want the scripts to be publicly accessible, you can restrict access based on IP or require authentication. For instance, in Nginx:
  ```nginx
  location /scripts/ {
      allow 192.168.1.0/24;  # Allow only local network
      deny all;  # Deny everything else
  }
  ```
  Similarly, you can configure Apache to restrict access based on IP in the `<Directory>` block.

### Summary

1. **For Nginx**: Modify the `/etc/nginx/sites-available/default` (or a specific site config) and add the `alias` directive to expose your scripts directory.
2. **For Apache**: Modify `/etc/apache2/sites-available/000-default.conf` (or a specific site config) and use the `Alias` directive to expose the script path.

Once the configuration is in place and the web server is restarted, you should be able to access your scripts via the DNS, such as `http://example.com/scripts/install_pack.sh`.
