To trigger JIRA comments update immediately after the `update-comments` field is updated in the database, you can use database triggers or a change data capture (CDC) system. Here, I'll show you how to use a database trigger and a Python script to achieve this. We'll set up a trigger in the database to call a Python script via a tool like `pg_notify` (for PostgreSQL) or another messaging system that can interface with Python.

### Step 1: Set Up Database Trigger

Assuming you are using PostgreSQL, you can use the `pg_notify` function to send notifications to a Python script listening for changes.

#### PostgreSQL Trigger

1. **Create a Function to Send Notifications:**

```sql
CREATE OR REPLACE FUNCTION notify_comment_update()
RETURNS TRIGGER AS $$
BEGIN
    PERFORM pg_notify('comment_update', NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
```

2. **Create a Trigger for the `issues` Table:**

```sql
CREATE TRIGGER update_comment_trigger
AFTER UPDATE OF update_comments ON issues
FOR EACH ROW
WHEN (NEW.update_comments = TRUE)
EXECUTE FUNCTION notify_comment_update();
```

### Step 2: Python Script to Listen for Notifications

1. **Install the Required Libraries:**

```bash
pip install psycopg2
pip install jira
```

2. **Python Script to Listen for Notifications and Update JIRA:**

```python
import os
import select
import psycopg2
from jira import JIRA

class JiraClient:
    def __init__(self, jira_url, username, api_token):
        self.jira = JIRA(server=jira_url, basic_auth=(username, api_token))

    def update_issue_comment(self, issue_key, comment):
        issue = self.jira.issue(issue_key)
        self.jira.add_comment(issue, comment)

class DBClient:
    def __init__(self, dsn):
        self.connection = psycopg2.connect(dsn)
        self.connection.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
        self.cursor = self.connection.cursor()

    def listen_for_updates(self):
        self.cursor.execute("LISTEN comment_update;")
        print("Waiting for notifications on channel 'comment_update'")
        while True:
            if select.select([self.connection], [], [], 5) == ([], [], []):
                print("Timeout...")
            else:
                self.connection.poll()
                while self.connection.notifies:
                    notify = self.connection.notifies.pop(0)
                    issue_id = notify.payload
                    self.process_update(issue_id)

    def process_update(self, issue_id):
        self.cursor.execute("SELECT * FROM issues WHERE id = %s", (issue_id,))
        issue = self.cursor.fetchone()
        if issue and issue[5]:  # Assuming 'comments' is the 6th column (index 5)
            jira_client.update_issue_comment(issue[1], issue[5])
            self.cursor.execute("UPDATE issues SET update_comments = FALSE WHERE id = %s", (issue_id,))
            self.connection.commit()

if __name__ == "__main__":
    dsn = os.environ['DATABASE_DSN']  # Format: dbname=<db> user=<user> password=<pwd> host=<host> port=<port>
    jira_url = os.environ['JIRA_URL']
    jira_username = os.environ['JIRA_USERNAME']
    jira_api_token = os.environ['JIRA_API_TOKEN']

    jira_client = JiraClient(jira_url, jira_username, jira_api_token)
    db_client = DBClient(dsn)

    db_client.listen_for_updates()
```

### Step 3: Update Kubernetes Deployment

Ensure that the Kubernetes deployment runs the script and that all necessary environment variables are set.

#### `kube_deployment.yaml`

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-sync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jira-sync
  template:
    metadata:
      labels:
        app: jira-sync
    spec:
      containers:
      - name: jira-sync
        image: your-dockerhub-username/jira-sync:latest
        env:
        - name: DATABASE_DSN
          value: "dbname=yourdbname user=yourdbuser password=yourdbpassword host=yourdbhost port=yourdbport"
        - name: JIRA_URL
          value: "https://your-jira-instance"
        - name: JIRA_USERNAME
          value: "your-username"
        - name: JIRA_API_TOKEN
          value: "your-api-token"
```

### Step 4: Shell Script for Deployment

No changes needed in `deploy.sh` if it's just building and deploying the Docker image.

```bash
#!/bin/bash

# Build Docker image
docker build -t your-dockerhub-username/jira-sync:latest .

# Push Docker image to DockerHub
docker push your-dockerhub-username/jira-sync:latest

# Apply Kubernetes deployment
kubectl apply -f kube_deployment.yaml
```

### Summary

1. **Database**: Create a trigger to notify changes on the `update_comments` field.
2. **Python Script**: Listen for notifications and update JIRA comments accordingly.
3. **Kubernetes**: Deploy the Python script as a service in your Kubernetes cluster.

This setup will immediately trigger JIRA comments update when the `update-comments` field is updated in the database.