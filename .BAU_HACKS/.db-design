To achieve synchronization between updates in the database and JIRA, you can follow these steps:

1. **Database Table Design**:
   Create a table with the necessary fields including `UPDATE_COMMENT` and `UPDATE_STATUS`.

2. **Trigger Mechanism**:
   Use database triggers to detect changes in `UPDATE_COMMENT` and `UPDATE_STATUS`.

3. **Shell Script**:
   Write a shell script that periodically checks the database for changes and updates JIRA accordingly.

### Step-by-Step Implementation

#### 1. Database Table Design

Assuming you are using a relational database like MySQL or PostgreSQL, here is an example SQL statement to create the table:

```sql
CREATE TABLE jira_issues (
    jira_no VARCHAR(20) PRIMARY KEY,
    summary TEXT,
    description TEXT,
    comments TEXT,
    first_comment TEXT,
    last_comment TEXT,
    job_name VARCHAR(20),
    job_result VARCHAR(20),
    update_comment TEXT,
    update_status VARCHAR(20)
);
```

#### 2. Trigger Mechanism

Implement triggers to log changes to `UPDATE_COMMENT` and `UPDATE_STATUS` fields. For simplicity, we will assume you can log changes to another table `jira_updates_log`.

Example for MySQL:

```sql
CREATE TABLE jira_updates_log (
    id INT AUTO_INCREMENT PRIMARY KEY,
    jira_no VARCHAR(20),
    update_comment TEXT,
    update_status VARCHAR(20),
    processed BOOLEAN DEFAULT FALSE,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DELIMITER $$

CREATE TRIGGER after_jira_issues_update
AFTER UPDATE ON jira_issues
FOR EACH ROW
BEGIN
    IF NEW.update_comment != OLD.update_comment OR NEW.update_status != OLD.update_status THEN
        INSERT INTO jira_updates_log (jira_no, update_comment, update_status) 
        VALUES (NEW.jira_no, NEW.update_comment, NEW.update_status);
    END IF;
END $$

DELIMITER ;
```

#### 3. Shell Script to Synchronize Updates to JIRA

Create a shell script `sync_jira_updates.sh` to check the log table for changes and update JIRA accordingly.

```sh
#!/bin/bash

DB_HOST="your_db_host"
DB_USER="your_db_user"
DB_PASS="your_db_pass"
DB_NAME="your_db_name"
JIRA_BASE_URL="https://your_jira_instance"
JIRA_USERNAME="your_jira_username"
JIRA_API_TOKEN="your_jira_api_token"

# Function to update JIRA
update_jira_issue() {
    local jira_no=$1
    local update_comment=$2
    local update_status=$3

    # Update JIRA issue comment
    if [ -n "$update_comment" ]; then
        curl -u $JIRA_USERNAME:$JIRA_API_TOKEN -X POST -H "Content-Type: application/json" \
            --data "{\"body\": \"$update_comment\"}" \
            "$JIRA_BASE_URL/rest/api/2/issue/$jira_no/comment"
    fi

    # Update JIRA issue status
    if [ -n "$update_status" ]; then
        transition_id=$(curl -u $JIRA_USERNAME:$JIRA_API_TOKEN -X GET -H "Content-Type: application/json" \
            "$JIRA_BASE_URL/rest/api/2/issue/$jira_no/transitions" | jq -r ".transitions[] | select(.name==\"$update_status\") | .id")

        if [ -n "$transition_id" ]; then
            curl -u $JIRA_USERNAME:$JIRA_API_TOKEN -X POST -H "Content-Type: application/json" \
                --data "{\"transition\": {\"id\": \"$transition_id\"}}" \
                "$JIRA_BASE_URL/rest/api/2/issue/$jira_no/transitions"
        else
            echo "Transition to status '$update_status' not found for issue $jira_no"
        fi
    fi
}

# Fetch updates from the log table
updates=$(mysql -h $DB_HOST -u $DB_USER -p$DB_PASS $DB_NAME -N -e \
    "SELECT id, jira_no, update_comment, update_status FROM jira_updates_log WHERE processed = FALSE")

# Loop through each update and process
while IFS=$'\t' read -r id jira_no update_comment update_status; do
    update_jira_issue "$jira_no" "$update_comment" "$update_status"

    # Mark the update as processed
    mysql -h $DB_HOST -u $DB_USER -p$DB_PASS $DB_NAME -e \
        "UPDATE jira_updates_log SET processed = TRUE WHERE id = $id"
done <<< "$updates"
```

### Setting Up a Cron Job

To run the `sync_jira_updates.sh` script periodically, you can set up a cron job.

1. **Open Crontab**:
   ```sh
   crontab -e
   ```

2. **Add Cron Job**:
   To run the script every 10 minutes, add the following line:
   ```sh
   */10 * * * * /path/to/sync_jira_updates.sh
   ```

### Summary

- **Database Table**: Create a table for JIRA issues with fields including `UPDATE_COMMENT` and `UPDATE_STATUS`.
- **Trigger**: Set up a trigger to log changes to these fields.
- **Shell Script**: Create a script to process the changes and update JIRA via its API.
- **Cron Job**: Schedule the script to run periodically to keep the updates synchronized.

Make sure to replace placeholder values like database credentials, JIRA instance URL, and paths with your actual values.