To trigger a JIRA comments update via the REST API when the `update-comments` field is updated in your table, you will need to implement a change detection mechanism on the database. Hereâ€™s how you can achieve this step-by-step:

### Step 1: Modify the Database Schema

Ensure your database schema includes a way to detect changes. This could be done using a timestamp or a status flag.

### Step 2: Create a Polling Mechanism in Python

Set up a polling mechanism in your Python script to periodically check the database for any changes in the `update-comments` field.

### Step 3: Update the Python Module

Add functionality to detect changes in the `update-comments` field and trigger the JIRA comment update via the JIRA REST API.

### Step 4: Update Kubernetes Deployment

Ensure the Kubernetes deployment periodically triggers the updated Python script.

Here's an implementation plan:

#### Database Table Schema Example

Assuming you have a table `issues` with the following schema:

```sql
CREATE TABLE issues (
    id INT AUTO_INCREMENT PRIMARY KEY,
    jira_key VARCHAR(50) NOT NULL,
    status VARCHAR(50),
    assignee VARCHAR(100),
    summary VARCHAR(255),
    comments TEXT,
    update_comments BOOLEAN DEFAULT FALSE
);
```

#### Python Module Update

1. **`jira_client.py`**: Add a method to update JIRA comments.
2. **`main.py`**: Add a polling mechanism to detect changes and update JIRA comments.

**Updated `jira_client.py`:**

```python
from jira import JIRA

class JiraClient:
    def __init__(self, jira_url, username, api_token):
        self.jira = JIRA(server=jira_url, basic_auth=(username, api_token))
    
    def get_issues_from_filter(self, filter_id):
        issues = self.jira.search_issues(f'filter={filter_id}', maxResults=1000)
        return issues

    def get_issue_details(self, issue_key):
        issue = self.jira.issue(issue_key)
        details = {
            'key': issue.key,
            'status': issue.fields.status.name,
            'assignee': issue.fields.assignee.displayName if issue.fields.assignee else None,
            'summary': issue.fields.summary,
            'comments': [comment.body for comment in issue.fields.comment.comments]
        }
        return details

    def update_issue_comment(self, issue_key, comment):
        issue = self.jira.issue(issue_key)
        self.jira.add_comment(issue, comment)
```

**Updated `main.py`:**

```python
import os
import time
from jira_client import JiraClient
from db_client import DBClient

def get_db_env(summary):
    if 'Prod' in summary:
        return 'prod_db'
    elif 'Quality' in summary:
        return 'quality_db'
    elif 'Dev' in summary:
        return 'dev_db'
    return None

def check_for_updates_and_update_jira():
    jira_url = os.environ['JIRA_URL']
    jira_username = os.environ['JIRA_USERNAME']
    jira_api_token = os.environ['JIRA_API_TOKEN']

    jira_client = JiraClient(jira_url, jira_username, jira_api_token)

    for env in ['prod_db', 'quality_db', 'dev_db']:
        db_client = DBClient(
            host=os.environ[f'{env}_HOST'],
            user=os.environ[f'{env}_USER'],
            password=os.environ[f'{env}_PASSWORD'],
            database=os.environ[f'{env}_NAME']
        )

        # Fetch issues where update_comments is True
        issues_to_update = db_client.get_issues_to_update_comments()
        
        for issue in issues_to_update:
            jira_client.update_issue_comment(issue['jira_key'], issue['comments'])
            db_client.mark_comment_updated(issue['id'])

def main():
    while True:
        check_for_updates_and_update_jira()
        time.sleep(60)  # Check every 60 seconds

if __name__ == '__main__':
    main()
```

**Updated `db_client.py`:**

```python
import pymysql

class DBClient:
    def __init__(self, host, user, password, database):
        self.connection = pymysql.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )

    def update_issue(self, issue_details):
        with self.connection.cursor() as cursor:
            sql = """
            INSERT INTO issues (key, status, assignee, summary, comments, update_comments)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
            status=VALUES(status),
            assignee=VALUES(assignee),
            comments=VALUES(comments),
            update_comments=VALUES(update_comments)
            """
            cursor.execute(sql, (
                issue_details['key'],
                issue_details['status'],
                issue_details['assignee'],
                issue_details['summary'],
                '\n'.join(issue_details['comments']),
                False  # Default to False after update
            ))
        self.connection.commit()

    def get_issues_to_update_comments(self):
        with self.connection.cursor(pymysql.cursors.DictCursor) as cursor:
            sql = "SELECT * FROM issues WHERE update_comments = TRUE"
            cursor.execute(sql)
            return cursor.fetchall()

    def mark_comment_updated(self, issue_id):
        with self.connection.cursor() as cursor:
            sql = "UPDATE issues SET update_comments = FALSE WHERE id = %s"
            cursor.execute(sql, (issue_id,))
        self.connection.commit()
```

### Step 5: Update Kubernetes Deployment

Ensure that the Kubernetes deployment is updated to trigger the new polling mechanism.

#### `kube_deployment.yaml`

No changes needed if the polling is inside the Python application. Just ensure that the environment variables are correctly set.

### Step 6: Shell Script for Deployment

No changes needed in the `deploy.sh` if it's just building and deploying the Docker image.

### Summary

1. **Database**: Ensure your table schema supports a flag (`update_comments`) to detect when comments need to be updated.
2. **Python Module**: Add functionality to poll the database and update JIRA comments.
3. **Kubernetes**: Deploy the updated Python module using your existing deployment strategy.

This setup will check your database periodically and update JIRA comments when required.