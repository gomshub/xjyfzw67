To set up a cron job that checks for updates in a specific field of a database table and triggers a shell script to update JIRA comments, you need to do the following:

1. **Create a shell script to update JIRA comments.**
2. **Create a Python script to check the database field and trigger the shell script.**
3. **Set up a cron job to run the Python script periodically.**

### Step 1: Shell Script to Update JIRA Comments

Create a shell script (`update_jira_comments.sh`) that updates JIRA comments based on the input it receives:

```sh
#!/bin/bash

# Variables
JIRA_BASE_URL="https://your-jira-instance.atlassian.net"
JIRA_USERNAME="your-jira-username"
JIRA_API_TOKEN="your-jira-api-token"

# Arguments
ISSUE_KEY=$1
COMMENT=$2

# Add comment to JIRA issue
curl -X POST -H "Content-Type: application/json" \
    -u $JIRA_USERNAME:$JIRA_API_TOKEN \
    -d "{\"body\": \"${COMMENT}\"}" \
    ${JIRA_BASE_URL}/rest/api/2/issue/${ISSUE_KEY}/comment
```

Make the script executable:

```sh
chmod +x update_jira_comments.sh
```

### Step 2: Python Script to Check Database Field and Trigger Shell Script

Create a Python script (`check_db_and_trigger.py`) that checks the database for updates and triggers the shell script:

```python
import sqlite3
import os
import subprocess

# Database connection
DB_NAME = 'your_database.db'
TABLE_NAME = 'your_table'
FIELD_NAME = 'your_field'
JIRA_ISSUE_KEY_FIELD = 'jira_issue_key'  # Assuming you have a field that stores JIRA issue keys
LAST_CHECK_FIELD = 'last_check'  # Assuming you have a field that stores the last check timestamp

def check_for_updates():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # Query to find rows where the field has been updated since the last check
    cursor.execute(f"""
        SELECT {JIRA_ISSUE_KEY_FIELD}, {FIELD_NAME} FROM {TABLE_NAME}
        WHERE {LAST_CHECK_FIELD} < CURRENT_TIMESTAMP
    """)

    rows = cursor.fetchall()

    # Update the last check field
    cursor.execute(f"""
        UPDATE {TABLE_NAME}
        SET {LAST_CHECK_FIELD} = CURRENT_TIMESTAMP
    """)

    conn.commit()
    conn.close()

    return rows

def trigger_jira_update(issue_key, comment):
    script_path = './update_jira_comments.sh'
    subprocess.run([script_path, issue_key, comment])

if __name__ == '__main__':
    updated_rows = check_for_updates()
    for issue_key, field_value in updated_rows:
        comment = f"Field '{FIELD_NAME}' has been updated to '{field_value}'."
        trigger_jira_update(issue_key, comment)
```

### Step 3: Set Up a Cron Job

Set up a cron job to run the Python script periodically. You can edit the crontab using `crontab -e` and add a line like this:

```sh
*/5 * * * * /usr/bin/python3 /path/to/check_db_and_trigger.py
```

This will run the `check_db_and_trigger.py` script every 5 minutes.

### Additional Considerations

1. **Database Schema**: Ensure your database schema includes a `last_check` timestamp field to track when the last check was performed.
2. **Error Handling**: Add appropriate error handling in your Python and shell scripts to handle issues like database connectivity problems, API failures, etc.
3. **Security**: Secure sensitive information (like JIRA API tokens) by using environment variables or secure vaults.

By following these steps, you create an automated system that checks a database field for updates and triggers a JIRA comment update using a cron job.