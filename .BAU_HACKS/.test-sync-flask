To test this application locally with Flask, you can use the Flask development server. Here’s a step-by-step guide:

Prerequisites

	1.	Python: Make sure you have Python 3 installed.
	2.	Oracle Client: You’ll need cx_Oracle to connect to Oracle, which requires the Oracle Instant Client. Download it from Oracle’s website.
	3.	Dependencies: Install dependencies from requirements.txt.

Step 1: Set Up Environment Variables

Create a .env file in the project’s root directory with necessary environment variables:

JIRA_API_URL=https://your-jira-instance.atlassian.net
JIRA_BEARER_TOKEN=your-jira-api-token
ORACLE_DB_QUALITY=oracle-db-connection-string-for-quality
ORACLE_DB_PROD=oracle-db-connection-string-for-prod

Make sure to replace each placeholder with your actual credentials and connection details.

Step 2: Install Dependencies

In your project directory, run:

pip install -r requirements.txt

Step 3: Run Flask Locally

Modify app/wsgi.py to run the app directly with Flask’s development server for testing purposes. Update app/wsgi.py as follows:

from . import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)

Step 4: Start the Application

Run the Flask application from the project root directory:

export FLASK_APP=app.wsgi
flask run

Or you can directly run wsgi.py as:

python -m app.wsgi

The application should start at http://localhost:5000.

Step 5: Test API Endpoints

Use a tool like curl or Postman to test your API.

Sync JIRA Issues

Make a POST request to /sync_issues with the filter_id to sync JIRA issues:

curl -X POST http://localhost:5000/sync_issues -H "Content-Type: application/json" -d '{"filter_id": "your_filter_id"}'

Fetch a Single JIRA Issue

Make a GET request to /issue/<jira_number> to fetch details of a specific JIRA issue:

curl http://localhost:5000/issue/YOUR_JIRA_NUMBER

This setup should allow you to run and test the module locally using Flask’s development server. Let me know if you encounter any issues or need further assistance!