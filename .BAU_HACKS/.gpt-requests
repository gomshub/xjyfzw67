To create a Python module that interacts with JIRA's REST API to retrieve issue details and update them into different databases based on their summary titles, and then deploy this module as a Kubernetes service, you can follow these steps:

### Python Module Structure

1. **JiraClient**: A class to interact with JIRA's REST API.
2. **DatabaseClient**: A class to interact with the databases (Prod, Quality, Dev).
3. **JiraService**: A class to handle the logic of fetching JIRA issues and updating the databases.
4. **Kubernetes Deployment**: Kubernetes configuration files to deploy the service.
5. **Bamboo Shell Script**: A script to use the Kubernetes service endpoint to update the databases from a Bamboo plan.

### Directory Structure

```
jira_module/
├── __init__.py
├── jira_client.py
├── database_client.py
├── jira_service.py
├── requirements.txt
├── Dockerfile
├── k8s/
│   ├── deployment.yaml
│   └── service.yaml
└── bamboo/
    └── update_jira.sh
```

### jira_client.py

```python
import requests
from requests.auth import HTTPBasicAuth

class JiraClient:
    def __init__(self, base_url, username, api_token):
        self.base_url = base_url
        self.auth = HTTPBasicAuth(username, api_token)
        self.headers = {
            "Accept": "application/json"
        }

    def get_issues_from_filter(self, filter_id):
        url = f"{self.base_url}/rest/api/2/search?jql=filter={filter_id}"
        response = requests.get(url, headers=self.headers, auth=self.auth)
        response.raise_for_status()
        return response.json()["issues"]

    def get_issue_details(self, issue_key):
        url = f"{self.base_url}/rest/api/2/issue/{issue_key}"
        response = requests.get(url, headers=self.headers, auth=self.auth)
        response.raise_for_status()
        return response.json()
```

### database_client.py

```python
import sqlite3

class DatabaseClient:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()

    def update_issue(self, issue_details):
        query = """
        INSERT INTO issues (issue_key, status, assignee, summary, comments)
        VALUES (?, ?, ?, ?, ?)
        ON CONFLICT(issue_key) DO UPDATE SET
        status=excluded.status,
        assignee=excluded.assignee,
        summary=excluded.summary,
        comments=excluded.comments;
        """
        self.cursor.execute(query, (
            issue_details['key'],
            issue_details['fields']['status']['name'],
            issue_details['fields']['assignee']['displayName'] if issue_details['fields']['assignee'] else None,
            issue_details['fields']['summary'],
            '\n'.join([comment['body'] for comment in issue_details['fields']['comment']['comments']])
        ))
        self.conn.commit()

    def close(self):
        self.conn.close()
```

### jira_service.py

```python
from jira_client import JiraClient
from database_client import DatabaseClient

class JiraService:
    def __init__(self, jira_client, prod_db_client, quality_db_client, dev_db_client):
        self.jira_client = jira_client
        self.prod_db_client = prod_db_client
        self.quality_db_client = quality_db_client
        self.dev_db_client = dev_db_client

    def update_databases_from_filter(self, filter_id):
        issues = self.jira_client.get_issues_from_filter(filter_id)
        for issue in issues:
            issue_details = self.jira_client.get_issue_details(issue['key'])
            summary = issue_details['fields']['summary']
            if "Prod" in summary:
                self.prod_db_client.update_issue(issue_details)
            elif "Quality" in summary:
                self.quality_db_client.update_issue(issue_details)
            elif "Dev" in summary:
                self.dev_db_client.update_issue(issue_details)
        self.prod_db_client.close()
        self.quality_db_client.close()
        self.dev_db_client.close()
```

### requirements.txt

```
requests
```

### Dockerfile

```dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt

COPY . .

CMD ["python", "jira_service.py"]
```

### k8s/deployment.yaml

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-service-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jira-service
  template:
    metadata:
      labels:
        app: jira-service
    spec:
      containers:
      - name: jira-service
        image: your-dockerhub-username/jira-service:latest
        ports:
        - containerPort: 5000
        env:
        - name: JIRA_BASE_URL
          value: "https://your-jira-instance.atlassian.net"
        - name: JIRA_USERNAME
          value: "your-jira-username"
        - name: JIRA_API_TOKEN
          value: "your-jira-api-token"
        - name: PROD_DB_NAME
          value: "prod.db"
        - name: QUALITY_DB_NAME
          value: "quality.db"
        - name: DEV_DB_NAME
          value: "dev.db"
```

### k8s/service.yaml

```yaml
apiVersion: v1
kind: Service
metadata:
  name: jira-service
spec:
  type: LoadBalancer
  selector:
    app: jira-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
```

### bamboo/update_jira.sh

```sh
#!/bin/bash

# Get JIRA filter ID from Bamboo variables
FILTER_ID=$1

# Call the Kubernetes service endpoint
curl -X POST "http://<your-service-endpoint>/update_jira?filter_id=${FILTER_ID}"
```

### Deploying the Service

1. **Build the Docker image**:
   ```sh
   docker build -t your-dockerhub-username/jira-service:latest .
   docker push your-dockerhub-username/jira-service:latest
   ```

2. **Deploy to Kubernetes**:
   ```sh
   kubectl apply -f k8s/deployment.yaml
   kubectl apply -f k8s/service.yaml
   ```

### Bamboo Plan Configuration

1. Add a script task to your Bamboo plan.
2. Use the `update_jira.sh` script to call the Kubernetes service endpoint.

This setup provides a Python module for interacting with JIRA and updating databases, deployed as a Kubernetes service, which can be triggered from a Bamboo plan using a shell script. Adjust the configurations as needed for your specific environment and requirements.