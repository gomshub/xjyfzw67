To build a Python module that meets these requirements, we’ll set up a Flask-based REST API application to:

	1.	Synchronize JIRA issues to an Oracle database.
	2.	Generate an HTML report based on the issues processed.
	3.	Provide individual services for fetching JIRA details and managing synchronization to different environments (Prod or Quality).
	4.	Run with Flask and Gunicorn as the WSGI server, orchestrated by Kubernetes with Helm chart and YAML files.

Here’s a breakdown of the module components and structure:

Project Structure

jira_sync/
├── app/
│   ├── __init__.py
│   ├── config.py
│   ├── jira_service.py
│   ├── db_service.py
│   ├── utils.py
│   ├── templates/
│   │   └── result_list.html
│   ├── routes.py
│   ├── wsgi.py
├── requirements.txt
├── Dockerfile
├── helm/
│   ├── Chart.yaml
│   ├── values.yaml
│   └── templates/
│       ├── deployment.yaml
│       ├── service.yaml
│       ├── configmap.yaml
│       └── secret.yaml
├── kube/
│   ├── deployment.yaml
│   ├── service.yaml
│   └── configmap.yaml
└── README.md

1. Flask Application (App Module)

app/__init__.py

Initializes the Flask app with configuration settings.

from flask import Flask
from .config import Config
from .routes import bp as api_bp

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    app.register_blueprint(api_bp)
    return app

app/config.py

Stores configuration details.

import os

class Config:
    JIRA_API_URL = os.getenv('JIRA_API_URL')
    JIRA_BEARER_TOKEN = os.getenv('JIRA_BEARER_TOKEN')
    ORACLE_DB_QUALITY = os.getenv('ORACLE_DB_QUALITY')
    ORACLE_DB_PROD = os.getenv('ORACLE_DB_PROD')

app/jira_service.py

Interacts with the JIRA API to fetch issues.

import requests
from .config import Config

def fetch_jira_issues(filter_id):
    url = f"{Config.JIRA_API_URL}/filter/{filter_id}/issues"
    headers = {"Authorization": f"Bearer {Config.JIRA_BEARER_TOKEN}"}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

def extract_issue_data(issue):
    # Extract fields as per requirements
    fields = issue['fields']
    return {
        "jira_number": issue['key'],
        "status": fields['status']['name'],
        "summary": fields['summary'],
        "job_number": extract_job_number(fields['summary']),
        "criticity": fields['priority']['name'],
        "description": fields['description'],
        "creation_date": fields['created'],
        "comments": fetch_comments(issue['key']),
    }

def fetch_comments(jira_key):
    url = f"{Config.JIRA_API_URL}/issue/{jira_key}/comment"
    headers = {"Authorization": f"Bearer {Config.JIRA_BEARER_TOKEN}"}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

app/db_service.py

Handles Oracle database CRUD operations.

import cx_Oracle
from .config import Config

def get_connection(env):
    dsn = Config.ORACLE_DB_PROD if env == 'prod' else Config.ORACLE_DB_QUALITY
    return cx_Oracle.connect(dsn)

def upsert_issue(issue_data, env):
    conn = get_connection(env)
    # Insert or update logic based on JIRA number
    conn.close()

def delete_issue(jira_number, env):
    conn = get_connection(env)
    # Delete logic based on JIRA number
    conn.close()

app/utils.py

Contains utility functions like extract_job_number and HTML report generation.

import re
from flask import render_template

def extract_job_number(summary):
    match = re.search(r'JOB-\d+', summary)
    return match.group(0) if match else None

def generate_html_report(updated_issues, not_updated_issues):
    return render_template("result_list.html", updated=updated_issues, not_updated=not_updated_issues)

app/routes.py

Defines Flask routes for the API.

from flask import Blueprint, jsonify, request
from .jira_service import fetch_jira_issues, extract_issue_data
from .db_service import upsert_issue, delete_issue
from .utils import generate_html_report

bp = Blueprint('api', __name__)

@bp.route('/sync_issues', methods=['POST'])
def sync_issues():
    filter_id = request.json.get("filter_id")
    issues = fetch_jira_issues(filter_id)
    updated, not_updated = [], []
    
    for issue in issues:
        data = extract_issue_data(issue)
        env = 'prod' if data['job_number'] else 'quality'
        
        if data['job_number']:
            upsert_issue(data, env)
            updated.append(data)
        else:
            not_updated.append(data)
    
    html_report = generate_html_report(updated, not_updated)
    return html_report

@bp.route('/issue/<jira_number>', methods=['GET'])
def get_issue(jira_number):
    # Fetch single JIRA issue logic
    return jsonify({})

app/wsgi.py

Entry point for Gunicorn.

from . import create_app

app = create_app()

2. Templates

app/templates/result_list.html

<html>
  <body>
    <h2>Updated successfully to respective environment</h2>
    <table>
      <!-- Updated issues table -->
    </table>
    <h2>Not Updated into DB</h2>
    <table>
      <!-- Not updated issues table -->
    </table>
  </body>
</html>

3. requirements.txt

Flask
gunicorn
cx_Oracle
requests

4. Dockerfile

FROM python:3.9
WORKDIR /app
COPY . /app
RUN pip install -r requirements.txt
CMD ["gunicorn", "-w", "4", "app.wsgi:app"]

5. Helm Chart and Kubernetes YAMLs

helm/Chart.yaml

Basic Helm metadata.

apiVersion: v2
name: jira-sync
version: 0.1.0

helm/values.yaml

replicaCount: 1
image:
  repository: jira-sync
  tag: latest
service:
  type: ClusterIP
  port: 80
env:
  JIRA_API_URL: ""
  JIRA_BEARER_TOKEN: ""
  ORACLE_DB_QUALITY: ""
  ORACLE_DB_PROD: ""

helm/templates/deployment.yaml

Kubernetes Deployment.

helm/templates/service.yaml

Kubernetes Service.

With this structure, you’ll have a modular, scalable solution for synchronizing JIRA issues with an Oracle database, hosted on Kubernetes. Let me know if you need further customization!