
from flask_cors import CORS

CORS(app, supports_credentials=True, origins=["*"], send_wildcard=True)


Here’s the .bat script and the Flask route for the interactive service.

.bat Script to Call Interactive Service and Open in Browser

This script fetches the logged-in system user, appends it as a parameter to the service URL, and opens the interactive service in the default browser.

@echo off
:: Set the service URL
set BASE_URL=http://localhost:6000/interactive

:: Get the system username
set USERNAME=%USERNAME%

:: Construct the interactive service URL with the username parameter
set SERVICE_URL=%BASE_URL%?username=%USERNAME%

:: Open the interactive service in the default browser
start %SERVICE_URL%

Flask Route for Interactive Service

The Flask route receives the username as a query parameter, processes it, and renders the interactive HTML page.

Flask Code

from flask import Flask, request, render_template

app = Flask(__name__)

@app.route('/interactive', methods=['GET'])
def interactive_service():
    # Get the username from the query parameters
    username = request.args.get('username', 'Guest')

    # Example data passed to the template
    jira_data = [
        {"jira_number": "JIRA-001", "job_number": "P01", "summary": "Test issue summary"},
        {"jira_number": "JIRA-002", "job_number": "Q01", "summary": "Another test issue"},
    ]

    # Render the interactive HTML page
    return render_template('interactive.html', username=username, jira_data=jira_data)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=6000)

HTML Template (templates/interactive.html)

This is the HTML file rendered by the Flask service. It includes placeholders for dynamic data and displays the username passed as a query parameter.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Jira Service</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
            text-align: left;
        }
    </style>
</head>
<body>
    <h1>Welcome, {{ username }}</h1>
    <h2>Jira Issues</h2>
    {% if jira_data %}
    <table>
        <thead>
            <tr>
                <th>Jira Number</th>
                <th>Job Number</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            {% for issue in jira_data %}
            <tr>
                <td>{{ issue.jira_number }}</td>
                <td>{{ issue.job_number }}</td>
                <td>{{ issue.summary }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% else %}
    <p>No Jira issues found.</p>
    {% endif %}
</body>
</html>

Steps to Test
	1.	Run the Flask App
Save the Python script as app.py and run it:

python app.py

The service will start at http://localhost:6000.

	2.	Run the .bat Script
Save the .bat script as launch_interactive.bat and double-click it. It will:
	•	Retrieve the system username.
	•	Construct the URL for the interactive service.
	•	Open the URL in the default web browser.
	3.	Test in Browser
	•	The interactive page will load in the browser.
	•	The page will display Jira issues and include the username in the greeting.

Key Points
	•	The .bat script dynamically passes the system username to the service URL.
	•	Flask dynamically renders the page with the username and Jira data.
	•	No local file is saved, avoiding file:// or CORS issues.

Let me know if you need further clarification!


.=####

@echo off
:: Define variables
set SERVICE_URL=http://localhost:6000/interactive
set USERNAME=your_username
set FILTER_ID=12345

:: Create a temporary HTML file to redirect to the interactive service
echo ^<!DOCTYPE html^> > temp_redirect.html
echo ^<html lang="en"^> >> temp_redirect.html
echo ^<head^> >> temp_redirect.html
echo     ^<meta charset="UTF-8"^> >> temp_redirect.html
echo     ^<meta name="viewport" content="width=device-width, initial-scale=1.0"^> >> temp_redirect.html
echo     ^<title>Redirecting...</title^> >> temp_redirect.html
echo     ^<script^> >> temp_redirect.html
echo         const serviceUrl = "%SERVICE_URL%"; >> temp_redirect.html
echo         const postData = { username: "%USERNAME%", filter_id: "%FILTER_ID%" }; >> temp_redirect.html
echo         fetch(serviceUrl, { >> temp_redirect.html
echo             method: 'POST', >> temp_redirect.html
echo             headers: { 'Content-Type': 'application/json' }, >> temp_redirect.html
echo             body: JSON.stringify(postData) >> temp_redirect.html
echo         }) >> temp_redirect.html
echo         .then(response => response.text()) >> temp_redirect.html
echo         .then(html => { >> temp_redirect.html
echo             document.write(html); >> temp_redirect.html
echo         }) >> temp_redirect.html
echo         .catch(err => console.error(err)); >> temp_redirect.html
echo     ^</script^> >> temp_redirect.html
echo ^</head^> >> temp_redirect.html
echo ^<body^> >> temp_redirect.html
echo     Redirecting to interactive service... >> temp_redirect.html
echo ^</body^> >> temp_redirect.html
echo ^</html^> >> temp_redirect.html

:: Open the redirect HTML in the browser
start temp_redirect.html
=#

To pass a username and filter ID in a POST request to the interactive service using a .bat script and open the result in a browser, follow these steps:

1. Create the Batch Script

Here’s an example of a .bat script:

@echo off
:: Define variables
set SERVICE_URL=http://localhost:6000/interactive
set USERNAME=your_username
set FILTER_ID=12345

:: Use curl to make a POST request and save the response to a temporary HTML file
curl -X POST -H "Content-Type: application/json" ^
     -d "{\"username\":\"%USERNAME%\", \"filter_id\":\"%FILTER_ID%\"}" ^
     %SERVICE_URL% ^
     -o temp_interactive.html

:: Open the HTML file in the default browser
start temp_interactive.html

2. Explanation of the Script
	1.	Set Variables:
	•	SERVICE_URL: The URL of your interactive service.
	•	USERNAME: Replace your_username with the username you want to pass.
	•	FILTER_ID: Replace 12345 with the desired filter ID.
	2.	Curl Command:
	•	Sends a POST request with a JSON body containing username and filter_id.
	•	Saves the response to temp_interactive.html.
	3.	Open in Browser:
	•	The start command opens the temporary HTML file in the default browser.

3. Example Python Code for Interactive Service

Ensure your Flask interactive service is ready to handle this POST request:

from flask import Flask, request, render_template

app = Flask(__name__)

@app.route('/interactive', methods=['POST'])
def interactive_service():
    data = request.json
    username = data.get("username")
    filter_id = data.get("filter_id")

    # Logic to handle the request and generate the HTML response
    return render_template("interactive.html", username=username, filter_id=filter_id)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=6000)

4. Sample interactive.html Template

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Page</title>
</head>
<body>
    <h1>Interactive Page</h1>
    <p>Welcome, {{ username }}!</p>
    <p>Filter ID: {{ filter_id }}</p>
    <button onclick="alert('This is a placeholder button!')">Click Me</button>
</body>
</html>

5. Run the Script

Save the batch file as launch_interactive.bat and double-click it. It will:
	1.	Send the POST request to the interactive service.
	2.	Save the HTML response.
	3.	Open the HTML file in the browser.

6. Notes
	•	Ensure the service URL is reachable (http://localhost:6000/interactive in this case).
	•	If testing locally, start the Flask service first.
	•	Replace placeholders in the script with actual values.

Let me know if you need additional help!

=#=
If you want the interactive service to directly open the browser with the resulting HTML instead of downloading and opening it manually via a BAT script, you can follow these steps:

1. Modify the Interactive Service

The interactive service should:
	•	Return an HTML page as a response to the POST request.
	•	Embed the username and relevant data dynamically into the HTML.

Updated Flask Route for /interactive

from flask import Flask, render_template, request, redirect, url_for

app = Flask(__name__)

@app.route('/interactive', methods=['POST'])
def interactive_service():
    # Get the username from the POST request
    data = request.json
    username = data.get('username', 'Unknown User')
    
    # Example JIRA data to include in the HTML response
    jira_data = [
        {'jira_number': 'JIRA-001', 'job_number': 'P01', 'summary': 'Issue 1 Summary'},
        {'jira_number': 'JIRA-002', 'job_number': 'Q01', 'summary': 'Issue 2 Summary'}
    ]

    # Render the interactive HTML page with the data
    return render_template('interactive.html', username=username, jira_data=jira_data)

2. Create the HTML Template

The HTML template (interactive.html) should:
	•	Display the username and JIRA data.
	•	Include buttons for actions like update comment or resolve status.
	•	Trigger Flask API endpoints when those buttons are clicked.

templates/interactive.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive JIRA Service</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>Interactive JIRA Service</h1>
    <p>Welcome, <strong>{{ username }}</strong></p>

    <table>
        <thead>
            <tr>
                <th>JIRA Number</th>
                <th>Job Number</th>
                <th>Summary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for jira in jira_data %}
            <tr>
                <td><a href="https://jira.example.com/browse/{{ jira.jira_number }}" target="_blank">{{ jira.jira_number }}</a></td>
                <td>{{ jira.job_number }}</td>
                <td>{{ jira.summary }}</td>
                <td>
                    <button onclick="updateComment('{{ jira.jira_number }}')">Update Comment</button>
                    <button onclick="resolveStatus('{{ jira.jira_number }}')">Resolve</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script>
        const baseUrl = "{{ url_for('interactive_service', _external=True) }}";

        function updateComment(jiraNumber) {
            const comment = prompt("Enter your comment:");
            if (!comment) return;

            fetch(`${baseUrl}/update_comment`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ jira_number: jiraNumber, comment })
            })
            .then(response => response.json())
            .then(data => alert(`Comment updated: ${data.status}`))
            .catch(err => console.error(err));
        }

        function resolveStatus(jiraNumber) {
            if (!confirm("Are you sure you want to resolve this issue?")) return;

            fetch(`${baseUrl}/resolve_status`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ jira_number: jiraNumber })
            })
            .then(response => response.json())
            .then(data => alert(`Issue resolved: ${data.status}`))
            .catch(err => console.error(err));
        }
    </script>
</body>
</html>

3. Open Interactive Service in a Browser

Instead of returning a file to download, the interactive service will now directly open the HTML page in the user’s browser. You can use the BAT script to launch the browser with the interactive service URL.

Example BAT Script

@echo off
REM Get the current username
set "USERNAME=%USERNAME%"

REM Define the interactive service URL
set "INTERACTIVE_SERVICE_URL=http://localhost:6000/interactive"

REM Open the interactive service in the browser
start "" "%INTERACTIVE_SERVICE_URL%" -H "Content-Type: application/json" -d "{\"username\":\"%USERNAME%\"}"

4. Testing Steps
	1.	Run the Flask App
Start the Flask app locally or deploy it on your Kubernetes environment.
	2.	Execute the BAT Script
Run the interactive_service.bat script on the user’s machine. This will:
	•	Capture the username.
	•	Trigger the interactive service URL with the username.
	•	Open the resulting interactive page in the user’s default browser.
	3.	Use the Interactive Page
The user can:
	•	View their JIRA data.
	•	Perform actions like update comment or resolve status, which call the respective services.

This approach ensures seamless integration between the BAT script, the Flask service, and the interactive HTML page in the browser.