üìå Updated Email Service with Author, Date-Time & Proposed Comment

This version appends the Author and Date-Time to the Proposed Comment in the HTML email report.

1Ô∏è‚É£ email_template.html (Updated HTML Report)

<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            color: #333;
        }
        h2 {
            background-color: #0073e6;
            color: white;
            padding: 10px;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #0073e6;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .comment-box {
            background-color: #eef;
            padding: 10px;
            border-radius: 5px;
        }
        .author {
            font-weight: bold;
            color: #0073e6;
        }
        .datetime {
            font-size: 12px;
            color: #555;
        }
    </style>
</head>
<body>
    <h2>JIRA Sync Report</h2>

    <h3>üîπ Inserted Issues</h3>
    <table>
        <tr>
            <th>JIRA Number</th>
            <th>Job Name</th>
            <th>Proposed Comment</th>
        </tr>
        {% for issue in inserted %}
        <tr>
            <td>{{ issue.jira_number }}</td>
            <td>{{ issue.job_name }}</td>
            <td>
                <div class="comment-box">
                    <span class="author">By: {{ issue.proposed_comment.author }}</span><br>
                    <span class="datetime">On: {{ issue.proposed_comment.date_time }}</span><br>
                    {{ issue.proposed_comment.content }}
                </div>
            </td>
        </tr>
        {% endfor %}
    </table>

    <h3>üîπ Updated Issues</h3>
    <table>
        <tr>
            <th>JIRA Number</th>
            <th>Job Name</th>
            <th>New Comment</th>
        </tr>
        {% for issue in updated %}
        <tr>
            <td>{{ issue.jira_number }}</td>
            <td>{{ issue.job_name }}</td>
            <td>
                <div class="comment-box">
                    <span class="author">By: {{ issue.proposed_comment.author }}</span><br>
                    <span class="datetime">On: {{ issue.proposed_comment.date_time }}</span><br>
                    {{ issue.proposed_comment.content }}
                </div>
            </td>
        </tr>
        {% endfor %}
    </table>

    <h3>üîπ Resolved Issues</h3>
    <table>
        <tr>
            <th>JIRA Number</th>
            <th>Job Name</th>
            <th>Status</th>
        </tr>
        {% for issue in resolved %}
        <tr>
            <td>{{ issue.jira_number }}</td>
            <td>{{ issue.job_name }}</td>
            <td>{{ issue.status }}</td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>

2Ô∏è‚É£ email_service.py (Updated Email Sending Service)

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from jinja2 import Template

SMTP_SERVER = "smtp.yourserver.com"
SMTP_PORT = 587
SMTP_USERNAME = "your-email@example.com"
SMTP_PASSWORD = "your-password"
TO_EMAIL = ["recipient@example.com"]

def send_email_report(inserted, updated, resolved):
    """Send an HTML email with JIRA sync report."""
    with open("email_template.html") as f:
        template = Template(f.read())

    html_content = template.render(
        inserted=inserted,
        updated=updated,
        resolved=resolved
    )

    msg = MIMEMultipart()
    msg["From"] = SMTP_USERNAME
    msg["To"] = ", ".join(TO_EMAIL)
    msg["Subject"] = "JIRA Sync Report"

    msg.attach(MIMEText(html_content, "html"))

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.sendmail(SMTP_USERNAME, TO_EMAIL, msg.as_string())

    print("‚úÖ Email report sent successfully!")

3Ô∏è‚É£ routes.py (Trigger Email After Sync)

from flask import Flask, jsonify
from db_ops import get_all_issues, insert_issue, update_issue, delete_comments_by_incpb_id, insert_comment
from jira_ops import get_jira_issues, get_jira_issue_status
from email_service import send_email_report

app = Flask(__name__)

@app.route("/sync", methods=["POST"])
def sync_issues():
    jira_filter = "project=ABC"
    jira_issues = get_jira_issues(jira_filter)
    db_issues = get_all_issues()

    inserted = []
    updated = []
    resolved = []

    for jira_number, data in jira_issues.items():
        if data["comments"]:
            last_comment = data["comments"][-1]  # Get the most recent comment
            proposed_comment = {
                "author": last_comment["author"],
                "date_time": last_comment["date_time"],
                "content": last_comment["content"]
            }
        else:
            proposed_comment = {
                "author": "Unknown",
                "date_time": "N/A",
                "content": "No comments"
            }

        if jira_number in db_issues:
            incpb_id = db_issues[jira_number]["incpb_id"]
            update_issue(incpb_id, data["status"], data["recent_comment"])
            delete_comments_by_incpb_id(incpb_id)
            for comment in data["comments"]:
                insert_comment(incpb_id, comment["author"], comment["content"], comment["date_time"])
            updated.append({
                "jira_number": jira_number,
                "job_name": data["job_name"],
                "proposed_comment": proposed_comment
            })
        else:
            incpb_id = insert_issue(
                data["jira_number"], data["creation_date"], data["criticity"], data["job_name"],
                data["job_result"], data["summary"], data["status"], data["description"],
                data["first_comment"], data["recent_comment"]
            )
            for comment in data["comments"]:
                insert_comment(incpb_id, comment["author"], comment["content"], comment["date_time"])
            inserted.append({
                "jira_number": jira_number,
                "job_name": data["job_name"],
                "proposed_comment": proposed_comment
            })

    for jira_number, db_data in db_issues.items():
        if jira_number not in jira_issues:
            actual_status = get_jira_issue_status(jira_number)
            update_issue(db_data["incpb_id"], actual_status, db_data["status"])
            resolved.append({
                "jira_number": jira_number,
                "job_name": db_data["job_name"],
                "status": actual_status
            })

    # Send email with sync results
    send_email_report(inserted, updated, resolved)

    return jsonify({"inserted": inserted, "updated": updated, "resolved": resolved})

if __name__ == "__main__":
    app.run(debug=True)

üìå Summary of Changes

‚úÖ Proposed Comment now includes:
	‚Ä¢	Author
	‚Ä¢	Date-Time
	‚Ä¢	Comment Content

‚úÖ Inserted and Updated Issues display latest comment details
‚úÖ Improved email formatting for clarity
‚úÖ Ensures comments are properly linked to issues
‚úÖ Uses Jinja2 templating for dynamic content

Now, after every JIRA Sync, you‚Äôll receive a well-formatted email summarizing Inserted, Updated, and Resolved issues, with author and timestamp for proposed comments! üöÄ