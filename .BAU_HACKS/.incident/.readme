Here is a detailed README file for your project:

Interactive JIRA Sync Service

This project provides an interactive service to synchronize JIRA issues with a database (Prod or Quality environment) based on job numbers (P01 for Prod and Q01 for Quality) in the summary. The service also allows users to update comments or mark issues as resolved interactively. It is built with Flask, uses Kubernetes for deployment, and supports interactive HTML-based workflows.

Features
	1.	Sync JIRA Issues:
	•	Fetch issues from the JIRA API filter.
	•	Insert, update, or delete issues in the database based on API results.
	•	Classify issues into Prod (P01) or Quality (Q01) based on the job number in the summary.
	2.	Interactive Comment and Resolve:
	•	Allows users to update JIRA comments interactively via an HTML interface.
	•	Provides a mechanism to mark issues as resolved after prompting for mandatory fields.
	3.	HTML Reports:
	•	Generates styled HTML reports for synchronized issues (inserted, updated, deleted).
	•	Allows fetching JIRA details (number, job number, summary, criticity, etc.) in an elegant table format.
	4.	Kubernetes Deployment:
	•	Deployed as a microservice using Flask and Gunicorn.
	•	Configured with Kubernetes YAML files for easy scalability and management.

Installation

Prerequisites
	•	Python 3.8 or higher
	•	Docker
	•	Kubernetes (Minikube or any other cluster)
	•	JIRA API token
	•	Oracle Database credentials
	•	ojdbc8.jar for JDBC connections (required for jaydebeapi)

Local Development
	1.	Clone the Repository:

git clone <repository-url>
cd interactive-jira-sync


	2.	Install Dependencies:
Create a virtual environment and install dependencies:

python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt


	3.	Set Environment Variables:
Create a .env file in the root directory and configure the following:

FLASK_ENV=development
JIRA_API_URL=https://your-jira-instance.atlassian.net
ORACLE_DB_PROD_URL=jdbc:oracle:thin:@prod-db-url
ORACLE_DB_QUAL_URL=jdbc:oracle:thin:@qual-db-url
DB_USERNAME=your_db_username
DB_PASSWORD=your_db_password
JIRA_API_FILTER=your_filter_query


	4.	Run the Application:

flask run


	5.	Access the Application:
Open http://localhost:5000 in your browser.

Kubernetes Deployment
	1.	Build Docker Image:

docker build -t your-docker-image:latest .


	2.	Push to Container Registry:

docker tag your-docker-image:latest <your-registry>/<your-docker-image>:latest
docker push <your-registry>/<your-docker-image>:latest


	3.	Apply Kubernetes Manifests:
Update the deployment.yaml with your Docker image and apply the configuration:

kubectl apply -f k8s/deployment.yaml
kubectl apply -f k8s/service.yaml


	4.	Access the Application:
If using Minikube, expose the service:

minikube service interactive-service

API Endpoints

1. /sync (POST)

Description: Sync issues from the JIRA API filter with the database.

Request Payload:

{
    "jira_api_token": "your-api-token"
}

Response:
	•	HTML report of issues inserted, updated, and deleted.

2. /update_comment (POST)

Description: Interactively update comments on JIRA issues.

Request Payload:

{
    "jira_number": "JIRA-1234",
    "api_token": "your-api-token",
    "comment": "Your new comment"
}

Response:
	•	Success or failure message.

3. /resolve_issue (POST)

Description: Interactively mark JIRA issues as resolved.

Request Payload:

{
    "jira_number": "JIRA-1234",
    "api_token": "your-api-token"
}

Response:
	•	Success or failure message.

Directory Structure

interactive-jira-sync/
├── app/
│   ├── __init__.py         # Flask app initialization
│   ├── routes.py           # API routes and endpoints
│   ├── db_operations.py    # Database sync logic (insert, update, delete)
│   ├── templates/          # HTML templates for reports
│   │   ├── sync_report.html
│   │   ├── interactive.html
│   └── static/
│       └── style.css       # CSS for HTML templates
├── k8s/
│   ├── deployment.yaml     # Kubernetes deployment
│   ├── service.yaml        # Kubernetes service
├── Dockerfile              # Docker build configuration
├── requirements.txt        # Python dependencies
├── settings.py             # Environment variables loader
├── README.md               # Project documentation
└── .env                    # Local environment variables

Example HTML Reports

Sync Report

A table with the following sections:
	1.	Inserted Issues
	2.	Updated Issues
	3.	Deleted Issues

Interactive Update/Resolve
	•	Dynamically lists issues and provides buttons for user actions.

Troubleshooting
	1.	JIRA API Issues:
	•	Ensure the API token and URL are valid.
	•	Check if the JIRA instance has the correct permissions for the API token.
	2.	Database Connection:
	•	Ensure ojdbc8.jar is available for JDBC connections.
	•	Verify the database credentials and URL.
	3.	Kubernetes Deployment:
	•	Verify that the service is running using kubectl get pods.
	•	Use kubectl logs for debugging errors.

License

This project is licensed under the MIT License.

This README should provide all necessary instructions for understanding, running, and deploying the project.