Here is the updated implementation for the update_comment service to fetch a detailed list from the database and allow interactive updates for update_comment and marking the JIRA as resolved. It will also handle predefined mandatory fields for marking resolved.

HTML Template (interactive_update.html)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Update JIRA</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f7f7f7;
            color: #333;
        }
        header {
            background-color: #003366;
            color: white;
            padding: 20px;
            text-align: center;
        }
        h1 {
            margin: 0;
        }
        table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            text-align: center;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
        }
        th {
            background-color: #003366;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .action-btn {
            padding: 6px 12px;
            margin: 4px;
            border: none;
            color: white;
            background-color: #007bff;
            cursor: pointer;
        }
        .action-btn:hover {
            background-color: #0056b3;
        }
        #modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }
        #modal-content {
            background-color: white;
            width: 400px;
            margin: 15% auto;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }
        #modal-content input, #modal-content select {
            width: 80%;
            padding: 10px;
            margin-bottom: 20px;
        }
        #modal-content button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }
        #modal-content button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <header>
        <h1>Interactive Update JIRA</h1>
    </header>
    <table>
        <thead>
            <tr>
                <th>JIRA Number</th>
                <th>Job Number</th>
                <th>Summary</th>
                <th>Criticity</th>
                <th>Description</th>
                <th>Comments</th>
                <th>Recent Comment</th>
                <th>Update Comment</th>
                <th>Resolve</th>
            </tr>
        </thead>
        <tbody>
            {% for issue in issues %}
            <tr>
                <td>
                    <a href="https://jira.example.com/browse/{{ issue['jira_number'] }}" target="_blank">
                        {{ issue['jira_number'] }}
                    </a>
                </td>
                <td>{{ issue['job_number'] }}</td>
                <td>{{ issue['summary'] }}</td>
                <td>{{ issue['criticity'] }}</td>
                <td>{{ issue['description'] }}</td>
                <td>{{ issue['comments'] }}</td>
                <td>{{ issue['recent_comment'] }}</td>
                <td>
                    <button class="action-btn" onclick="openModal('{{ issue['jira_number'] }}', 'update')">Update</button>
                </td>
                <td>
                    <button class="action-btn" onclick="openModal('{{ issue['jira_number'] }}', 'resolve')">Resolve</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <div id="modal">
        <div id="modal-content">
            <h2 id="modal-title"></h2>
            <input type="text" id="api-token" placeholder="Enter your API token">
            <textarea id="comment" placeholder="Enter your comment (if applicable)"></textarea>
            <button onclick="submitAction()">Submit</button>
            <button onclick="closeModal()">Cancel</button>
        </div>
    </div>

    <script>
        let currentJiraNumber = null;
        let currentAction = null;

        function openModal(jiraNumber, action) {
            currentJiraNumber = jiraNumber;
            currentAction = action;

            const title = action === 'update' ? 'Update Comment' : 'Mark as Resolved';
            document.getElementById("modal-title").innerText = title;
            document.getElementById("modal").style.display = "block";
        }

        function closeModal() {
            currentJiraNumber = null;
            currentAction = null;
            document.getElementById("modal").style.display = "none";
        }

        function submitAction() {
            const apiToken = document.getElementById("api-token").value;
            const comment = document.getElementById("comment").value;

            if (!apiToken) {
                alert("API token is required.");
                return;
            }

            fetch('/update_comment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    jira_number: currentJiraNumber,
                    action: currentAction,
                    api_token: apiToken,
                    comment: comment
                }),
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                location.reload();
            })
            .catch(err => console.error(err));
        }
    </script>
</body>
</html>

Routes Update (routes.py)

@app.route('/interactive_update', methods=['GET'])
def interactive_update():
    issues = fetch_issues_from_db()
    return render_template('interactive_update.html', issues=issues)

@app.route('/update_comment', methods=['POST'])
def update_comment():
    data = request.json
    jira_number = data.get("jira_number")
    action = data.get("action")
    api_token = data.get("api_token")
    comment = data.get("comment")

    if action == "update":
        success = update_jira_comment(jira_number, api_token, comment)
    elif action == "resolve":
        success = resolve_jira_issue(jira_number, api_token, comment)

    if success:
        return jsonify({"message": f"Action '{action}' successfully completed for JIRA: {jira_number}"})
    else:
        return jsonify({"message": f"Failed to complete action '{action}' for JIRA: {jira_number}"}), 500

Helper Functions (db_operations.py)

def fetch_issues_from_db():
    query = "SELECT jira_number, job_number, summary, criticity, description, comments, recent_comment, update_comment FROM jira_issues"
    return execute_query(query)

def update_jira_comment(jira_number, api_token, comment):
    url = f"https://jira.example.com/rest/api/2/issue/{jira_number}/comment"
    headers = {"Authorization": f"Bearer {api_token}", "Content-Type": "application/json"}
    payload = {"body": comment}

    response = requests.post(url, headers=headers, json=payload)
    return response.status_code == 201

def resolve_jira_issue(jira_number, api_token, comment):
    url = f"https://jira.example.com/rest/api/2/issue/{jira_number}/transitions"
    headers = {"Authorization": f"Bearer {api_token}", "Content-Type": "application/json"}
    payload = {
        "transition": {"id": "5"},  # Replace '5' with your transition ID for 'Resolved'
        "fields": {"resolution": {"name": "Done"}, "comment": {"add": {"body": comment}}},
    }

    response = requests.post(url, headers=headers, json=payload)
    return response.status_code == 204

This setup fetches issues from the database and allows users to either update comments or resolve the issues interactively using an API token.