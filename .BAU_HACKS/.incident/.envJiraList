To handle this requirement, we’ll create a service that returns either a JSON response or an HTML page depending on the response_type parameter passed in the request. The service will allow users to fetch JIRA details for a specific environment (Prod or Quality) and format the response accordingly.

API Endpoint: /get_env_jira_details

Functionality:
	•	Accepts a filter_id, environment (prod or quality), and response_type (json or html) as input.
	•	Fetches JIRA details from the specified filter.
	•	Filters the issues based on the environment (P for Prod, Q for Quality).
	•	Returns either a JSON response or an HTML page based on the response_type.

Updated Function: get_env_jira_details

from flask import jsonify, request, render_template
from .jira_api import JiraAPI
from .sync_service import extract_job_number

def get_env_jira_details():
    """
    Fetch JIRA details for a specific environment (Prod or Quality) and return as JSON or HTML.
    """
    try:
        # Get input parameters
        data = request.get_json()
        filter_id = data.get("filter_id")
        environment = data.get("environment").lower()
        response_type = data.get("response_type", "json").lower()

        if not filter_id or not environment:
            return jsonify({"error": "filter_id and environment are required"}), 400

        # Validate environment
        if environment not in ["prod", "quality"]:
            return jsonify({"error": "Invalid environment. Use 'prod' or 'quality'."}), 400

        # Fetch issues from JIRA
        jira_api = JiraAPI()
        jira_issues = jira_api.get_issues(filter_id)

        # Filter issues based on environment
        filtered_issues = []
        for jira_issue in jira_issues:
            # Extract job number from summary
            job_number = extract_job_number(jira_issue["fields"]["summary"])
            if job_number:
                issue_details = {
                    "jira_number": jira_issue["key"],
                    "summary": jira_issue["fields"]["summary"],
                    "criticity": jira_issue["fields"]["priority"]["name"],
                    "creation_date": jira_issue["fields"]["created"],
                    "job_number": job_number,
                }

                # Filter based on environment
                if environment == "prod" and job_number.startswith("P"):
                    filtered_issues.append(issue_details)
                elif environment == "quality" and job_number.startswith("Q"):
                    filtered_issues.append(issue_details)

        # Return response based on response_type
        if response_type == "json":
            return jsonify({"status": "success", "issues": filtered_issues}), 200
        elif response_type == "html":
            html_content = render_template(
                "env_issues.html",
                environment=environment.capitalize(),
                issues=filtered_issues
            )
            return html_content, 200
        else:
            return jsonify({"error": "Invalid response_type. Use 'json' or 'html'."}), 400

    except Exception as e:
        return jsonify({"error": str(e)}), 500

HTML Template: env_issues.html

Save the following HTML file in the templates directory (used by Flask’s render_template function):

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ environment }} JIRA Issues</title>
</head>
<body>
    <h1>{{ environment }} JIRA Issues</h1>
    {% if issues %}
        <table border="1">
            <thead>
                <tr>
                    <th>JIRA Number</th>
                    <th>Summary</th>
                    <th>Criticity</th>
                    <th>Creation Date</th>
                    <th>Job Number</th>
                </tr>
            </thead>
            <tbody>
                {% for issue in issues %}
                    <tr>
                        <td><a href="https://your-jira-instance.com/browse/{{ issue.jira_number }}">{{ issue.jira_number }}</a></td>
                        <td>{{ issue.summary }}</td>
                        <td>{{ issue.criticity }}</td>
                        <td>{{ issue.creation_date }}</td>
                        <td>{{ issue.job_number }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>No issues found for the {{ environment }} environment.</p>
    {% endif %}
</body>
</html>

Key Updates:
	1.	Input Validation:
	•	filter_id: Required to fetch issues from JIRA.
	•	environment: Specifies whether to fetch issues for Prod or Quality. Returns an error if invalid.
	•	response_type: Determines the format of the response (json or html).
	2.	Environment Filtering:
	•	Filters issues based on the job_number (P for Prod, Q for Quality).
	3.	Dynamic Response:
	•	If response_type is json, returns a JSON response.
	•	If response_type is html, renders an HTML page using a template.

Example API Usage

Request JSON:

{
  "filter_id": "12345",
  "environment": "prod",
  "response_type": "html"
}

JSON Response Example:

{
  "status": "success",
  "issues": [
    {
      "jira_number": "JIRA-123",
      "summary": "Production Issue Summary",
      "criticity": "High",
      "creation_date": "2025-01-01T12:00:00.000Z",
      "job_number": "P01"
    }
  ]
}

HTML Response Example:
	•	A rendered table with issues for the selected environment.

Adding the Route to Flask

Add the route in your app.py:

from flask import Flask
from your_module_name.new_service import get_env_jira_details

app = Flask(__name__)

# Other routes
app.route('/get_env_jira_details', methods=['POST'])(get_env_jira_details)

if __name__ == '__main__':
    app.run()

This implementation dynamically supports both JSON and HTML responses, making it flexible for integration with front-end tools or automation scripts. Let me know if further enhancements are needed!