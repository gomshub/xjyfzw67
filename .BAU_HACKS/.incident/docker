
üìå Solution: Use Internal Artifactory JDK Docker Image in Your Dockerfile

Since your company hosts a JDK Docker image in the internal Artifactory, the best approach is to use that image as a base instead of manually installing JDK.

üñ•Ô∏è Updated Dockerfile (Python + JDK from Internal Artifactory)

# Use the internal JDK image from Artifactory as the base image
FROM artifactory.company.com/docker-repo/adoptopenjdk11:latest AS jdk_base

# Use Python 3.11.7-slim as the second base image
FROM python:3.11.7-slim

# Copy JDK from the first image
COPY --from=jdk_base /opt/jdk /opt/jdk

# Set environment variables for Java
ENV JAVA_HOME=/opt/jdk
ENV PATH="$JAVA_HOME/bin:$PATH"

# Configure pip to use the internal Artifactory
COPY pip.conf /etc/pip.conf

# Install Python dependencies
COPY requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r /app/requirements.txt

# Copy application files
COPY . /app
WORKDIR /app

# Run the application with Gunicorn
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "routes:app"]

üöÄ How This Works
	1.	Uses the internal JDK Docker image from Artifactory (artifactory.company.com/docker-repo/adoptopenjdk11:latest).
	2.	Copies the JDK binaries from the first image into the final image (/opt/jdk).
	3.	Sets JAVA_HOME and updates PATH, ensuring Java is available.
	4.	Uses an internal pip.conf to install Python dependencies from Artifactory.
	5.	Copies application files and runs Gunicorn, launching the Flask service.

‚úÖ Advantages of This Approach
	‚Ä¢	No need for apt-get or manual JDK installation.
	‚Ä¢	Faster builds, as the JDK is already included in a Docker image.
	‚Ä¢	Secure and consistent, using an internally approved JDK version.
	‚Ä¢	Compatible with JayDeBeApi, since Java is correctly configured.

Would you like a Bamboo script to automate the Docker build and push process? üöÄ




# Use Python 3.11.7-slim as the base image
FROM python:3.11.7-slim

# Define variables for Artifactory and JDK installation path
ARG ARTIFACTORY_URL="https://artifactory.company.com/artifactory/generic-local/adoptopenjdk-11"
ARG JDK_DIR="/opt/jdk"

# Set environment variables for Java
ENV JAVA_HOME=$JDK_DIR
ENV PATH="$JAVA_HOME/bin:$PATH"

# Download AdoptOpenJDK 11 binaries and move them to JDK directory
RUN mkdir -p $JDK_DIR && \
    curl -sSL -o /tmp/jdk.zip $ARTIFACTORY_URL && \
    unzip /tmp/jdk.zip -d /tmp/ && \
    mv /tmp/adoptopenjdk-11/* $JDK_DIR/ && \
    rm -f /tmp/jdk.zip

# Verify Java installation
RUN java -version



# Use a lightweight Python base image
FROM python:3.11.7-slim

# Set environment variables
ENV ARTIFACTORY_URL="https://artifactory.company.com/artifactory"
ENV JDK_PACKAGE="jdk-17.tar.gz"
ENV JAVA_HOME="/usr/local/jdk-17"
ENV PATH="$JAVA_HOME/bin:$PATH"

# Download and install JDK manually from Artifactory (without apt-get)
RUN curl -u <USERNAME>:<PASSWORD> -o /tmp/$JDK_PACKAGE "$ARTIFACTORY_URL/$JDK_PACKAGE" && \
    mkdir -p $JAVA_HOME && \
    tar -xzf /tmp/$JDK_PACKAGE -C /usr/local && \
    rm /tmp/$JDK_PACKAGE

# Verify JDK installation
RUN ["java", "-version"]

# Create working directory
WORKDIR /app

# Copy Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . /app

# Copy ojdbc6.jar to the required location
COPY /app/utils/lib/ojdbc6.jar /app/utils/lib/ojdbc6.jar

# Set environment variables for JDBC driver
ENV CLASSPATH="/app/utils/lib/ojdbc6.jar"

# Set entry point for Gunicorn server
ENTRYPOINT ["gunicorn", "-w", "4", "-b", "0.0.0.0:8000", "routes:app"]


=#=
# Use the slim version of Python 3.11.7
FROM python:3.11.7-slim

# Set the working directory in the container
WORKDIR /app

# Install Java Runtime (for ojdbc support)
RUN apt-get update && apt-get install -y openjdk-11-jre-headless

# Install necessary Python dependencies (JayDeBeApi)
RUN pip install --no-cache-dir JayDeBeApi

# Copy your application code into the container
COPY ./app /app

# Copy the Oracle JDBC (ojdbc) jar file into the container
COPY ./utils/lib/ojdbc8.jar /app/utils/lib/ojdbc8.jar

# Install any additional Python dependencies (if you have a requirements.txt)
RUN pip install --no-cache-dir -r requirements.txt

# Expose the port your application will run on
EXPOSE 8080

# Command to run your application (e.g., Flask app)
CMD ["python", "app.py"]


Here‚Äôs an automated Bamboo script to handle:
	‚Ä¢	Logging into the internal Docker registry using a user token
	‚Ä¢	Building & pushing the Docker image
	‚Ä¢	Pushing the Helm chart to the internal Helm repository
	‚Ä¢	Updating ArgoCD application values.yaml using a JWT token

üöÄ Bamboo CI/CD Script

#!/bin/bash
set -e  # Exit immediately on error

# üîê Login to Docker registry using user token
echo "Logging into internal Docker registry..."
echo "$DOCKER_USER_TOKEN" | docker login internal-registry.company.com -u "$DOCKER_USERNAME" --password-stdin

# üèóÔ∏è Build the Docker image
echo "Building Docker image..."
docker build -t internal-registry.company.com/jira-app:latest .

# üì§ Push the Docker image
echo "Pushing Docker image..."
docker push internal-registry.company.com/jira-app:latest

# üì¶ Package Helm Chart
echo "Packaging Helm Chart..."
helm package helm-chart

# üîê Login to Helm repository using user token
echo "Logging into internal Helm registry..."
helm repo add internal-artifactory https://helm-repo.company.com --username "$HELM_USERNAME" --password "$HELM_PASSWORD"

# üì§ Push Helm Chart
echo "Pushing Helm Chart..."
helm push helm-chart-0.1.0.tgz internal-artifactory

# üîÑ Update values.yaml in ArgoCD repo
ARGO_APP_NAME="jira-app"
ARGO_GIT_REPO="git@github.com:company/argo-cd-config.git"
VALUES_FILE_PATH="helm-chart/values.yaml"

echo "Updating values.yaml in ArgoCD repo..."
git clone "$ARGO_GIT_REPO"
cd argo-cd-config

# Update image tag in values.yaml
sed -i "s|tag:.*|tag: latest|" "$VALUES_FILE_PATH"

# Commit and push changes
git config user.email "bamboo@company.com"
git config user.name "Bamboo CI"
git add "$VALUES_FILE_PATH"
git commit -m "Updated Jira app image to latest"
git push origin main

# üîÑ Trigger ArgoCD Sync using JWT Token
echo "Triggering ArgoCD sync..."
ARGOCD_SERVER="https://argocd.company.com"
ARGOCD_APP_NAME="jira-app"

curl -X POST "$ARGOCD_SERVER/api/v1/applications/$ARGOCD_APP_NAME/sync" \
    -H "Authorization: Bearer $ARGOCD_JWT_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{"prune": false, "dryRun": false, "strategy": {"hook": {"force": true}}}'

echo "Deployment triggered successfully!"

üìå Environment Variables Required in Bamboo

Variable Name	Description
DOCKER_USERNAME	Username for Docker registry
DOCKER_USER_TOKEN	Token for Docker authentication
HELM_USERNAME	Username for Helm repository
HELM_PASSWORD	Password for Helm repository
ARGOCD_JWT_TOKEN	JWT Token for ArgoCD authentication
ARGOCD_SERVER	URL of the ArgoCD server

üîÑ What This Script Does?
	1.	Logs into the internal Docker registry using $DOCKER_USER_TOKEN
	2.	Builds & pushes the Docker image
	3.	Logs into the Helm repository & Pushes the Helm Chart
	4.	Updates values.yaml in the ArgoCD Git repo to use the new image
	5.	Commits & pushes changes using Bamboo‚Äôs Git credentials
	6.	Triggers ArgoCD sync using a JWT token

‚úÖ Fully Automated CI/CD Pipeline
	‚Ä¢	No manual intervention required
	‚Ä¢	Secure handling of tokens & credentials
	‚Ä¢	Ensures smooth deployments via ArgoCD

Let me know if you need any refinements! üöÄ
=#=
Here‚Äôs how to achieve your goal:

1. Dockerfile with JODBC Jar and Environment Variables

# Use an official Python base image
FROM python:3.9

# Set environment variables
ENV JIRA_TOKEN_FILE="/secrets/jira_token"
ENV CTLQ_DB_CRED_FILE="/secrets/ctlq_db"
ENV PROD_DB_CRED_FILE="/secrets/prod_db"

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application files
COPY . .

# Add JODBC Jar file
COPY jodbc.jar /usr/local/lib/jodbc.jar

# Expose port for Flask app
EXPOSE 6000

# Start the application
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:6000", "app:app"]

2. Helm Chart Structure

helm-chart/
‚îÇ‚îÄ‚îÄ templates/
‚îÇ   ‚îú‚îÄ‚îÄ deployment.yaml
‚îÇ   ‚îú‚îÄ‚îÄ service.yaml
‚îÇ   ‚îú‚îÄ‚îÄ secret.yaml
‚îÇ‚îÄ‚îÄ values.yaml
‚îÇ‚îÄ‚îÄ Chart.yaml

2.1 values.yaml

image:
  repository: internal-registry.company.com/jira-app
  tag: latest

env:
  JIRA_TOKEN_FILE: "/secrets/jira_token"
  CTLQ_DB_CRED_FILE: "/secrets/ctlq_db"
  PROD_DB_CRED_FILE: "/secrets/prod_db"

secrets:
  jiraToken: "base64-encoded-jira-token"
  ctlqDbCred: "base64-encoded-ctlq-db-credentials"
  prodDbCred: "base64-encoded-prod-db-credentials"

2.2 templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jira-app
  template:
    metadata:
      labels:
        app: jira-app
    spec:
      containers:
      - name: jira-app
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        env:
        - name: JIRA_TOKEN_FILE
          value: "{{ .Values.env.JIRA_TOKEN_FILE }}"
        - name: CTLQ_DB_CRED_FILE
          value: "{{ .Values.env.CTLQ_DB_CRED_FILE }}"
        - name: PROD_DB_CRED_FILE
          value: "{{ .Values.env.PROD_DB_CRED_FILE }}"
        volumeMounts:
        - name: secrets
          mountPath: "/secrets"
          readOnly: true
      volumes:
      - name: secrets
        secret:
          secretName: jira-app-secrets

2.3 templates/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: jira-app-secrets
type: Opaque
data:
  jira_token: {{ .Values.secrets.jiraToken }}
  ctlq_db: {{ .Values.secrets.ctlqDbCred }}
  prod_db: {{ .Values.secrets.prodDbCred }}

3. Building and Pushing Docker Image

docker build -t internal-registry.company.com/jira-app:latest .
docker push internal-registry.company.com/jira-app:latest

4. Deploying Helm Chart on ArgoCD

helm package helm-chart
helm push helm-chart-0.1.0.tgz internal-artifactory

# Apply changes in ArgoCD
argocd app create jira-app --repo internal-artifactory --path helm-chart --dest-namespace default --dest-server https://kubernetes.default.svc
argocd app sync jira-app

5. Bamboo Automation Script

#!/bin/bash
set -e

# Step 1: Build Docker Image
echo "Building Docker Image..."
docker build -t internal-registry.company.com/jira-app:latest .

# Step 2: Push Docker Image
echo "Pushing Docker Image..."
docker push internal-registry.company.com/jira-app:latest

# Step 3: Package and Push Helm Chart
echo "Packaging Helm Chart..."
helm package helm-chart
echo "Pushing Helm Chart..."
helm push helm-chart-0.1.0.tgz internal-artifactory

# Step 4: Deploy using ArgoCD
echo "Deploying via ArgoCD..."
argocd app sync jira-app

Summary
	1.	Dockerfile: Creates a containerized app with JODBC and environment variables.
	2.	Helm Chart: Manages Kubernetes deployment and secrets.
	3.	Build & Push Docker Image: Automates the process of building and pushing the image.
	4.	Deploy via ArgoCD: Ensures smooth continuous deployment.
	5.	Bamboo Script: Automates the entire CI/CD pipeline.

Let me know if you need refinements!