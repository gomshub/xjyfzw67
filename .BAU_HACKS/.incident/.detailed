Here is the complete project structure and code in a single response for easy reference.

Project Structure

project_root/
├── app/
│   ├── routes.py
│   ├── wsgi.py
│   ├── Utils/
│   │   ├── jira_operations.py
│   │   ├── db_operations.py
│   │   ├── models.py
│   │   ├── template_renderer.py
│   ├── Config/
│   │   ├── settings.py
│   │   ├── gunicorn.py
│   ├── templates/
│   │   ├── sync_results.html
│   │   ├── comment_update.html
│   │   ├── jira_details.html
│   │   ├── jira_list.html
├── .env
├── requirements.txt
├── Kube/
│   ├── jira-secrets.yaml
│   ├── jira-configmap.yaml
│   ├── deployment.yaml
│   ├── service.yaml
├── Helm/
│   ├── Chart.yaml
│   ├── values.yaml
├── Readme.md

Code Files

1. routes.py

Handles Flask routes for the 5 services.

from flask import Flask, request
from app.Utils.jira_operations import (
    get_individual_jira_details,
    get_jira_list_from_filter,
)
from app.Utils.db_operations import sync_service, update_comment_from_db
from app.Utils.template_renderer import render_template

app = Flask(__name__)

@app.route("/jira/<jira_no>", methods=["GET"])
def individual_jira_details(jira_no):
    data = get_individual_jira_details(jira_no)
    return render_template("jira_details.html", data=data)

@app.route("/jira/list/<filter_id>", methods=["GET"])
def jira_list(filter_id):
    data = get_jira_list_from_filter(filter_id)
    return render_template("jira_list.html", data=data)

@app.route("/sync/<environment>", methods=["POST"])
def sync_jira(environment):
    filter_id = request.json.get("filter_id")
    result = sync_service(filter_id, environment)
    return render_template("sync_results.html", data=result)

@app.route("/update_comment/<jira_no>", methods=["POST"])
def update_comment(jira_no):
    result = update_comment_from_db(jira_no, use_token=False)
    return render_template("comment_update.html", data=result)

@app.route("/update_comment_with_token/<jira_no>", methods=["POST"])
def update_comment_with_token(jira_no):
    result = update_comment_from_db(jira_no, use_token=True)
    return render_template("comment_update.html", data=result)

if __name__ == "__main__":
    app.run(debug=True)

2. wsgi.py

Entry point for the Flask app.

from app.routes import app

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

3. jira_operations.py

Handles JIRA API interactions.

import requests
from app.Config.settings import Config

def get_individual_jira_details(jira_no):
    url = f"{Config.JIRA_BASE_URL}/rest/api/2/issue/{jira_no}"
    headers = {"Authorization": f"Bearer {Config.JIRA_TOKEN}"}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

def get_jira_list_from_filter(filter_id):
    url = f"{Config.JIRA_BASE_URL}/rest/api/2/search?jql=filter={filter_id}"
    headers = {"Authorization": f"Bearer {Config.JIRA_TOKEN}"}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()["issues"]

4. db_operations.py

Manages database operations using SQLAlchemy.

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from app.Utils.models import JIRATable
from app.Config.settings import Config

def get_db_session(environment):
    db_url = Config.PROD_DB_URL if environment == "prod" else Config.QUALITY_DB_URL
    engine = create_engine(db_url)
    Session = sessionmaker(bind=engine)
    return Session()

def sync_service(filter_id, environment):
    # Simulate fetching data from JIRA API
    jira_data = get_jira_list_from_filter(filter_id)
    session = get_db_session(environment)

    for issue in jira_data:
        jira_no = issue["key"]
        db_entry = session.query(JIRATable).filter_by(jira_no=jira_no).first()
        if db_entry:
            db_entry.status = issue["fields"]["status"]["name"]
        else:
            new_entry = JIRATable(jira_no=jira_no, status=issue["fields"]["status"]["name"])
            session.add(new_entry)
    session.commit()

def update_comment_from_db(jira_no, use_token=False):
    # Simulated DB update and comment sync
    pass

5. models.py

Defines SQLAlchemy models.

from sqlalchemy import Column, String, Integer, Text, DateTime
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class JIRATable(Base):
    __tablename__ = "jira_table"
    id = Column(Integer, primary_key=True, autoincrement=True)
    jira_no = Column(String(50), unique=True)
    status = Column(String(50))
    summary = Column(Text)

6. template_renderer.py

Renders HTML templates.

from flask import render_template as flask_render_template

def render_template(template_name, data):
    return flask_render_template(template_name, data=data)

7. settings.py

Configuration for database and JIRA API.

import os

class Config:
    JIRA_BASE_URL = os.getenv("JIRA_BASE_URL")
    PROD_DB_URL = os.getenv("PROD_DB_URL")
    QUALITY_DB_URL = os.getenv("QUALITY_DB_URL")
    JIRA_TOKEN = os.getenv("JIRA_TOKEN")

8. Templates

Examples for templates:

jira_details.html

<h1>JIRA Details</h1>
<p>JIRA Number: {{ data['jira_no'] }}</p>
<p>Status: {{ data['status'] }}</p>
<p>Summary: {{ data['summary'] }}</p>

sync_results.html

<h1>Sync Results</h1>
<table>
    <tr><th>JIRA No</th><th>Status</th></tr>
    {% for item in data %}
    <tr>
        <td>{{ item['jira_no'] }}</td>
        <td>{{ item['status'] }}</td>
    </tr>
    {% endfor %}
</table>

9. Kubernetes Configurations

jira-secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: jira-secrets
type: Opaque
data:
  jira_token: <base64_encoded_token>

jira-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: jira-config
data:
  JIRA_BASE_URL: https://jira-instance-url
  PROD_DB_URL: postgresql://user:password@prod-host/db

10. Requirements

requirements.txt

Flask==2.3.0
SQLAlchemy==2.0.0
requests==2.31.0
python-dotenv==1.0.0

Let me know if you’d like additional details or instructions!