
Below is an example of how you can configure your NGINX Ingress to allow CORS for multiple HTTPS origins (e.g., https://ctlq.example.com, https://intg.example.com, https://pros.example.com). You simply need to add the appropriate annotations to your Ingress resource.

Example Ingress YAML with CORS Enabled

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
  namespace: your-namespace
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://ctlq.example.com,https://intg.example.com,https://pros.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, Accept, X-Requested-With"
    # Optionally, if credentials are needed:
    # nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
spec:
  rules:
    - host: your-service.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: your-service
                port:
                  number: 80

Explanation:
	1.	Annotations for CORS:
	•	nginx.ingress.kubernetes.io/enable-cors: "true"
This enables CORS processing on the ingress.
	•	nginx.ingress.kubernetes.io/cors-allow-origin: "https://ctlq.example.com,https://intg.example.com,https://pros.example.com"
Specifies a comma-separated list of allowed origins.
	•	nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
Allows the specified HTTP methods.
	•	nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, Accept, X-Requested-With"
Indicates which headers can be used in the actual request.
	•	(Optional) nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
Allows credentials (cookies, HTTP authentication) to be included with requests if required.
	2.	Ingress Rule:
	•	The rule in the spec section routes requests from the defined host (your-service.example.com) to your service.
	•	The CORS annotations apply to any request that passes through this Ingress, ensuring that your service accepts requests from the specified HTTPS origins.

Usage Notes:
	•	HTTPS:
Since you’re working with HTTPS origins (e.g., https://ctlq.example.com), ensure your ingress controller is configured with TLS and that these domains are correctly set up with valid certificates.
	•	Testing:
After applying this YAML, you can test the CORS configuration by making cross-origin requests from one of the allowed origins (or using a tool like Postman with the appropriate Origin header).
	•	Customization:
Adjust the list of allowed origins or headers as needed for your specific security requirements.

This configuration should allow your NGINX Ingress to properly handle CORS for the specified HTTPS origins without requiring any changes to your application code or additional Kubernetes YAML files for your service.

Here’s the Kubernetes YAML configuration to deploy the sync_issues module, including deployment, service, ConfigMap, and Secret resources.

1. Deployment YAML (sync-issues-deployment.yaml)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sync-issues
  labels:
    app: sync-issues
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sync-issues
  template:
    metadata:
      labels:
        app: sync-issues
    spec:
      containers:
        - name: sync-issues
          image: <your-docker-repo>/sync-issues:latest  # Replace with your image
          ports:
            - containerPort: 5000
          env:
            - name: DB_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: sync-issues-config
                  key: db_config
            - name: JIRA_TOKEN
              valueFrom:
                secretKeyRef:
                  name: sync-issues-secret
                  key: jira_token
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sync-issues-secret
                  key: db_password
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
            requests:
              memory: "128Mi"
              cpu: "250m"

2. Service YAML (sync-issues-service.yaml)

apiVersion: v1
kind: Service
metadata:
  name: sync-issues-service
  labels:
    app: sync-issues
spec:
  selector:
    app: sync-issues
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: ClusterIP

3. ConfigMap YAML (sync-issues-configmap.yaml)

apiVersion: v1
kind: ConfigMap
metadata:
  name: sync-issues-config
data:
  db_config: |
    {
      "PROD": {
        "driver": "oracle.jdbc.OracleDriver",
        "url": "jdbc:oracle:thin:@prod-db-host:1521/prod-db",
        "user": "prod-user",
        "jar_path": "/path/to/ojdbc8.jar"
      },
      "QUALITY": {
        "driver": "oracle.jdbc.OracleDriver",
        "url": "jdbc:oracle:thin:@quality-db-host:1521/quality-db",
        "user": "quality-user",
        "jar_path": "/path/to/ojdbc8.jar"
      }
    }

4. Secret YAML (sync-issues-secret.yaml)

apiVersion: v1
kind: Secret
metadata:
  name: sync-issues-secret
type: Opaque
data:
  jira_token: <base64-encoded-jira-token>      # Use `echo -n 'your-token' | base64`
  db_password: <base64-encoded-db-password>   # Use `echo -n 'your-password' | base64`

5. Ingress YAML (Optional)

If you want to expose the service externally, you can use an Ingress resource.

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sync-issues-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: sync-issues.your-domain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: sync-issues-service
                port:
                  number: 80

6. Namespace YAML (Optional)

If you prefer to deploy the application in its own namespace:

apiVersion: v1
kind: Namespace
metadata:
  name: sync-issues

Update all resources to include the namespace: sync-issues field.

Deployment Instructions:
	1.	Create Namespace (Optional):

kubectl apply -f namespace.yaml


	2.	Create ConfigMap:

kubectl apply -f sync-issues-configmap.yaml


	3.	Create Secret:

kubectl apply -f sync-issues-secret.yaml


	4.	Deploy the Application:

kubectl apply -f sync-issues-deployment.yaml


	5.	Create the Service:

kubectl apply -f sync-issues-service.yaml


	6.	Optional: Expose via Ingress:

kubectl apply -f sync-issues-ingress.yaml

Notes:
	•	Replace <your-docker-repo> with your container registry (e.g., Docker Hub, AWS ECR, etc.).
	•	Ensure the ojdbc8.jar file is included in the container or mounted as a volume.
	•	Encode sensitive data (e.g., tokens, passwords) into base64 format for the secret.

Let me know if you need further assistance!