Below is the db_ops.py file containing functions to fetch data from production and quality databases for the DbSummary.html functionality:

db_ops.py

import os
import json
import cx_Oracle

# Load environment variables
from dotenv import load_dotenv

load_dotenv()

# Database credentials
PROD_DB_URL = os.getenv("PROD_DB_URL")
PROD_DB_USER = os.getenv("PROD_DB_USER")
PROD_DB_PASSWORD = os.getenv("PROD_DB_PASSWORD")

QUALITY_DB_URL = os.getenv("QUALITY_DB_URL")
QUALITY_DB_USER = os.getenv("QUALITY_DB_USER")
QUALITY_DB_PASSWORD = os.getenv("QUALITY_DB_PASSWORD")

# SQL query to fetch issues from the database
FETCH_ISSUES_QUERY = """
    SELECT 
        jira_number,
        job_number,
        summary,
        update_incident_comment
    FROM jira_issues
"""

def get_db_connection(db_url, db_user, db_password):
    """
    Creates a connection to the Oracle database.

    Args:
        db_url (str): The database URL.
        db_user (str): The database username.
        db_password (str): The database password.

    Returns:
        cx_Oracle.Connection: A connection object to the Oracle database.
    """
    try:
        return cx_Oracle.connect(user=db_user, password=db_password, dsn=db_url)
    except cx_Oracle.DatabaseError as e:
        raise Exception(f"Database connection failed: {str(e)}")

def fetch_issues_from_db(db_url, db_user, db_password):
    """
    Fetches issues from the given database.

    Args:
        db_url (str): The database URL.
        db_user (str): The database username.
        db_password (str): The database password.

    Returns:
        list: A list of issues as dictionaries.
    """
    connection = None
    try:
        connection = get_db_connection(db_url, db_user, db_password)
        cursor = connection.cursor()

        # Execute the query
        cursor.execute(FETCH_ISSUES_QUERY)

        # Fetch results and map to a list of dictionaries
        issues = []
        for row in cursor.fetchall():
            issues.append({
                "jira_number": row[0],
                "job_number": row[1],
                "summary": row[2],
                "update_incident_comment": row[3]
            })

        return issues

    except cx_Oracle.DatabaseError as e:
        raise Exception(f"Error fetching issues: {str(e)}")
    finally:
        if connection:
            connection.close()

def fetch_prod_issues():
    """
    Fetches issues from the production database.

    Returns:
        list: A list of issues as dictionaries.
    """
    return fetch_issues_from_db(PROD_DB_URL, PROD_DB_USER, PROD_DB_PASSWORD)

def fetch_quality_issues():
    """
    Fetches issues from the quality database.

    Returns:
        list: A list of issues as dictionaries.
    """
    return fetch_issues_from_db(QUALITY_DB_URL, QUALITY_DB_USER, QUALITY_DB_PASSWORD)

Explanation
	1.	Environment Variables:
	•	The database credentials (PROD_DB_URL, QUALITY_DB_URL, etc.) are loaded from the .env file using the dotenv library for security and configurability.
	2.	get_db_connection:
	•	Establishes a connection to the Oracle database using cx_Oracle.
	3.	fetch_issues_from_db:
	•	Generic function to execute the FETCH_ISSUES_QUERY SQL query and retrieve issues from a given database.
	•	Results are returned as a list of dictionaries for easy templating.
	4.	Production and Quality Fetch Functions:
	•	fetch_prod_issues: Fetches issues specifically from the production database.
	•	fetch_quality_issues: Fetches issues from the quality database.
	5.	SQL Query:
	•	The jira_issues table is queried to fetch jira_number, job_number, summary, and update_incident_comment.
	•	Replace jira_issues with the actual table name in your database if different.

Example Usage in Flask Route

@app.route('/db_summary')
def db_summary():
    """
    Fetch issues from prod and quality databases and render as HTML.
    """
    try:
        prod_issues = fetch_prod_issues()
        quality_issues = fetch_quality_issues()

        return render_template(
            'DbSummary.html',
            prod_issues=prod_issues,
            quality_issues=quality_issues,
            jira_url="https://your-jira-instance.com"  # Replace with your JIRA URL
        )
    except Exception as e:
        return f"Error: {str(e)}"

Example .env File

PROD_DB_URL=prod-db-url
PROD_DB_USER=prod-user
PROD_DB_PASSWORD=prod-password

QUALITY_DB_URL=quality-db-url
QUALITY_DB_USER=quality-user
QUALITY_DB_PASSWORD=quality-password

This db_ops.py file is robust and ensures secure, efficient, and reusable database operations. It works seamlessly with the DbSummary.html template provided earlier.