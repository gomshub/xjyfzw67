Here’s a ReadMe.md for the project, providing comprehensive instructions and details for setup, usage, and deployment.

JIRA Sync Service

Overview

This project provides a Flask-based microservice for synchronizing JIRA issue data with an Oracle database. It supports the following services:
	1.	Fetch individual JIRA details as an HTML page.
	2.	Fetch a list of JIRA issues using a filter ID and display them in an HTML page.
	3.	Synchronize JIRA issues to the database (insert, update, or delete rows) based on the JIRA filter results and the environment (prod or quality).
	4.	Update comments in the database for a JIRA issue without a token.
	5.	Update comments in the database for a JIRA issue with a token.

The services return HTML responses rendered using Jinja templates.

Project Structure

project_root/
├── app/
│   ├── routes.py                  # Flask routes for all services
│   ├── wsgi.py                    # WSGI entry point
│   ├── Utils/
│   │   ├── jira_operations.py     # Handles JIRA API interactions
│   │   ├── db_operations.py       # Database operations using SQLAlchemy
│   │   ├── models.py              # SQLAlchemy database models
│   │   ├── template_renderer.py   # Jinja template renderer
│   ├── Config/
│   │   ├── settings.py            # Application configurations
│   │   ├── gunicorn.py            # Gunicorn configuration
│   ├── templates/                 # Jinja HTML templates
│       ├── jira_details.html
│       ├── jira_list.html
│       ├── sync_results.html
│       ├── comment_update.html
├── .env                           # Environment variables
├── requirements.txt               # Python dependencies
├── Kube/                          # Kubernetes YAML files
│   ├── jira-secrets.yaml
│   ├── jira-configmap.yaml
│   ├── deployment.yaml
│   ├── service.yaml
├── Helm/                          # Helm chart for deployment
│   ├── Chart.yaml
│   ├── values.yaml
├── ReadMe.md                      # Documentation

Prerequisites
	1.	Python 3.11 or higher.
	2.	Virtual environment tool (venv or conda).
	3.	JIRA access with an API token.
	4.	Oracle/PostgreSQL database setup with proper credentials.
	5.	Kubernetes cluster for deployment.

Setup Instructions

1. Clone the Repository

git clone <repository-url>
cd project_root

2. Set Up Virtual Environment

python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

3. Install Dependencies

pip install -r requirements.txt

4. Set Up Environment Variables

Create a .env file in the root directory with the following content:

JIRA_BASE_URL=https://jira-instance-url
PROD_DB_URL=postgresql://username:password@prod-db-host/db
QUALITY_DB_URL=postgresql://username:password@quality-db-host/db
JIRA_TOKEN=your_jira_api_token

5. Run the Flask App

flask run

API Endpoints

1. Fetch Individual JIRA Details
	•	Endpoint: /jira/<jira_no>
	•	Method: GET
	•	Description: Fetch JIRA details for a specific issue number.
	•	Response: Renders jira_details.html.

2. Fetch JIRA List by Filter
	•	Endpoint: /jira/list/<filter_id>
	•	Method: GET
	•	Description: Fetch a list of JIRA issues matching a specific filter ID.
	•	Response: Renders jira_list.html.

3. Synchronize JIRA Issues to Database
	•	Endpoint: /sync/<environment>
	•	Method: POST
	•	Payload:

{
  "filter_id": "12345"
}


	•	Description: Synchronize issues with the database (insert, update, delete) based on JIRA filter results. Database environment is chosen based on the issue summary (P01 for prod, Q01 for quality).
	•	Response: Renders sync_results.html.

4. Update Comments Without Token
	•	Endpoint: /update_comment/<jira_no>
	•	Method: POST
	•	Description: Update the comment in JIRA using data from the database for the specific issue.
	•	Response: Renders comment_update.html.

5. Update Comments With Token
	•	Endpoint: /update_comment_with_token/<jira_no>
	•	Method: POST
	•	Description: Update the comment in JIRA using a token and data from the database for the specific issue.
	•	Response: Renders comment_update.html.

Testing Locally
	1.	Use the .env file to define environment variables.
	2.	Start the Flask application:

flask run


	3.	Test the endpoints using curl or a tool like Postman.

Kubernetes Deployment

1. Secrets
	•	jira-secrets.yaml:

apiVersion: v1
kind: Secret
metadata:
  name: jira-secrets
type: Opaque
data:
  jira_token: <base64_encoded_token>
  prod_db_password: <base64_encoded_password>
  quality_db_password: <base64_encoded_password>



2. ConfigMap
	•	jira-configmap.yaml:

apiVersion: v1
kind: ConfigMap
metadata:
  name: jira-config
data:
  JIRA_BASE_URL: https://jira-instance-url
  PROD_DB_URL: postgresql://user:prod_password@prod-db-host/db
  QUALITY_DB_URL: postgresql://user:quality_password@quality-db-host/db



3. Deployment
	•	deployment.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-sync-service
spec:
  replicas: 2
  template:
    spec:
      containers:
      - name: app
        image: jira-sync-service:latest
        envFrom:
        - configMapRef:
            name: jira-config
        - secretRef:
            name: jira-secrets

Helm Chart

Helm templates are in the Helm/ directory.

Contributing

Feel free to contribute by:
	•	Reporting issues.
	•	Submitting feature requests.
	•	Creating pull requests.

License

This project is licensed under MIT License.

Let me know if you need further adjustments!