I see the exact issue now. You’re dealing with two conflicting requirements in ArgoCD:
	1.	Helm chart packaging includes a values.yaml, but you want ArgoCD to use its own values.yaml when deploying. However, by default, ArgoCD is still referring to the packaged values.yaml.
	2.	You need to override only the Docker image version dynamically, without modifying values.yaml manually or in Git every time.

⸻

Solution: Use ArgoCD’s valueFiles + helm.parameters Together

ArgoCD does not automatically override the packaged values.yaml.
	•	✅ To force ArgoCD to use its own values.yaml, you must specify valueFiles.
	•	✅ To dynamically override the image version, you should use helm.parameters.

⸻

How to Fix This?

Modify your ArgoCD Application YAML like this:

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: my-app
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: my-namespace
  source:
    repoURL: "https://my-artifactory-url"
    chart: test-charts
    targetRevision: 1.0.0
    helm:
      valueFiles:
        - values.yaml  # Force ArgoCD to use its own values.yaml
      parameters:
        - name: "image.tag"
          value: "1.0"  # This will override whatever is in values.yaml

Explanation:
	1.	valueFiles: ["values.yaml"] → Ensures ArgoCD is not using the Helm-packaged values.yaml from Artifactory.
	2.	parameters: [{"name": "image.tag", "value": "1.0"}] → Dynamically overrides just the image version at runtime.

⸻

Updating the Docker Image Version via API

Now, when you want to update the image version dynamically, you can just update the Helm parameter using a curl request:

APP_NAME="my-app"
ARGOCD_SERVER="your-argocd-server.com"
NEW_IMAGE_VERSION="1.1"

TOKEN=$(curl -k -X POST "https://$ARGOCD_SERVER/api/v1/session" \
  -d '{"username":"your-username","password":"your-password"}' \
  -H "Content-Type: application/json" | jq -r .token)

curl -k -X PATCH "https://$ARGOCD_SERVER/api/v1/applications/$APP_NAME" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "spec": {
      "source": {
        "helm": {
          "parameters": [
            {
              "name": "image.tag",
              "value": "'"$NEW_IMAGE_VERSION"'"
            }
          ]
        }
      }
    }
  }'



⸻

Summary

✅ Ensuring ArgoCD uses its own values.yaml → Set valueFiles: ["values.yaml"]
✅ Allowing dynamic Docker image version updates → Use helm.parameters
✅ Updating image version without modifying values.yaml → Use ArgoCD API

This setup ensures that:
	•	ArgoCD ignores the values.yaml from the Helm package in Artifactory.
	•	ArgoCD uses its own values.yaml.
	•	You can still dynamically update the Docker image version via API without modifying files.

This should completely solve your problem! Let me know if you need more details.