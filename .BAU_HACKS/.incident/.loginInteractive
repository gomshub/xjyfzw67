
Got it! Here‚Äôs how it will work:

Flow Overview
	1.	One-time Kubernetes Secret Storage
	‚Ä¢	A random token is generated for each user.
	‚Ä¢	It is HMAC-hashed and stored once in Kubernetes secrets.
	‚Ä¢	This is done manually or through an init script.
	2.	Interactive Service Loads the Token Securely
	‚Ä¢	The user calls /interactive_service via curl or browser.
	‚Ä¢	The server retrieves the HMAC token from Kubernetes secrets.
	‚Ä¢	The token is sent securely via an AJAX request and stored in localStorage, but never visible in HTML source code.
	3.	Subsequent Requests Use the Token for Authentication
	‚Ä¢	Requests include the token in the Authorization header.
	‚Ä¢	The token is verified using HMAC before processing the request.

‚∏ª

1Ô∏è‚É£ Flask Service (Using HMAC for JWT and Secure Token Handling)

import os
import json
import base64
import hmac
import hashlib
import jwt
from flask import Flask, request, jsonify

app = Flask(__name__)

KUBE_SECRET_PATH = "/etc/secrets/user_tokens.json"  # Mounted Kubernetes secret

# Load stored HMAC tokens from Kubernetes secret
def load_kube_secret():
    if os.path.exists(KUBE_SECRET_PATH):
        with open(KUBE_SECRET_PATH, "r") as f:
            return json.load(f)
    return {}

# Generate a JWT token signed with HMAC
def generate_hmac_token(username, secret_key):
    payload = {"username": username}
    return jwt.encode(payload, secret_key, algorithm="HS256")

# Authenticate interactive service request and send token securely
@app.route("/interactive_service", methods=["GET"])
def interactive_service():
    username = request.args.get("username")
    if not username:
        return jsonify({"error": "Username is required"}), 400

    stored_tokens = load_kube_secret()
    if username not in stored_tokens:
        return jsonify({"error": "User not found"}), 401

    user_secret = stored_tokens[username]
    jwt_token = generate_hmac_token(username, user_secret)

    return jsonify({"token": jwt_token})

# Middleware to require JWT authentication
def require_jwt(f):
    """Decorator to check JWT authentication in subsequent requests."""
    def wrapper(*args, **kwargs):
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            return jsonify({"error": "Unauthorized"}), 401

        jwt_token = auth_header.split("Bearer ")[1]

        try:
            decoded = jwt.decode(jwt_token, options={"verify_signature": False})
            username = decoded.get("username")

            stored_tokens = load_kube_secret()
            if username not in stored_tokens:
                return jsonify({"error": "Invalid token"}), 401

            expected_hmac = stored_tokens[username]
            if not hmac.compare_digest(expected_hmac, jwt.encode({"username": username}, expected_hmac, algorithm="HS256")):
                return jsonify({"error": "Token mismatch"}), 401

            return f(*args, **kwargs)
        except jwt.ExpiredSignatureError:
            return jsonify({"error": "Token expired"}), 401
        except jwt.InvalidTokenError:
            return jsonify({"error": "Invalid token"}), 401
    return wrapper

@app.route("/secure_data", methods=["GET"])
@require_jwt
def secure_data():
    return jsonify({"message": "Secure data accessed successfully!"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)



‚∏ª

2Ô∏è‚É£ Kubernetes Secret (JSON Storage)

This secret is stored one time in Kubernetes:

{
  "user1": "c34f9a1b5d3e...",
  "user2": "a3e8b76d4f21..."
}

YAML for Kubernetes:

apiVersion: v1
kind: Secret
metadata:
  name: user-tokens
type: Opaque
data:
  user_tokens.json: "ewogICJ1c2VyMSI6ICJjMzRmOWExYjVkM2UiLAogICJ1c2VyMiI6ICJhM2U4Yjc2ZDRmMjEiCn0="

(Make sure to base64 encode the JSON content before saving.)

Mount this in the deployment:

volumes:
  - name: user-secrets
    secret:
      secretName: user-tokens

volumeMounts:
  - name: user-secrets
    mountPath: /etc/secrets
    readOnly: true



‚∏ª

3Ô∏è‚É£ Interactive HTML (Token is Fetched Securely)
	‚Ä¢	Calls /interactive_service to get the token.
	‚Ä¢	Token is never exposed in HTML source code.
	‚Ä¢	Used for all subsequent requests.

<!DOCTYPE html>
<html>
<head>
    <title>Interactive Service</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h2>Welcome to the Interactive Service</h2>
    <button onclick="accessSecureData()">Access Secure Data</button>

    <script>
        let TOKEN = null;

        function fetchToken() {
            $.ajax({
                url: "/interactive_service",
                type: "GET",
                data: { "username": "user1" },
                success: function(response) {
                    TOKEN = response.token;
                    localStorage.setItem("jwt_token", TOKEN);
                },
                error: function(xhr) {
                    alert("Error fetching token: " + xhr.responseJSON.error);
                }
            });
        }

        function accessSecureData() {
            if (!TOKEN) {
                alert("No token found, fetching a new one...");
                fetchToken();
                return;
            }

            $.ajax({
                url: "/secure_data",
                type: "GET",
                headers: { "Authorization": "Bearer " + TOKEN },
                success: function(response) {
                    alert(response.message);
                },
                error: function(xhr) {
                    alert("Error: " + xhr.responseJSON.error);
                }
            });
        }

        $(document).ready(function() {
            fetchToken();  // Automatically fetch token on page load
        });
    </script>
</body>
</html>



‚∏ª

4Ô∏è‚É£ How This Works

‚úÖ One-Time Kubernetes Secret
	‚Ä¢	Tokens are pre-generated for users and stored in Kubernetes as a JSON object.
	‚Ä¢	Each user has a unique HMAC-hashed token stored securely.

‚úÖ Fetching the Token Securely
	‚Ä¢	The /interactive_service route fetches the JWT token for the user.
	‚Ä¢	Token is never hardcoded in HTML and is stored only in JavaScript memory/localStorage.

‚úÖ Authenticated Subsequent Requests
	‚Ä¢	Every request sends the JWT token in the Authorization header.
	‚Ä¢	The require_jwt middleware validates the token using HMAC and allows access only if valid.

‚∏ª

üîπ Summary

1Ô∏è‚É£ Kubernetes stores user tokens securely as HMAC hashes (one-time setup).
2Ô∏è‚É£ Interactive service fetches and loads the token dynamically (never exposed in HTML).
3Ô∏è‚É£ All subsequent requests require JWT authentication.

This ensures security, no login page, and HMAC-based verification.

Would you like any modifications? üöÄ


=#=#
<!DOCTYPE html>
<html>
<head>
  <title>Interactive Service</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
  <h2>Welcome to the Interactive Service</h2>
  <button onclick="refreshTable()">Refresh Table</button>

  <script>
    // Call generate_token to get the JWT token for the user
    function generateTokenAndStore() {
      $.ajax({
        url: "/generate_token",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({ "username": "example_username", "password": "example_password" }),
        success: function(response) {
          // Store the JWT token in localStorage
          localStorage.setItem("jwt_token", response.token);
          console.log("Token stored successfully!");
        },
        error: function(xhr) {
          alert("Error: " + xhr.responseJSON.error);
        }
      });
    }

    // Refresh table function using the JWT token
    function refreshTable() {
      const TOKEN = localStorage.getItem("jwt_token");

      if (!TOKEN) {
        alert("JWT token missing. Please log in again.");
        return;
      }

      $.ajax({
        url: "/get_jira_issues",
        type: "GET",
        headers: { "Authorization": "Bearer " + TOKEN },
        success: function(response) {
          alert("Table refreshed successfully!");
        },
        error: function(xhr) {
          alert("Error: " + xhr.responseJSON.error);
        }
      });
    }

    // Generate token when the page loads
    generateTokenAndStore();
  </script>
</body>
</html>


=#=#
curl -X POST "http://your-flask-url/generate_token" \
     -H "Content-Type: application/json" \
     -d '{"username": "testuser", "password": "testpassword"}'



<!DOCTYPE html>
<html>
<head>
    <title>Interactive JIRA Service</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>

    <!-- Login Form -->
    <div id="login-form">
        <h2>Login to JIRA Interactive Service</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>

    <!-- Interactive Section (Initially Hidden) -->
    <div id="interactive-section" style="display: none;">
        <h2>JIRA Issues Table</h2>
        <button onclick="refreshTable()">Refresh Table</button>
        <table border="1">
            <thead>
                <tr>
                    <th>JIRA ID</th>
                    <th>Summary</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="jira-table-body">
                <!-- JIRA Issues will be inserted here dynamically -->
            </tbody>
        </table>
    </div>

    <script>
        function login() {
            const username = $("#username").val();
            const password = $("#password").val();

            $.ajax({
                url: "/generate_token",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ username, password }),
                success: function(response) {
                    localStorage.setItem("jwt_token", response.token);
                    $("#login-form").hide();
                    $("#interactive-section").show();
                    refreshTable();  // Load JIRA table immediately after login
                },
                error: function(xhr) {
                    alert("Login failed: " + xhr.responseJSON.error);
                }
            });
        }

        function refreshTable() {
            const token = localStorage.getItem("jwt_token");
            if (!token) {
                alert("Not authenticated!");
                return;
            }

            $.ajax({
                url: "/get_jira_issues",
                type: "GET",
                headers: { "Authorization": "Bearer " + token },
                success: function(response) {
                    let tableBody = $("#jira-table-body");
                    tableBody.empty();  // Clear previous data

                    response.issues.forEach(issue => {
                        tableBody.append(`
                            <tr>
                                <td>${issue.jira_id}</td>
                                <td>${issue.summary}</td>
                                <td>${issue.status}</td>
                                <td>
                                    <button onclick="updateComment('${issue.jira_id}')">Update Comment</button>
                                    <button onclick="resolveIssue('${issue.jira_id}')">Resolve</button>
                                </td>
                            </tr>
                        `);
                    });
                },
                error: function(xhr) {
                    alert("Error fetching JIRA issues: " + xhr.responseJSON.error);
                }
            });
        }

        function updateComment(jiraId) {
            const token = localStorage.getItem("jwt_token");
            let comment = prompt("Enter your comment:");

            if (!comment) return;

            $.ajax({
                url: "/update_comment",
                type: "POST",
                contentType: "application/json",
                headers: { "Authorization": "Bearer " + token },
                data: JSON.stringify({ jira_id: jiraId, comment: comment }),
                success: function(response) {
                    alert("Comment updated successfully!");
                    refreshTable();
                },
                error: function(xhr) {
                    alert("Error updating comment: " + xhr.responseJSON.error);
                }
            });
        }

        function resolveIssue(jiraId) {
            const token = localStorage.getItem("jwt_token");

            $.ajax({
                url: "/resolve_issue",
                type: "POST",
                contentType: "application/json",
                headers: { "Authorization": "Bearer " + token },
                data: JSON.stringify({ jira_id: jiraId }),
                success: function(response) {
                    alert("Issue resolved!");
                    refreshTable();
                },
                error: function(xhr) {
                    alert("Error resolving issue: " + xhr.responseJSON.error);
                }
            });
        }

        // Auto-login if JWT exists
        $(document).ready(function() {
            if (localStorage.getItem("jwt_token")) {
                $("#login-form").hide();
                $("#interactive-section").show();
                refreshTable();
            }
        });
    </script>

</body>
</html>




import os
import json
import hmac
import base64
import hashlib
import jwt
from flask import Flask, request, jsonify, render_template

app = Flask(__name__)

# Configuration
JWT_ALGORITHM = "HS256"
HMAC_SECRET = os.getenv("HMAC_SECRET", "default_secret")  # Used for HMAC hashing
USER_AUTH_TOKENS = json.loads(os.getenv("USER_AUTH_TOKENS", "{}"))  # Stored as Kube Secret


def hmac_hash(value):
    """HMAC-SHA256 hashing"""
    return hmac.new(HMAC_SECRET.encode(), value.encode(), hashlib.sha256).hexdigest()


@app.route("/hash_credentials", methods=["POST"])
def hash_credentials():
    """Hashes password and encodes JIRA API token using HMAC and updates the Kube secret"""
    data = request.json
    username = data.get("username")
    password = data.get("password")
    jira_api_token = data.get("jira_api_token")

    if not username or not password or not jira_api_token:
        return jsonify({"error": "Username, password, and JIRA API token are required"}), 400

    hashed_password = hmac_hash(password)
    encoded_jira_token = base64.b64encode(jira_api_token.encode()).decode()

    # Store in Kubernetes secret (simulated here)
    USER_AUTH_TOKENS[username] = {
        "hashed_password": hashed_password,
        "jira_api_token": encoded_jira_token,
    }

    # Normally, you would update the Kube Secret manually or via API
    return jsonify({"message": "Credentials stored successfully"})


@app.route("/generate_token", methods=["POST"])
def generate_token():
    """Generates a JWT token for interactive session"""
    data = request.json
    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400

    user_data = USER_AUTH_TOKENS.get(username)
    if not user_data:
        return jsonify({"error": "Invalid username"}), 401

    stored_hash = user_data["hashed_password"]

    if hmac_hash(password) != stored_hash:
        return jsonify({"error": "Invalid credentials"}), 401

    token_payload = {"username": username}
    token = jwt.encode(token_payload, HMAC_SECRET, algorithm=JWT_ALGORITHM)

    return jsonify({"token": token})


def require_jwt(f):
    """Decorator to enforce JWT authentication"""
    def wrapper(*args, **kwargs):
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            return jsonify({"error": "Missing or invalid Authorization header"}), 401

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, HMAC_SECRET, algorithms=[JWT_ALGORITHM])
            request.user = decoded["username"]
            return f(*args, **kwargs)
        except jwt.ExpiredSignatureError:
            return jsonify({"error": "Token has expired"}), 403
        except jwt.InvalidTokenError:
            return jsonify({"error": "Invalid token"}), 403

    return wrapper


@app.route("/interactive", methods=["GET"])
@require_jwt
def interactive_service():
    """Renders the interactive HTML page"""
    return render_template("interactive.html")


if __name__ == "__main__":
    app.run(debug=True)

Final Flow with Interactive Login Handling

Since the interactive service is accessed via a curl POST request that returns an HTML page and CORS is enabled for handling static HTML, the login flow should be adjusted as follows:

New Workflow:
	1.	User accesses /interactive (without authentication initially)
	‚Ä¢	interactive.html is served.
	‚Ä¢	It contains a login form (JS triggers login via fetch to /generate_token).
	‚Ä¢	The user does not need to be redirected away from this page.
	2.	User logs in from the interactive page (interactive.html):
	‚Ä¢	A fetch request is sent to /generate_token (POST with username & password).
	‚Ä¢	If authentication is successful:
	‚Ä¢	The JWT token is stored in localStorage.
	‚Ä¢	The page reloads, and all subsequent requests (e.g., fetching JIRA data, updating comments, resolving issues) use this token.
	3.	Subsequent Requests (require_jwt)
	‚Ä¢	Every AJAX request made from interactive.html includes the JWT in headers.
	‚Ä¢	require_jwt ensures that only authenticated users can perform operations.

‚∏ª

Updated Implementation

1Ô∏è‚É£ Flask Routes (routes.py)

from flask import Flask, request, jsonify, render_template
import os
import jwt
import hmac
import hashlib
import base64
import json

app = Flask(__name__)

JWT_SECRET = os.getenv("JWT_SECRET", "default_jwt_secret")
JWT_ALGORITHM = "HS256"
USER_AUTH_TOKENS = json.loads(os.getenv("USER_AUTH_TOKENS", "{}"))  # Stored as Kube Secret JSON

def hash_secret(secret):
    """Generate an HMAC hash of the secret (used for both passwords & API tokens)."""
    return hmac.new(JWT_SECRET.encode(), secret.encode(), hashlib.sha256).hexdigest()

def verify_secret(provided_secret, stored_hash):
    """Verify if the provided secret matches the stored hash."""
    return hmac.compare_digest(stored_hash, hash_secret(provided_secret))

@app.route('/generate_token', methods=['POST'])
def generate_token():
    """Authenticate user and generate a JWT token."""
    data = request.json
    username = data.get("username")
    password = data.get("password")

    if username not in USER_AUTH_TOKENS:
        return jsonify({"error": "User not found"}), 403

    stored_hash = USER_AUTH_TOKENS[username]["secret"]
    if not verify_secret(password, stored_hash):
        return jsonify({"error": "Invalid credentials"}), 403

    # Generate JWT
    token = jwt.encode({"username": username}, JWT_SECRET, algorithm=JWT_ALGORITHM)
    return jsonify({"token": token})

def require_jwt(f):
    """Decorator to ensure requests have a valid JWT."""
    def wrapper(*args, **kwargs):
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            return jsonify({"error": "Unauthorized"}), 403

        token = auth_header.split(" ")[1]
        try:
            decoded = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
            request.username = decoded["username"]
            return f(*args, **kwargs)
        except jwt.ExpiredSignatureError:
            return jsonify({"error": "Token expired"}), 403
        except jwt.InvalidTokenError:
            return jsonify({"error": "Invalid token"}), 403

    return wrapper

@app.route('/interactive', methods=['GET'])
def interactive_page():
    """Serve the interactive HTML page."""
    return render_template('interactive.html')

@app.route('/secure_action', methods=['POST'])
@require_jwt
def secure_action():
    """Example secured route."""
    return jsonify({"message": f"Action performed by {request.username}"})

if __name__ == '__main__':
    app.run(debug=True)



‚∏ª

2Ô∏è‚É£ Updated HTML Template (templates/interactive.html)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Service</title>
    <script>
        async function login() {
            const username = document.getElementById("username").value;
            const password = document.getElementById("password").value;

            const response = await fetch("/generate_token", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ username, password })
            });

            const data = await response.json();
            if (response.ok) {
                localStorage.setItem("jwt_token", data.token);
                document.getElementById("login-form").style.display = "none";
                document.getElementById("content").style.display = "block";
            } else {
                alert("Login failed: " + data.error);
            }
        }

        async function performSecureAction() {
            const token = localStorage.getItem("jwt_token");
            if (!token) {
                alert("Not authenticated!");
                return;
            }

            const response = await fetch("/secure_action", {
                method: "POST",
                headers: { "Authorization": "Bearer " + token }
            });

            const data = await response.json();
            alert(data.message);
        }
    </script>
</head>
<body>
    <div id="login-form">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>

    <div id="content" style="display: none;">
        <h2>Welcome to the Interactive Service</h2>
        <button onclick="performSecureAction()">Perform Secure Action</button>
    </div>
</body>
</html>



‚∏ª

How It Works
	1.	User opens /interactive
	‚Ä¢	Login form is displayed (if JWT not in localStorage).
	2.	User logs in from interactive.html
	‚Ä¢	Calls /generate_token API.
	‚Ä¢	If successful:
	‚Ä¢	Stores JWT in localStorage.
	‚Ä¢	Hides login form & displays interactive content.
	3.	Subsequent Requests (require_jwt)
	‚Ä¢	JWT is included in headers (Authorization: Bearer <token>).
	‚Ä¢	Secured endpoints validate the token.
	4.	Token is persistent
	‚Ä¢	Stored in localStorage, so it remains valid unless the browser clears storage.

‚∏ª

Key Enhancements

‚úÖ No Redirects: Login happens inside interactive.html.
‚úÖ JWT-Based Authentication: Secure & stateless.
‚úÖ HMAC for Hashing: Works across all environments (avoids bcrypt issues).
‚úÖ Kubernetes Secret Storage: All credentials stored securely in env vars, not files.
‚úÖ No CORS Issues: Since the login API is called from the same page.

‚∏ª

Would you like any further refinements?

