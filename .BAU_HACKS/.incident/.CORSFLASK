
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)

# Allow CORS for all HTTP methods (GET, POST, PUT, DELETE, etc.) for /update_comment route
cors = CORS(app, resources={
    r"/update_comment": {
        "origins": [
            "file:///C:/Users/user1/Downloads/index.html",  # User 1 static file
            "file:///C:/Users/user2/Downloads/index.html",  # User 2 static file
            "file:///C:/Users/user3/Downloads/index.html",  # User 3 static file
            "http://localhost:8000",  # Local server (optional)
            "https://your-frontend-url.com"  # Frontend URL (optional)
        ],
        "methods": ["GET", "POST", "PUT", "DELETE"]  # Allow all methods for /update_comment
    }
})

@app.route('/update_comment', methods=['POST', 'GET', 'PUT', 'DELETE'])
def update_comment():
    # Extract comment and jira_number from the request payload
    if request.method == 'POST':
        jira_number = request.json.get('jira_number')
        comment = request.json.get('comment')
        # Handle the update comment functionality (for example, saving to DB)
        return jsonify({"status": "success", "jira_number": jira_number, "comment": comment})

    # You can also handle other methods (GET, PUT, DELETE) if needed
    return jsonify({"status": "method not supported"}), 405


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')


Yes, you can trigger the HTML script call to the /update_comment service in your Flask app on a button click, while also ensuring that the CORS configuration allows requests from specific static paths for three users.

Here’s how you can accomplish this:
	1.	Allow Static Paths for 3 Users in CORS:
Modify the CORS configuration to allow specific static paths for 3 users in the origins list. You’ll ensure that only those users (whose paths you specify) are allowed to make requests to the /update_comment service.
	2.	Trigger HTML Script Call on Button Click:
You can trigger the update_comment service from the HTML script on button click using JavaScript. The form submission or button click will invoke the fetch call to the /update_comment route in Flask.

Updated Flask Code:

Here’s how you can modify the Flask code to handle the CORS setup for multiple static paths and make the /update_comment route functional for triggering the request via a button click:

from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)

# Allow CORS only for the /update_comment route from specific static HTML file paths for 3 users
cors = CORS(app, resources={
    r"/update_comment": {
        "origins": [
            "file:///C:/Users/user1/Downloads/index.html",  # User 1 static file
            "file:///C:/Users/user2/Downloads/index.html",  # User 2 static file
            "file:///C:/Users/user3/Downloads/index.html",  # User 3 static file
            "http://localhost:8000",  # Local server (optional)
            "https://your-frontend-url.com"  # Frontend URL (optional)
        ]
    }
})

@app.route('/update_comment', methods=['POST'])
def update_comment():
    # Extract comment and jira_number from the request payload
    jira_number = request.json.get('jira_number')
    comment = request.json.get('comment')

    # Handle the update comment functionality (for example, saving to DB)
    return jsonify({"status": "success", "jira_number": jira_number, "comment": comment})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')

Explanation of Changes:
	1.	Allow CORS for 3 Specific Static HTML Paths:
	•	The origins array in the CORS configuration has been modified to allow requests only from the three specified file paths (one for each user).
	•	If you want to allow any specific local or external server, you can add more URLs in the origins array.
	2.	/update_comment Route:
	•	The /update_comment route now handles POST requests. The route expects a JSON payload containing jira_number and comment, which you can use to update the comment in your database.

HTML Code for Triggering the Request (Example):

Here’s how you can write the static HTML file with a button that triggers the /update_comment service when clicked:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Comment</title>
    <script>
        const baseUrl = "http://localhost:6000";  // The URL for your Flask app

        function updateComment(jiraNumber) {
            const comment = document.getElementById(`comment_${jiraNumber}`).value;
            fetch(`${baseUrl}/update_comment`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ jira_number: jiraNumber, comment })
            })
            .then(response => response.json())
            .then(data => alert(`Comment updated: ${data.status}`))
            .catch(err => console.error(err));
        }
    </script>
</head>
<body>
    <h1>Update Comment for Jira Issue</h1>

    <!-- Example comment for Jira issue 123 -->
    <label for="comment_123">Comment for Jira #123:</label>
    <textarea id="comment_123" placeholder="Enter your comment"></textarea>
    <br>
    <button onclick="updateComment(123)">Update Comment</button>

</body>
</html>

Explanation of HTML:
	•	JavaScript Function: The updateComment function sends a POST request to /update_comment with the jira_number and the comment value entered by the user.
	•	Button: When the user clicks the “Update Comment” button, the function updateComment(123) is called, which updates the comment for Jira issue number 123.

CORS Flow:
	1.	When the static HTML page is loaded in the browser, the user can enter a comment for the Jira issue and click the “Update Comment” button.
	2.	The JavaScript function updateComment sends a POST request to your Flask server (/update_comment route).
	3.	The Flask app checks the Origin header in the request and verifies whether the request is coming from an allowed origin (one of the specified file paths in the CORS configuration).
	4.	If the request is valid, Flask processes the request and updates the comment, returning a response that includes the status.

Additional Considerations:
	•	Security: Ensure that only valid origins are allowed, especially when deploying to production. You may need to handle authorization/authentication depending on the user’s role.
	•	Static HTML: This approach works for local development. In a production environment, you’d typically host your HTML files through a web server (e.g., Nginx or Apache) or a cloud platform.

Testing Locally:
	1.	Ensure your Flask app is running (e.g., flask run or gunicorn).
	2.	Open the static HTML file directly in your browser (e.g., file:///C:/Users/user1/Downloads/index.html).
	3.	Click the “Update Comment” button, and the request will be sent to the Flask app, which processes it and returns the result.

By using this approach, you enable CORS for specific static paths, ensuring that only the specified users (from specific static file paths) can interact with the /update_comment service.