
Here’s a detailed guide to set up your local development environment, including the use of loadenv(), .gitignore management, testing with Flask, project structure, and curl examples.

1. Project Structure

Your project should follow a structure similar to this:

project/
├── app/
│   ├── __init__.py
│   ├── settings.py
│   ├── routes.py
│   ├── db_ops.py
│   ├── jira_ops.py
│   ├── templates/
│   │   ├── detailed_results.html
│   │   ├── interactive.html
│   │   └── ...
│   └── static/
│       └── style.css
├── secrets/               # For local dev secrets
│   └── user_tokens.json
├── .env                   # For local development environment variables
├── .gitignore             # Ignore sensitive files
├── Dockerfile
├── requirements.txt       # Python dependencies
├── README.md
└── venv/                  # Python virtual environment

2. .gitignore File

Add the following entries to your .gitignore file to avoid committing sensitive files:

# Ignore virtual environment
venv/

# Ignore secrets
secrets/
.env

# Byte-compiled Python files
__pycache__/
*.py[cod]

# Ignore local editor or OS-specific files
*.swp
.DS_Store

3. Modify settings.py for loadenv()

Use loadenv() from python-dotenv to load environment variables locally:

import os
import json
from dotenv import load_dotenv

class Config:
    FLASK_ENV = os.getenv("FLASK_ENV", "production")
    SECRET_KEY = os.getenv("SECRET_KEY", "default_secret_key")
    BASE_URL = os.getenv("BASE_URL", "http://localhost:6000")

    # Load .env only in local development
    if FLASK_ENV == "development":
        load_dotenv()  # Load variables from .env
        KUBE_SECRET_PATH = os.getenv("LOCAL_SECRET_PATH", "./secrets")
    else:
        KUBE_SECRET_PATH = os.getenv("KUBE_SECRET_PATH", "/var/run/secrets/kubernetes.io/serviceaccount")

    USER_TOKENS_FILE = f"{KUBE_SECRET_PATH}/user_tokens.json"

    @classmethod
    def load_user_tokens(cls):
        """Load user tokens from the JSON file."""
        try:
            with open(cls.USER_TOKENS_FILE, "r") as f:
                return json.load(f)
        except FileNotFoundError:
            raise FileNotFoundError(f"User tokens file not found at {cls.USER_TOKENS_FILE}")
        except json.JSONDecodeError:
            raise ValueError(f"Invalid JSON in user tokens file: {cls.USER_TOKENS_FILE}")

4. Create .env File for Local Development

Add this to your .env file:

FLASK_ENV=development
SECRET_KEY=your_secret_key
BASE_URL=http://localhost:6000
LOCAL_SECRET_PATH=./secrets

5. Local Environment Setup

Follow these steps to set up your local development environment:
	1.	Create a Virtual Environment:

python3 -m venv venv


	2.	Activate the Virtual Environment:
	•	Linux/Mac:

source venv/bin/activate


	•	Windows:

venv\Scripts\activate


	3.	Install Dependencies:

pip install -r requirements.txt


	4.	Create Secrets Directory and Files:

mkdir secrets
echo '{"user1": "token_for_user1"}' > secrets/user_tokens.json


	5.	Run Flask:

export FLASK_APP=app.routes
export FLASK_ENV=development
flask run

6. Add Instructions to README

Example README.md:

# Flask JIRA Sync Service

## Setup Local Environment

1. Clone the repository:
   ```bash
   git clone https://github.com/your-repo.git
   cd your-repo

	2.	Create and activate a virtual environment:

python3 -m venv venv
source venv/bin/activate


	3.	Install dependencies:

pip install -r requirements.txt


	4.	Create a .env file in the project root:

FLASK_ENV=development
SECRET_KEY=your_secret_key
BASE_URL=http://localhost:6000
LOCAL_SECRET_PATH=./secrets


	5.	Create a secrets/user_tokens.json file:

{
    "user1": "token_for_user1",
    "user2": "token_for_user2"
}


	6.	Run the Flask app:

flask run


	7.	Access the app at http://localhost:5000.

Testing the API with cURL

Fetch JIRA Issues

curl -X GET http://localhost:5000/api/jira/issues

Sync Issues

curl -X POST http://localhost:5000/api/jira/sync

Update Comment Interactively

curl -X POST http://localhost:5000/api/jira/update_comment \
     -H "Content-Type: application/json" \
     -d '{"jira_number": "JIRA-123", "comment": "Updated comment"}'

---

### **7. Test with cURL**
Use the provided curl commands in the `README.md` to test the APIs.

---

### **8. Verify Deployment in Kube**
To ensure the `.env` file is ignored and the secrets are safely handled in Kubernetes:
- In Kubernetes, mount secrets directly from ConfigMaps or Secrets.
- The local `.env` and `secrets` directory should only be used in development.

This approach keeps your local setup simple and your production deployment secure.

Here is a comprehensive README.md for your project:

Flask JIRA Sync Service

This project provides a Flask-based API to synchronize JIRA issues with a database. It also includes interactive HTML templates for updating and resolving issues, fetching data from multiple environments, and visualizing data in a user-friendly format.

Features
	•	Synchronizes JIRA issues with prod and quality databases.
	•	Provides HTML reports (detailed_results.html, interactive.html) with styled tables and editable fields.
	•	Supports updating comments and resolving issues interactively.
	•	Environment-aware setup with local .env support for development and Kubernetes secrets for production.

Setup Instructions

1. Clone the Repository

git clone https://github.com/your-repo/flask-jira-sync.git
cd flask-jira-sync

2. Local Environment Setup

Step 1: Create a Virtual Environment
	•	Linux/Mac:

python3 -m venv venv
source venv/bin/activate


	•	Windows:

python -m venv venv
venv\Scripts\activate



Step 2: Install Dependencies

pip install -r requirements.txt

Step 3: Create the .env File

Create a .env file in the project root:

FLASK_ENV=development
SECRET_KEY=your_secret_key
BASE_URL=http://localhost:6000
LOCAL_SECRET_PATH=./secrets

Step 4: Create the secrets/user_tokens.json File

Create a secrets/ directory and a user_tokens.json file:

mkdir secrets
echo '{"user1": "token_for_user1", "user2": "token_for_user2"}' > secrets/user_tokens.json

3. Running the Application

Run Flask
	1.	Set Flask environment variables:

export FLASK_APP=app.routes
export FLASK_ENV=development


	2.	Start the Flask application:

flask run


	3.	Access the application at http://localhost:5000.

4. Testing with cURL

Use the following commands to test the API:

Fetch JIRA Issues

curl -X GET http://localhost:5000/api/jira/issues

Sync Issues

curl -X POST http://localhost:5000/api/jira/sync

Update a Comment

curl -X POST http://localhost:5000/api/jira/update_comment \
     -H "Content-Type: application/json" \
     -d '{"jira_number": "JIRA-123", "comment": "Updated comment"}'

Resolve an Issue

curl -X POST http://localhost:5000/api/jira/resolve \
     -H "Content-Type: application/json" \
     -d '{"jira_number": "JIRA-123", "resolution": "Done"}'

5. Deployment to Kubernetes

Docker Image
	1.	Build the Docker image:

docker build -t your-image-name .


	2.	Push the image to your registry:

docker push your-image-name



Helm Chart
	1.	Package the Helm chart:

helm package helm/


	2.	Push to your Helm repository (e.g., Artifactory).

Kubernetes Deployment
	1.	Apply the Kubernetes manifests:

kubectl apply -f kube/deployment.yaml



ArgoCD Integration
	1.	Create an ArgoCD application manifest to deploy the Helm chart.
	2.	Automate the pipeline using Bamboo with steps for:
	•	Building and pushing the Docker image.
	•	Uploading the Helm chart to Artifactory.
	•	Deploying via ArgoCD.

6. Project Structure

project/
├── app/
│   ├── __init__.py
│   ├── settings.py
│   ├── routes.py
│   ├── db_ops.py
│   ├── jira_ops.py
│   ├── templates/
│   │   ├── detailed_results.html
│   │   ├── interactive.html
│   │   ├── summary.html
│   │   └── db_summary.html
│   └── static/
│       └── style.css
├── secrets/
│   └── user_tokens.json
├── .env
├── .gitignore
├── Dockerfile
├── requirements.txt
├── README.md
├── helm/
│   ├── Chart.yaml
│   ├── values.yaml
│   └── templates/
├── kube/
│   ├── deployment.yaml
│   ├── service.yaml
│   └── ingress.yaml

7. Notes

Environment Variables
	•	Development: .env file is used.
	•	Production: Secrets are stored in Kubernetes.

Security
	•	Add sensitive files like .env and secrets/ to .gitignore.

Styling
	•	All HTML templates are styled with style.css in the static/ directory.

Interactive Updates
	•	HTML templates include forms for updating comments and resolving issues. They dynamically call the corresponding Flask routes.

8. Future Enhancements
	•	Add authentication and authorization for API routes.
	•	Implement more detailed error handling.
	•	Integrate monitoring tools like Prometheus or Grafana for Kubernetes.

This README.md provides a full guide for setting up, running, and deploying your Flask JIRA Sync Service. Let me know if you’d like any refinements or additional details!