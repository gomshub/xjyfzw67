text = "Hello"
modified_text = text[1:]  # Removes the first character
print(modified_text)  # Output: "ello"

Python Code to Process job-name, Extract Related Data, and Insert into DB

This script will:
	1.	Extract job-name from JIRA summary while syncing issues to the DB.
	2.	Remove the first character from job-name.
	3.	Check the modified job-name in another reference table to get job_description and task_name.
	4.	Insert job-name, job_description, and task_name into the Issues table.
	5.	Use these fields in email summary service, list issues HTML, and interactive JIRA HTML.

1Ô∏è‚É£ Extract & Process job-name from Summary

import re
import psycopg2  # or cx_Oracle for Oracle DB
from flask import Flask, render_template

app = Flask(__name__)

# Database Configuration
DB_CONFIG = {
    "host": "db-host",
    "dbname": "your_db",
    "user": "your_user",
    "password": "your_password",
}

# Connect to DB
def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)

# Function to Extract Job Name from Summary
def extract_job_name(summary):
    match = re.search(r'Job-([A-Za-z0-9_-]+)', summary)
    if match:
        return match.group(1)[1:]  # Remove first character
    return None

# Function to Fetch Related Job Details
def get_job_details(job_name):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute(
        "SELECT job_description, task_name FROM job_reference_table WHERE job_name = %s",
        (job_name,),
    )
    result = cursor.fetchone()

    cursor.close()
    conn.close()

    return result if result else (None, None)

# Insert Issue into DB
def insert_issue(issue_id, summary, job_name, job_desc, task_name):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute(
        "INSERT INTO issues (issue_id, summary, job_name, job_description, task_name) VALUES (%s, %s, %s, %s, %s)",
        (issue_id, summary, job_name, job_desc, task_name),
    )

    conn.commit()
    cursor.close()
    conn.close()

# Main Function to Process Issues from JIRA API
def process_issues(jira_issues):
    for issue in jira_issues:
        issue_id = issue.get("id")
        summary = issue.get("summary")

        job_name = extract_job_name(summary)
        if job_name:
            job_desc, task_name = get_job_details(job_name)
            insert_issue(issue_id, summary, job_name, job_desc, task_name)

2Ô∏è‚É£ Use Job Details in HTML Templates

üîπ Email Summary (email_summary.html)

<table>
  <tr><th>Issue ID</th><th>Summary</th><th>Job Name</th><th>Description</th><th>Task</th></tr>
  {% for issue in issues %}
  <tr>
    <td>{{ issue.issue_id }}</td>
    <td>{{ issue.summary }}</td>
    <td>{{ issue.job_name }}</td>
    <td>{{ issue.job_description }}</td>
    <td>{{ issue.task_name }}</td>
  </tr>
  {% endfor %}
</table>

üîπ List Issues (list_issues.html)

{% for issue in issues %}
  <p><strong>{{ issue.job_name }}</strong>: {{ issue.job_description }} (Task: {{ issue.task_name }})</p>
{% endfor %}

üîπ Interactive JIRA (interactive_jira.html)

<select name="issue">
  {% for issue in issues %}
    <option value="{{ issue.issue_id }}">{{ issue.job_name }} - {{ issue.task_name }}</option>
  {% endfor %}
</select>

3Ô∏è‚É£ Integrate into Flask Service

@app.route("/list-issues")
def list_issues():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT issue_id, summary, job_name, job_description, task_name FROM issues")
    issues = [
        {"issue_id": row[0], "summary": row[1], "job_name": row[2], "job_description": row[3], "task_name": row[4]}
        for row in cursor.fetchall()
    ]

    cursor.close()
    conn.close()
    return render_template("list_issues.html", issues=issues)

@app.route("/interactive-jira")
def interactive_jira():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT issue_id, job_name, task_name FROM issues")
    issues = [{"issue_id": row[0], "job_name": row[1], "task_name": row[2]} for row in cursor.fetchall()]

    cursor.close()
    conn.close()
    return render_template("interactive_jira.html", issues=issues)

üîπ Summary

‚úÖ Extract job-name from JIRA summary
‚úÖ Remove first character from job-name
‚úÖ Lookup job description & task name from job_reference_table
‚úÖ Insert into issues table while syncing JIRA issues
‚úÖ Use job_name, job_description, and task_name in:
	‚Ä¢	Email Summary
	‚Ä¢	List Issues
	‚Ä¢	Interactive JIRA

Let me know if you need any modifications! üöÄ