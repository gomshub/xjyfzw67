
You can redirect the output of kubectl commands to a file using > or tee. Here are a few ways to save Kubernetes resource capacity details into a file:

1. Save Node Capacity Details

kubectl describe nodes > cluster_capacity.txt

or

kubectl get nodes -o custom-columns="NAME:.metadata.name,CPU:.status.capacity.cpu,MEMORY:.status.capacity.memory" > cluster_capacity.txt

2. Save Allocatable Resources

kubectl get nodes -o jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.status.allocatable.cpu}{'\t'}{.status.allocatable.memory}{'\n'}{end}" > allocatable_resources.txt

3. Save Real-Time Usage Metrics (if metrics-server is installed)

kubectl top nodes > node_usage.txt
kubectl top pods --all-namespaces > pod_usage.txt

4. Save All Resource Requests & Limits

kubectl get pod -A -o jsonpath="{range .items[*]}{.metadata.namespace}{'\t'}{.metadata.name}{'\t'}{.spec.containers[*].resources}{'\n'}{end}" > resource_requests.txt

5. Using tee to Save and Display Output

kubectl describe nodes | tee cluster_details.txt

This saves the output to cluster_details.txt while also displaying it in the terminal.

Would you like a script to automate this?

=#=#

You can use the following kubectl command to get cluster information in YAML format:

1️⃣ Get Full Cluster Info in YAML

kubectl cluster-info dump > cluster-info.yaml

	•	This dumps detailed cluster information into a YAML file (cluster-info.yaml).
	•	It includes kube-system components, configurations, and status.

2️⃣ Get Node Allocatable Resources in YAML

If you want allocatable CPU/Memory for nodes:

kubectl get nodes -o yaml > nodes-info.yaml

	•	This will give details about CPU, memory, and capacity per node.

3️⃣ Get Only Node Resource Summary

If you only need a quick look at node resources, run:

kubectl describe nodes > nodes-summary.txt

	•	This shows allocatable resources, capacity, and pod limits for each node.

Would you like help interpreting the YAML output?