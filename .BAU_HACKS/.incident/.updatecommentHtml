Here’s the solution to implement two services:
	1.	Service to get jira_number, job_number, and update_comment values from the database and return an HTML file.
	2.	Interactive service to ask whether to update update_comment into JIRA via API for each jira_number.

HTML Template (interactive_results.html)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive JIRA Comments</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f7f7f7;
            color: #333;
        }
        header {
            background-color: #003366;
            color: white;
            padding: 20px;
            text-align: center;
        }
        h1 {
            margin: 0;
        }
        table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            text-align: center;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
        }
        th {
            background-color: #003366;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .action-btn {
            padding: 6px 12px;
            margin: 4px;
            border: none;
            color: white;
            background-color: #007bff;
            cursor: pointer;
        }
        .action-btn:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <header>
        <h1>Interactive JIRA Update Comments</h1>
    </header>
    <table>
        <thead>
            <tr>
                <th>JIRA Number</th>
                <th>Job Number</th>
                <th>Update Comment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for issue in issues %}
            <tr>
                <td>
                    <a href="https://jira.example.com/browse/{{ issue['jira_number'] }}" target="_blank">
                        {{ issue['jira_number'] }}
                    </a>
                </td>
                <td>{{ issue['job_number'] }}</td>
                <td>{{ issue['update_comment'] }}</td>
                <td>
                    <button class="action-btn" onclick="handleAction('{{ issue['jira_number'] }}', 'yes')">Yes</button>
                    <button class="action-btn" onclick="handleAction('{{ issue['jira_number'] }}', 'no')">No</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script>
        function handleAction(jiraNumber, action) {
            fetch('/update_comment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ jira_number: jiraNumber, action: action }),
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                location.reload();
            })
            .catch(err => console.error(err));
        }
    </script>
</body>
</html>

Database Operations (db_operations.py)

from jaydebeapi import connect
from settings import DB_CONFIG

def fetch_jira_update_data():
    """
    Fetch jira_number, job_number, and update_comment from the database.
    """
    query = "SELECT jira_number, job_number, update_comment FROM jira_issues"
    with connect(
        DB_CONFIG["driver"],
        DB_CONFIG["url"],
        [DB_CONFIG["username"], DB_CONFIG["password"]],
        DB_CONFIG["jar_path"],
    ) as conn:
        with conn.cursor() as cursor:
            cursor.execute(query)
            result = cursor.fetchall()
    return [{"jira_number": row[0], "job_number": row[1], "update_comment": row[2]} for row in result]

def mark_comment_updated(jira_number):
    """
    Mark the update_comment for a given JIRA as updated.
    """
    query = "UPDATE jira_issues SET update_comment = NULL WHERE jira_number = ?"
    with connect(
        DB_CONFIG["driver"],
        DB_CONFIG["url"],
        [DB_CONFIG["username"], DB_CONFIG["password"]],
        DB_CONFIG["jar_path"],
    ) as conn:
        with conn.cursor() as cursor:
            cursor.execute(query, [jira_number])
            conn.commit()

Routes (routes.py)

from flask import Flask, request, jsonify, render_template
from db_operations import fetch_jira_update_data, mark_comment_updated
import requests

app = Flask(__name__)

@app.route('/fetch_issues', methods=['GET'])
def fetch_issues():
    """
    Fetch issues from the database and return as an HTML file.
    """
    issues = fetch_jira_update_data()
    return render_template('interactive_results.html', issues=issues)

@app.route('/update_comment', methods=['POST'])
def update_comment():
    """
    Handle the action to update a comment for a JIRA issue.
    """
    data = request.json
    jira_number = data.get("jira_number")
    action = data.get("action")

    if action == "yes":
        # Simulate an API call to update the comment
        update_comment_api(jira_number)
        mark_comment_updated(jira_number)
        return jsonify({"message": f"Comment updated for JIRA: {jira_number}"})
    elif action == "no":
        return jsonify({"message": f"No action taken for JIRA: {jira_number}"})
    else:
        return jsonify({"message": "Invalid action"}), 400

def update_comment_api(jira_number):
    """
    Simulate API call to update JIRA comment.
    """
    url = f"https://jira.example.com/rest/api/2/issue/{jira_number}/comment"
    headers = {"Authorization": "Bearer <your_token>", "Content-Type": "application/json"}
    payload = {"body": "This comment has been updated via the interactive service."}
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 201:
        print(f"Comment updated successfully for JIRA: {jira_number}")
    else:
        print(f"Failed to update comment for JIRA: {jira_number}, Status Code: {response.status_code}")

Settings (settings.py)

DB_CONFIG = {
    "driver": "oracle.jdbc.OracleDriver",
    "url": "jdbc:oracle:thin:@<host>:<port>/<service>",
    "username": "<username>",
    "password": "<password>",
    "jar_path": "/path/to/ojdbc8.jar"
}

Workflow
	1.	/fetch_issues:
	•	Fetches jira_number, job_number, and update_comment from the database and renders an HTML file.
	•	Displays the issues in a table with interactive buttons for “Yes” (update comment) and “No” (no action).
	2.	/update_comment:
	•	Handles the action for each JIRA issue.
	•	If “Yes” is clicked:
	•	Updates the comment in JIRA via the API.
	•	Marks the update_comment column in the database as NULL.

Run Flask App

export FLASK_APP=routes.py
flask run

Visit:
	•	/fetch_issues to see the HTML file.
	•	Actions are handled interactively through the /update_comment API.