Using a browser extension is a secure and practical way to enable interactions between your HTML file and a system-level command, such as executing a .bat script or making a curl request. Below is a step-by-step guide to create a Chrome extension to accomplish this.

Overview
	1.	Create a Chrome extension.
	2.	Add a background script to handle the communication between the HTML file and the extension.
	3.	Use the extension to invoke a local middleware or trigger the .bat script.

Step 1: Create the Chrome Extension Directory
	1.	Create a directory called jira_extension.
	2.	Inside this directory, create the following files:
	•	manifest.json
	•	popup.html
	•	popup.js
	•	background.js

Step 2: Create manifest.json

This file defines the metadata for the Chrome extension.

{
  "manifest_version": 3,
  "name": "JIRA Interactive Extension",
  "version": "1.0",
  "description": "Update JIRA comments and resolve status directly from a local HTML page.",
  "permissions": ["nativeMessaging", "scripting", "activeTab"],
  "host_permissions": ["http://*/*", "https://*/*"],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": "icon.png"
  }
}

Step 3: Create popup.html

This file provides the user interface for interacting with the extension.

<!DOCTYPE html>
<html>
<head>
    <title>JIRA Interactive</title>
    <script src="popup.js" defer></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 10px;
        }
        input, button {
            margin: 5px 0;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h3>JIRA Interactive</h3>
    <label for="jiraNumber">JIRA Number:</label>
    <input type="text" id="jiraNumber" placeholder="Enter JIRA number"><br>
    <label for="comment">Comment:</label>
    <input type="text" id="comment" placeholder="Enter your comment"><br>
    <button id="updateComment">Update Comment</button>
    <p id="status"></p>
</body>
</html>

Step 4: Create popup.js

This script sends the JIRA number and comment to the extension’s background script.

document.getElementById("updateComment").addEventListener("click", () => {
    const jiraNumber = document.getElementById("jiraNumber").value;
    const comment = document.getElementById("comment").value;

    if (!jiraNumber || !comment) {
        document.getElementById("status").innerText = "Please provide both JIRA number and comment.";
        return;
    }

    chrome.runtime.sendMessage(
        { action: "update_comment", jiraNumber, comment },
        (response) => {
            if (response && response.status === "success") {
                document.getElementById("status").innerText = "Comment updated successfully!";
            } else {
                document.getElementById("status").innerText = "Failed to update comment.";
            }
        }
    );
});

Step 5: Create background.js

This file handles the background tasks and executes the .bat script or middleware request.

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "update_comment") {
        const { jiraNumber, comment } = message;

        // Call the .bat script using a Native Messaging Host or middleware
        fetch(`http://localhost:6000/update_comment`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ jira_number: jiraNumber, comment })
        })
            .then((response) => response.json())
            .then((data) => sendResponse({ status: "success", data }))
            .catch((error) => sendResponse({ status: "error", error }));

        // Required for asynchronous response
        return true;
    }
});

Step 6: Install and Test the Extension
	1.	Open Chrome and go to chrome://extensions/.
	2.	Enable Developer mode (top-right corner).
	3.	Click Load unpacked and select the jira_extension directory.
	4.	The extension will appear in the toolbar.

Step 7: Call the Extension from Your HTML File

You can use the extension’s ID to interact with it from your HTML page:

<!DOCTYPE html>
<html>
<head>
    <title>JIRA Update</title>
</head>
<body>
    <h3>JIRA Interactive Update</h3>
    <label for="jiraNumber">JIRA Number:</label>
    <input type="text" id="jiraNumber" placeholder="Enter JIRA number"><br>
    <label for="comment">Comment:</label>
    <input type="text" id="comment" placeholder="Enter your comment"><br>
    <button onclick="sendMessage()">Update Comment</button>

    <script>
        function sendMessage() {
            const jiraNumber = document.getElementById("jiraNumber").value;
            const comment = document.getElementById("comment").value;

            if (!jiraNumber || !comment) {
                alert("Please provide both JIRA number and comment.");
                return;
            }

            chrome.runtime.sendMessage(
                { action: "update_comment", jiraNumber, comment },
                (response) => {
                    if (response && response.status === "success") {
                        alert("Comment updated successfully!");
                    } else {
                        alert("Failed to update comment.");
                    }
                }
            );
        }
    </script>
</body>
</html>

Alternative: Use Middleware

If the above approach is too complex or restricted, you can set up a simple middleware using Python or Node.js to handle the curl requests locally and call it from the browser.

Security Notes
	•	Native Messaging Host is an alternative to run .bat scripts directly from the extension, but it’s more complex to set up.
	•	Extensions cannot directly execute .bat scripts for security reasons.

Let me know if you’d like more details on any specific part!