To ensure that update_comment() and resolve_status() functions work properly after dynamically refreshing the JIRA table, we need to re-attach event handlers to the updated buttons.

1. Update jira_table.html
	•	Include collapsible comments, update, and resolve buttons.
	•	Add event handlers to reattach JavaScript functions after AJAX refresh.

<!-- templates/jira_table.html -->
<table>
  <thead>
    <tr>
      <th>JIRA Number</th>
      <th>Summary</th>
      <th>Status</th>
      <th>Job Name</th>
      <th>Comments</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {% for issue in issues %}
    <tr>
      <td>{{ issue.jira_number }}</td>
      <td>{{ issue.summary }}</td>
      <td>{{ issue.status }}</td>
      <td>{{ issue.job_name }}</td>
      <td>
        {% for comment in issue.comments %}
          <button class="collapsible">
            {{ comment.order }}. {{ comment.date_time }}
          </button>
          <div class="content">
            <p>{{ comment.comment }}</p>
          </div>
        {% endfor %}
      </td>
      <td>
        <button class="update-btn" data-jira="{{ issue.jira_number }}">Update Comment</button>
        <button class="resolve-btn" data-jira="{{ issue.jira_number }}">Resolve Status</button>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

2. Modify interactive_jira.html

Add JavaScript to handle:
	1.	Collapsible comments
	2.	Update and Resolve buttons
	3.	Re-attaching event handlers after AJAX refresh

<!-- templates/interactive_jira.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Interactive JIRA</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    .button-container { margin-bottom: 10px; }
    .collapsible { background-color: #eee; cursor: pointer; padding: 5px; border: none; text-align: left; width: 100%; }
    .content { display: none; padding: 5px; background-color: #f9f9f9; }
  </style>
  <script>
    function attachEventHandlers() {
        // Expand/collapse comments
        $(".collapsible").off("click").on("click", function() {
            $(this).next(".content").toggle();
        });

        // Update Comment button
        $(".update-btn").off("click").on("click", function() {
            var jiraNumber = $(this).data("jira");
            var newComment = prompt("Enter new comment for " + jiraNumber + ":");
            if (newComment) {
                $.ajax({
                    url: "/update_comment",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ "jira_number": jiraNumber, "comment": newComment }),
                    success: function(response) {
                        alert("Comment updated!");
                        refreshTable(); // Refresh table to fetch updated comments
                    },
                    error: function() {
                        alert("Failed to update comment.");
                    }
                });
            }
        });

        // Resolve Status button
        $(".resolve-btn").off("click").on("click", function() {
            var jiraNumber = $(this).data("jira");
            if (confirm("Are you sure you want to resolve " + jiraNumber + "?")) {
                $.ajax({
                    url: "/resolve_status",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ "jira_number": jiraNumber }),
                    success: function(response) {
                        alert("Issue resolved!");
                        refreshTable(); // Refresh table to reflect the status change
                    },
                    error: function() {
                        alert("Failed to resolve issue.");
                    }
                });
            }
        });
    }

    function refreshTable() {
        $.ajax({
            url: "/refresh_jira_table",
            type: "GET",
            success: function(data) {
                $("#jira-table-container").html(data);
                attachEventHandlers(); // Reattach event handlers after refresh
            },
            error: function() {
                alert("Failed to refresh JIRA data.");
            }
        });
    }

    $(document).ready(function() {
        attachEventHandlers(); // Attach handlers on page load
    });
  </script>
</head>
<body>
  <h1>Interactive JIRA Service</h1>

  <div class="button-container">
    <button onclick="refreshTable()">Refresh Page</button>
  </div>

  <div id="jira-table-container">
    {% include 'jira_table.html' %}
  </div>
</body>
</html>

3. Update routes.py

Ensure correct routing for:
	•	Updating comments (/update_comment)
	•	Resolving issues (/resolve_status)

# routes.py
from flask import Flask, render_template, request, jsonify
from jira_ops import fetch_jira_issues, update_jira_comment, resolve_jira_issue
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

@app.route('/interactive_jira', methods=['GET'])
def interactive_jira():
    """
    Fetch latest JIRA issues and render interactive_jira.html
    """
    try:
        issues = fetch_jira_issues()
        return render_template("interactive_jira.html", issues=issues)
    except Exception as e:
        logging.error(f"Error in interactive_jira: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/refresh_jira_table', methods=['GET'])
def refresh_jira_table():
    """
    Fetch latest JIRA issues and return only the table HTML (for AJAX refresh)
    """
    try:
        issues = fetch_jira_issues()
        return render_template("jira_table.html", issues=issues)
    except Exception as e:
        logging.error(f"Error in refresh_jira_table: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/update_comment', methods=['POST'])
def update_comment():
    """
    Update a JIRA issue's comment
    """
    try:
        data = request.json
        jira_number = data.get("jira_number")
        comment = data.get("comment")
        update_jira_comment(jira_number, comment)
        return jsonify({"success": True, "message": "Comment updated"})
    except Exception as e:
        logging.error(f"Error in update_comment: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/resolve_status', methods=['POST'])
def resolve_status():
    """
    Resolve a JIRA issue
    """
    try:
        data = request.json
        jira_number = data.get("jira_number")
        resolve_jira_issue(jira_number)
        return jsonify({"success": True, "message": "Issue resolved"})
    except Exception as e:
        logging.error(f"Error in resolve_status: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)

4. Update jira_ops.py

Ensure it supports updating comments and resolving issues.

# jira_ops.py
import logging
import requests

JIRA_API_URL = "https://your-jira-instance/rest/api/2/issue"

def fetch_jira_issues():
    """
    Fetch JIRA issues from API
    """
    response = requests.get(f"{JIRA_API_URL}/search?jql=YOUR_QUERY", auth=("user", "api_token"))
    return response.json()["issues"]

def update_jira_comment(jira_number, comment):
    """
    Add a comment to JIRA issue
    """
    url = f"{JIRA_API_URL}/{jira_number}/comment"
    data = {"body": comment}
    response = requests.post(url, json=data, auth=("user", "api_token"))
    response.raise_for_status()

def resolve_jira_issue(jira_number):
    """
    Change JIRA status to resolved
    """
    url = f"{JIRA_API_URL}/{jira_number}/transitions"
    data = {"transition": {"id": "5"}}  # Change '5' to your resolved transition ID
    response = requests.post(url, json=data, auth=("user", "api_token"))
    response.raise_for_status()

Final Notes

✅ Refresh Page Button now dynamically updates the entire table.
✅ Collapsible Comments show author & timestamp first, full comment on expand.
✅ Update & Resolve Buttons reattach event handlers after AJAX refresh.

Let me know if you need any further refinements!