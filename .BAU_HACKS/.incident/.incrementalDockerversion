
üîπ Check for Successful Docker Push & Capture Success Message

After running docker push, you can capture the success message and act accordingly.

1Ô∏è‚É£ Capture Docker Push Output and Check Success

IMAGE_NAME="artifactory.company.com/docker-repo/my-app"
IMAGE_TAG="v1.0.1"

# Run docker push and capture output
PUSH_OUTPUT=$(docker push $IMAGE_NAME:$IMAGE_TAG 2>&1)

# Check if the push was successful
if echo "$PUSH_OUTPUT" | grep -q "latest: digest:"; then
    echo "‚úÖ Docker image pushed successfully: $IMAGE_NAME:$IMAGE_TAG"
else
    echo "‚ùå Docker push failed. Check logs."
    echo "$PUSH_OUTPUT"
    exit 1
fi

2Ô∏è‚É£ Alternative: Check Image in the Registry After Push

If the registry does not provide a clear success message, verify the image exists:

if docker manifest inspect $IMAGE_NAME:$IMAGE_TAG >/dev/null 2>&1; then
    echo "‚úÖ Docker push successful: $IMAGE_NAME:$IMAGE_TAG is available in the registry."
else
    echo "‚ùå Docker push failed. Image not found in the registry."
    exit 1
fi

This ensures that the Docker image was pushed successfully before updating Helm charts or GitOps configurations. üöÄ



=#=#=
If you‚Äôre not sure about the exact registry URL, you can check it using Docker itself.

üîπ 1. Find the Docker Registry URL

Try listing available images from your registry using:

docker info | grep "Registry"

or

docker system info | grep "Registry"

This will show the default registry URL that Docker uses.

üîπ 2. Get Image List Without Knowing URL

If you have access to the Docker CLI, you can list available images without needing to manually construct the curl URL:

docker search cr.example.com/test/images/

or

docker image ls cr.example.com/test/images/

üîπ 3. Automatically Detect the Registry URL

If you‚Äôre working with an internal registry (like Artifactory, Harbor, Nexus), you can extract the correct API URL:

REGISTRY="cr.example.com"
IMAGE_PATH="test/images/image_name"

# Check if API works for v2
curl -s -u "$USERNAME:$PASSWORD" "https://$REGISTRY/v2/_catalog"

	‚Ä¢	If this command fails, try without https://:

curl -s -u "$USERNAME:$PASSWORD" "http://$REGISTRY/v2/_catalog"

üîπ 4. Debug Registry API

If your registry doesn‚Äôt support v2/_catalog, you may have a custom path.
Try hitting the root API:

curl -s -u "$USERNAME:$PASSWORD" "https://$REGISTRY/"

If it returns JSON or XML, look for registry-related endpoints.

üîπ 5. Validate the API Endpoint

If you‚Äôre still unsure, try listing a specific image:

curl -s -u "$USERNAME:$PASSWORD" "https://$REGISTRY/v2/$IMAGE_PATH/tags/list"

If it fails, try:

curl -s -u "$USERNAME:$PASSWORD" "http://$REGISTRY/v2/$IMAGE_PATH/tags/list"

üéØ Summary
	‚Ä¢	‚úÖ Check registry URL using docker info
	‚Ä¢	‚úÖ List images using docker search or docker image ls
	‚Ä¢	‚úÖ Test different API endpoints using curl
	‚Ä¢	‚úÖ Try both https:// and http:// if unsure

Let me know if you need more help! üöÄ


You can use Docker CLI to list images and fetch the latest version without using curl.

1Ô∏è‚É£ Login to the Docker Registry

First, ensure you‚Äôre logged in to the internal Docker registry:

docker login cr.example.com

Enter your username and password when prompted.

2Ô∏è‚É£ List All Available Images in the Registry

To see all images available in your registry:

docker image ls cr.example.com/test/images/

If you don‚Äôt see the images, try:

docker images | grep "cr.example.com/test/images"

3Ô∏è‚É£ Fetch the Latest Version of an Image

To get the latest tag of a specific image:

docker images --format "{{.Repository}}:{{.Tag}}" | grep "cr.example.com/test/images/image_name" | sort -V | tail -n 1

This will:
	‚Ä¢	Filter the images matching image_name
	‚Ä¢	Sort by version
	‚Ä¢	Return the latest version (last entry)

4Ô∏è‚É£ Pull the Latest Version

Once you have the latest version, pull it using:

docker pull cr.example.com/test/images/image_name:latest

If latest is not tagged properly, use:

docker pull $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "cr.example.com/test/images/image_name" | sort -V | tail -n 1)

üéØ Summary
	‚Ä¢	‚úÖ Login to the registry
	‚Ä¢	‚úÖ List images using docker images
	‚Ä¢	‚úÖ Get latest version using grep and sort
	‚Ä¢	‚úÖ Pull latest image automatically

Let me know if you need further refinements! üöÄ


To fetch the image version from the GitOps repo for ArgoCD using curl, follow these steps:

üîπ 1. Fetch Image Version from values.yaml (GitOps Repo)

üöÄ Using curl to Retrieve Raw File Content

If your GitOps repo is hosted on GitHub, GitLab, or Bitbucket, you can retrieve the values.yaml file using curl.

# Define the GitOps repo URL (Replace with actual URL)
GITOPS_URL="https://raw.githubusercontent.com/company/gitops-repo/main/services/my-service/values.yaml"

# Fetch values.yaml content
curl -s $GITOPS_URL | grep "image:"

üîπ 2. Extract the Image Version Using awk or sed

Since values.yaml contains:

image: "artifactory.company.com/my-service:20240201010101"

You can extract the image version using:

IMAGE_TAG=$(curl -s $GITOPS_URL | grep "image:" | awk -F ':' '{print $NF}' | tr -d '"')

echo "‚úÖ Latest image version: $IMAGE_TAG"

	üîπ Example Output: ‚úÖ Latest image version: 20240201010101

üîπ 3. Fetch Helm Chart Version from Chart.yaml

If you need the Helm Chart version from Chart.yaml:

CHART_URL="https://raw.githubusercontent.com/company/gitops-repo/main/services/my-service/Chart.yaml"

CHART_VERSION=$(curl -s $CHART_URL | grep "version:" | awk '{print $2}')

echo "‚úÖ Helm Chart version: $CHART_VERSION"

üîπ 4. Use Image Version in CI/CD for Deployment

You can now use $IMAGE_TAG in Bamboo CI/CD, Helm upgrade, or Docker pull.

üîπ Example: Deploy using Helm

helm upgrade my-service oci://artifactory.company.com/helm-charts \
  --set image="artifactory.company.com/my-service:$IMAGE_TAG"

üéØ Summary
	‚Ä¢	‚úÖ Retrieve values.yaml using curl
	‚Ä¢	‚úÖ Extract the latest image version
	‚Ä¢	‚úÖ Retrieve Chart.yaml for Helm version
	‚Ä¢	‚úÖ Use it in Helm upgrade or Kubernetes deployment

Let me know if you need additional tweaks! üöÄ


#!/bin/bash

# Define Image Repository Path
IMAGE_REPO="cr.example.com/images/image_name"

# Get the latest tag from the local Docker images
LATEST_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "$IMAGE_REPO" | awk -F: '{print $2}' | sort -V | tail -n1)

# If no tag is found, start with a default
if [[ -z "$LATEST_TAG" ]]; then
    NEW_TAG="1.0.0"
else
    # Extract Major.Minor.Patch version (assumes semantic versioning)
    MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
    MINOR=$(echo $LATEST_TAG | cut -d. -f2)
    PATCH=$(echo $LATEST_TAG | cut -d. -f3)

    # Increment the Patch version
    NEW_PATCH=$((PATCH + 1))
    NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
fi

echo "Latest Tag: $LATEST_TAG"
echo "New Tag: $NEW_TAG"

# Build and tag the new image
docker build -t "$IMAGE_REPO:$NEW_TAG" .

# Push the new image
docker push "$IMAGE_REPO:$NEW_TAG"



#!/bin/bash

IMAGE_NAME="your-registry.com/your-image"

# List all images matching the IMAGE_NAME
echo "Available images for $IMAGE_NAME:"
docker images | grep "$IMAGE_NAME"

# Fetch the latest tag by sorting versions
LATEST_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "$IMAGE_NAME" | sort -V | tail -n 1)

echo "Latest image found: $LATEST_TAG"

# Pull the latest image if found
if [ -n "$LATEST_TAG" ]; then
    docker pull "$LATEST_TAG"
else
    echo "No image found for $IMAGE_NAME."
fi

====
#!/bin/bash

IMAGE_NAME="your-registry.com/your-image"
LATEST_TAG=$(docker images --format "{{.Tag}}" $IMAGE_NAME | sort -V | tail -n 1)

if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "latest" ]]; then
    NEW_TAG="1.0.0"
else
    # Increment the patch version (1.0.0 ‚Üí 1.0.1)
    IFS='.' read -r major minor patch <<< "$LATEST_TAG"
    NEW_TAG="$major.$minor.$((patch + 1))"
fi

echo "Pulling latest image: $IMAGE_NAME:$LATEST_TAG"
docker pull $IMAGE_NAME:$LATEST_TAG

echo "New version will be: $NEW_TAG"

# Tag and push the new version
docker tag $IMAGE_NAME:$LATEST_TAG $IMAGE_NAME:$NEW_TAG
docker push $IMAGE_NAME:$NEW_TAG
===





curl -s "https://registry.example.com/v2/myimage/tags/list" | grep -o '"[0-9]*\.[0-9]*\.[0-9]*"' | sort -Vr | head -n1



üîÑ Implementing Incremental Image & Chart Versioning in Bamboo

To ensure each deployment has a unique version, we will:
‚úÖ Use incremental versioning for the Docker image and Helm chart.
‚úÖ Retrieve the last version, increment it, and update values.yaml.
‚úÖ Automate everything in Bamboo CI/CD.

1Ô∏è‚É£ Get the Last Version & Increment It

We will retrieve the latest version number, increment it, and apply it to:
üîπ Docker image version
üîπ Helm chart version

üìú Bash Script to Increment Version

#!/bin/bash

# Get the last image version from the registry
REGISTRY_URL="internal-registry.company.com/jira-app"
LATEST_VERSION=$(curl -s "https://$REGISTRY_URL/v2/jira-app/tags/list" | jq -r '.tags | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last')

# If no previous version, start from 1.0.0
if [[ -z "$LATEST_VERSION" ]]; then
    NEW_VERSION="1.0.0"
else
    # Increment the patch version (e.g., 1.0.0 -> 1.0.1)
    IFS='.' read -r major minor patch <<< "$LATEST_VERSION"
    NEW_VERSION="$major.$minor.$((patch+1))"
fi

echo "New Version: $NEW_VERSION"

# Export the new version for use in the Bamboo script
export NEW_VERSION

üìå This script ensures:
‚úÖ If no version exists, it starts from 1.0.0
‚úÖ If a version (e.g., 1.0.0) exists, it increments the patch version ‚Üí 1.0.1
‚úÖ You can modify it to increment major/minor versions if needed.

2Ô∏è‚É£ Build & Push the Docker Image

We now use the incremented version for our Docker image.

docker build -t internal-registry.company.com/jira-app:$NEW_VERSION .
docker push internal-registry.company.com/jira-app:$NEW_VERSION

üìå Ensures each image has a unique tag
‚úÖ No ‚Äúlatest‚Äù conflicts
‚úÖ Each deployment gets the correct version

3Ô∏è‚É£ Update Helm Chart Version

The Helm chart version must match the Docker image version.

# Update Helm chart version in Chart.yaml
sed -i "s/^version:.*/version: $NEW_VERSION/" helm-chart/Chart.yaml

# Update Docker image version in values.yaml
sed -i "s|tag:.*|tag: $NEW_VERSION|" helm-chart/values.yaml

üìå Ensures Helm & Docker versions stay in sync.

4Ô∏è‚É£ Package & Push the Helm Chart

helm package helm-chart --version $NEW_VERSION
helm push helm-chart-$NEW_VERSION.tgz internal-artifactory

üìå Each Helm chart has a unique version number
‚úÖ No overwriting of old charts
‚úÖ Ensures rollback capability

5Ô∏è‚É£ Update ArgoCD GitOps Repo

ArgoCD monitors a GitOps repository for changes in values.yaml.
We must update this file to trigger the deployment.

# Clone GitOps repo
git clone git@github.com:company/argo-cd-config.git
cd argo-cd-config

# Update values.yaml with the new image version
sed -i "s|tag:.*|tag: $NEW_VERSION|" "helm-chart/values.yaml"

# Commit and push changes
git add helm-chart/values.yaml
git commit -m "Updated Jira app image to $NEW_VERSION"
git push origin main

üìå ArgoCD will detect the change and deploy the new version automatically.

6Ô∏è‚É£ Trigger ArgoCD Sync (Optional)

ArgoCD automatically syncs, but we can manually trigger a sync.

curl -X POST "https://argocd.company.com/api/v1/applications/jira-app/sync" \
    -H "Authorization: Bearer $ARGOCD_JWT_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{"prune": false, "dryRun": false, "strategy": {"hook": {"force": true}}}'

üìå Ensures the deployment happens immediately instead of waiting for ArgoCD‚Äôs sync interval.

üìå Final Bamboo CI/CD Flow

Step	Action
1	Fetch the latest image version from the registry
2	Increment the version number (e.g., 1.0.1 ‚Üí 1.0.2)
3	Build & push the Docker image with new version
4	Update Helm chart version in Chart.yaml & values.yaml
5	Package & push the Helm chart
6	Update values.yaml in GitOps repo
7	Push changes to Git to trigger ArgoCD
8	ArgoCD deploys the new version automatically

üî• Full Bamboo Script

#!/bin/bash

set -e  # Exit on error

# Fetch latest version & increment it
REGISTRY_URL="internal-registry.company.com/jira-app"
LATEST_VERSION=$(curl -s "https://$REGISTRY_URL/v2/jira-app/tags/list" | jq -r '.tags | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last')

if [[ -z "$LATEST_VERSION" ]]; then
    NEW_VERSION="1.0.0"
else
    IFS='.' read -r major minor patch <<< "$LATEST_VERSION"
    NEW_VERSION="$major.$minor.$((patch+1))"
fi

echo "New Version: $NEW_VERSION"

# Login to internal Docker registry
echo "$DOCKER_PASSWORD" | docker login internal-registry.company.com -u "$DOCKER_USERNAME" --password-stdin

# Build & push Docker image
docker build -t internal-registry.company.com/jira-app:$NEW_VERSION .
docker push internal-registry.company.com/jira-app:$NEW_VERSION

# Update Helm chart version
sed -i "s/^version:.*/version: $NEW_VERSION/" helm-chart/Chart.yaml
sed -i "s|tag:.*|tag: $NEW_VERSION|" helm-chart/values.yaml

# Package & push Helm chart
helm package helm-chart --version $NEW_VERSION
helm push helm-chart-$NEW_VERSION.tgz internal-artifactory

# Update ArgoCD GitOps repo
git clone git@github.com:company/argo-cd-config.git
cd argo-cd-config
sed -i "s|tag:.*|tag: $NEW_VERSION|" "helm-chart/values.yaml"
git add helm-chart/values.yaml
git commit -m "Updated Jira app image to $NEW_VERSION"
git push origin main

# Trigger ArgoCD sync
curl -X POST "https://argocd.company.com/api/v1/applications/jira-app/sync" \
    -H "Authorization: Bearer $ARGOCD_JWT_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{"prune": false, "dryRun": false, "strategy": {"hook": {"force": true}}}'

echo "‚úÖ Deployment successful: Jira app $NEW_VERSION"

üéØ What‚Äôs Achieved?

‚úîÔ∏è Incremental versioning of Docker image & Helm chart.
‚úîÔ∏è Helm & Docker versions are always in sync.
‚úîÔ∏è Automated GitOps update ‚Üí triggers ArgoCD.
‚úîÔ∏è ArgoCD syncs & deploys the new version seamlessly.

Would you like further customizations? üöÄ