Here is the full set of files and automation steps required for deploying the service via Docker, Helm, Kubernetes, and ArgoCD. Additionally, the Bamboo plan script automates the image build and push, Helm chart packaging and pushing, and deployment using ArgoCD.

1. Dockerfile

# Use Python base image
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . .

# Expose the application port
EXPOSE 6000

# Start the application
CMD ["python", "app.py"]

2. Helm Chart

File structure:

helm-chart/
  ├── Chart.yaml
  ├── values.yaml
  ├── templates/
      ├── deployment.yaml
      ├── service.yaml
      ├── ingress.yaml

Chart.yaml

apiVersion: v2
name: jira-sync-service
description: A Helm chart for deploying Jira Sync Service
version: 1.0.0
appVersion: "1.0"

values.yaml

replicaCount: 2

image:
  repository: <your-docker-repo>/jira-sync-service
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 6000

ingress:
  enabled: true
  hosts:
    - host: jira-sync.local
      paths:
        - path: /
          pathType: Prefix

templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-sync-service
  labels:
    app: jira-sync-service
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: jira-sync-service
  template:
    metadata:
      labels:
        app: jira-sync-service
    spec:
      containers:
        - name: jira-sync-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: 6000
          envFrom:
            - secretRef:
                name: jira-sync-secrets

templates/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: jira-sync-service
spec:
  ports:
    - port: {{ .Values.service.port }}
      targetPort: 6000
  selector:
    app: jira-sync-service

templates/ingress.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jira-sync-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: {{ .Values.ingress.hosts[0].host }}
      http:
        paths:
          - path: {{ .Values.ingress.hosts[0].paths[0].path }}
            pathType: {{ .Values.ingress.hosts[0].paths[0].pathType }}
            backend:
              service:
                name: jira-sync-service
                port:
                  number: {{ .Values.service.port }}

3. Kubernetes Secrets

kube-secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: jira-sync-secrets
  namespace: default
type: Opaque
data:
  prod_db_url: <base64_encoded_prod_db_url>
  prod_db_password: <base64_encoded_prod_db_password>
  quality_db_url: <base64_encoded_quality_db_url>
  quality_db_password: <base64_encoded_quality_db_password>
  jira_url: <base64_encoded_jira_url>
  jira_api_token: <base64_encoded_jira_api_token>
  users_apitoken: <base64_encoded_users_apitoken_json>

Encode the values using echo -n 'value' | base64.

4. ArgoCD Application

argocd-application.yaml

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: jira-sync-service
  namespace: argocd
spec:
  project: default
  source:
    repoURL: <your-helm-chart-repo-url>
    targetRevision: HEAD
    path: helm-chart
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

5. Bamboo Plan Script

Bamboo Script

#!/bin/bash

# Set variables
DOCKER_REPO=<your-docker-repo>
DOCKER_IMAGE=$DOCKER_REPO/jira-sync-service
HELM_REPO=<your-helm-repo>
CHART_NAME=jira-sync-service

# Docker build and push
docker build -t $DOCKER_IMAGE:latest .
docker push $DOCKER_IMAGE:latest

# Helm package and push
helm package helm-chart/
helm cm-push helm-chart-1.0.0.tgz $HELM_REPO

# Apply Kubernetes secrets (optional)
kubectl apply -f kube-secrets.yaml

# Sync deployment via ArgoCD
kubectl apply -f argocd-application.yaml

echo "Deployment triggered successfully!"

Summary of Steps
	1.	Build Docker Image:
	•	Use the provided Dockerfile to build and push the application image to a container registry.
	2.	Create Helm Chart:
	•	The Helm chart is configured to deploy the application with appropriate settings (replica count, image details, and ingress).
	3.	Kubernetes Secrets:
	•	Store sensitive data like database credentials and API tokens securely in Kubernetes secrets.
	4.	ArgoCD Configuration:
	•	Use the argocd-application.yaml to manage the application deployment in Kubernetes.
	5.	Automate Deployment:
	•	Use the Bamboo script to automate:
	•	Docker image build and push.
	•	Helm chart packaging and push to a Helm repository.
	•	Deployment to Kubernetes via ArgoCD.

With these configurations, your service will be automated from code to deployment in Kubernetes.