
üîπ Updating Comments in Interactive JIRA Service

After updating a comment in JIRA, the interactive service should fetch the latest comments and dynamically update the HTML table (td) for comments and recent comment using JavaScript without refreshing the page.

üîπ Steps to Implement
	1.	Update Comment in JIRA API (Backend)
	2.	Fetch Latest Comments After Update
	3.	Modify HTML Table Using JavaScript (fetch API)
	4.	Use JavaScript to Update the Table in Real-time

1Ô∏è‚É£ Backend: Update Comment and Fetch Latest Comments

routes.py - Update JIRA Comment and Return Latest Comments

from flask import Flask, request, jsonify, render_template
import requests

app = Flask(__name__)

JIRA_API_URL = "https://your-jira-instance.atlassian.net/rest/api/2/issue"
HEADERS = {
    "Authorization": "Bearer YOUR_JIRA_API_TOKEN",
    "Content-Type": "application/json"
}

@app.route('/update_comment', methods=['POST'])
def update_comment():
    """ Update a comment in JIRA and return the latest comments """
    data = request.json
    jira_id = data.get("jira_id")
    new_comment = data.get("comment")

    if not jira_id or not new_comment:
        return jsonify({"error": "Missing JIRA ID or comment"}), 400

    # Add new comment to JIRA
    comment_payload = {"body": new_comment}
    response = requests.post(f"{JIRA_API_URL}/{jira_id}/comment", json=comment_payload, headers=HEADERS)

    if response.status_code != 201:
        return jsonify({"error": "Failed to update comment", "details": response.text}), 500

    # Fetch the updated comments
    comments_response = requests.get(f"{JIRA_API_URL}/{jira_id}/comment", headers=HEADERS)
    if comments_response.status_code != 200:
        return jsonify({"error": "Failed to fetch updated comments"}), 500

    comments = comments_response.json()["comments"]
    latest_comment = comments[-1]["body"] if comments else ""

    return jsonify({"comments": [c["body"] for c in comments], "latest_comment": latest_comment})

2Ô∏è‚É£ Frontend: Modify HTML to Support Dynamic Updates

Modify the HTML template to include:
	‚Ä¢	A table (<td>) for comments
	‚Ä¢	A JavaScript function to update the table dynamically
	‚Ä¢	A button to trigger comment updates

templates/interactive_jira.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive JIRA</title>
    <script>
        function updateComment(jiraId) {
            let newComment = document.getElementById(`comment_input_${jiraId}`).value;
            
            fetch('/update_comment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ jira_id: jiraId, comment: newComment })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert("Error: " + data.error);
                } else {
                    document.getElementById(`comments_${jiraId}`).innerHTML = data.comments.join("<br>");
                    document.getElementById(`latest_comment_${jiraId}`).innerHTML = data.latest_comment;
                }
            })
            .catch(error => console.error('Error:', error));
        }
    </script>
</head>
<body>
    <h2>JIRA Issues</h2>
    <table border="1">
        <thead>
            <tr>
                <th>JIRA ID</th>
                <th>Summary</th>
                <th>Comments</th>
                <th>Recent Comment</th>
                <th>Update Comment</th>
            </tr>
        </thead>
        <tbody>
            {% for issue in issues %}
            <tr>
                <td>{{ issue.jira_id }}</td>
                <td>{{ issue.summary }}</td>
                <td id="comments_{{ issue.jira_id }}">{{ issue.comments | join("<br>") }}</td>
                <td id="latest_comment_{{ issue.jira_id }}">{{ issue.latest_comment }}</td>
                <td>
                    <input type="text" id="comment_input_{{ issue.jira_id }}" placeholder="Enter comment">
                    <button onclick="updateComment('{{ issue.jira_id }}')">Update</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

3Ô∏è‚É£ Explanation of the Code

Backend (Flask)

‚úî Updates JIRA comment via API
‚úî Fetches updated comments after posting
‚úî Returns all comments and latest comment

Frontend (HTML + JavaScript)

‚úî Displays JIRA issues in a table
‚úî JavaScript function (updateComment)
	‚Ä¢	Calls /update_comment API
	‚Ä¢	Updates comments <td> dynamically without refreshing
‚úî Uses JavaScript fetch API for AJAX calls

4Ô∏è‚É£ Expected Behavior

‚úÖ When a user enters a comment and clicks ‚ÄúUpdate‚Äù:
‚úî New comment is posted to JIRA
‚úî Latest comments are fetched
‚úî HTML table updates dynamically

5Ô∏è‚É£ Running the Service

Start Flask App

python3 app.py

Access in Browser

http://localhost:5000/interactive_jira

üöÄ Final Outcome

‚úÖ Real-time updates of comments after posting
‚úÖ No page refresh required
‚úÖ Works in Interactive JIRA service



Goal:

After updating a JIRA comment from the interactive service, we want the HTML template (template.html) and Flask backend (routes.py) to dynamically fetch and display the latest comments on the corresponding JIRA issue list.

üîπ Changes in routes.py
	1.	Add an API endpoint /get_issue_comments to fetch updated JIRA comments for a specific issue.
	2.	Modify the /interactive_jira endpoint to return updated issue details.
	3.	Ensure CORS is enabled for frontend communication.

Updated routes.py

from flask import Flask, request, render_template, jsonify
from flask_cors import CORS
import requests

app = Flask(__name__)
CORS(app, supports_credentials=True)  # Enable CORS for cross-origin requests

JIRA_BASE_URL = "https://your-jira-instance.com"
JIRA_API_TOKEN = "your_api_token"
HEADERS = {
    "Authorization": f"Bearer {JIRA_API_TOKEN}",
    "Content-Type": "application/json"
}

# Route to fetch JIRA issues and display on UI
@app.route('/interactive_jira', methods=['GET'])
def interactive_jira():
    filter_id = request.args.get('filter_id')

    if not filter_id:
        return jsonify({"error": "Filter ID is required"}), 400

    jira_url = f"{JIRA_BASE_URL}/rest/api/2/search?jql=filter={filter_id}"
    response = requests.get(jira_url, headers=HEADERS)

    if response.status_code == 200:
        issues = response.json().get('issues', [])
        return render_template('template.html', issues=issues)
    else:
        return jsonify({"error": "Failed to fetch issues"}), response.status_code


# API to update a JIRA comment
@app.route('/update_comment', methods=['POST'])
def update_comment():
    data = request.json
    issue_id = data.get("issue_id")
    comment = data.get("comment")

    if not issue_id or not comment:
        return jsonify({"error": "Issue ID and comment are required"}), 400

    jira_url = f"{JIRA_BASE_URL}/rest/api/2/issue/{issue_id}/comment"
    response = requests.post(jira_url, json={"body": comment}, headers=HEADERS)

    if response.status_code == 201:
        return jsonify({"message": "Comment added successfully!"})
    else:
        return jsonify({"error": "Failed to add comment"}), response.status_code


# API to fetch updated comments for a JIRA issue
@app.route('/get_issue_comments', methods=['GET'])
def get_issue_comments():
    issue_id = request.args.get('issue_id')

    if not issue_id:
        return jsonify({"error": "Issue ID is required"}), 400

    jira_url = f"{JIRA_BASE_URL}/rest/api/2/issue/{issue_id}/comment"
    response = requests.get(jira_url, headers=HEADERS)

    if response.status_code == 200:
        comments = response.json().get('comments', [])
        formatted_comments = [comment['body'] for comment in comments]  # Extract comment text
        return jsonify({"comments": formatted_comments})
    else:
        return jsonify({"error": "Failed to fetch comments"}), response.status_code


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

üîπ Changes in template.html
	1.	Render JIRA issues dynamically.
	2.	Allow users to add comments and update JIRA via /update_comment API.
	3.	Fetch and refresh comments dynamically after updating a comment.

Updated template.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive JIRA</title>
    <script>
        async function updateComment(issueId) {
            const comment = document.getElementById(`comment_${issueId}`).value;

            const response = await fetch("/update_comment", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ issue_id: issueId, comment: comment })
            });

            const result = await response.json();
            alert(result.message || result.error);

            if (response.ok) {
                refreshComments(issueId);
            }
        }

        async function refreshComments(issueId) {
            const response = await fetch(`/get_issue_comments?issue_id=${issueId}`);
            const data = await response.json();

            if (response.ok) {
                const commentsDiv = document.getElementById(`comments_${issueId}`);
                commentsDiv.innerHTML = data.comments.map(comment => `<p>${comment}</p>`).join("");
            } else {
                alert("Failed to fetch comments.");
            }
        }
    </script>
</head>
<body>
    <h1>Interactive JIRA Issues</h1>
    
    {% for issue in issues %}
        <div>
            <h2>{{ issue.key }} - {{ issue.fields.summary }}</h2>
            <p><strong>Status:</strong> {{ issue.fields.status.name }}</p>

            <h3>Comments:</h3>
            <div id="comments_{{ issue.key }}">
                {% for comment in issue.fields.comment.comments %}
                    <p>{{ comment.body }}</p>
                {% endfor %}
            </div>

            <input type="text" id="comment_{{ issue.key }}" placeholder="Enter your comment">
            <button onclick="updateComment('{{ issue.key }}')">Update Comment</button>
        </div>
        <hr>
    {% endfor %}
</body>
</html>

üîπ How This Works
	1.	Render Issues
	‚Ä¢	When the user opens /interactive_jira?filter_id=12345, it fetches and displays JIRA issues.
	2.	Update Comment
	‚Ä¢	User enters a comment in the input field and clicks ‚ÄúUpdate Comment.‚Äù
	‚Ä¢	Calls /update_comment, updates JIRA, and alerts the user.
	3.	Refresh Comments
	‚Ä¢	After a successful comment update, it fetches updated comments from /get_issue_comments.
	‚Ä¢	Updates the comments section dynamically without reloading the page.

‚úÖ Features Implemented

‚úî Fetch and display JIRA issues dynamically.
‚úî Update JIRA comments via an interactive button.
‚úî Automatically refresh comments in real-time.
‚úî CORS enabled for external frontend access.
‚úî No page refresh needed after updating comments.

Now your interactive JIRA service will display real-time updated comments dynamically in the UI! üöÄ