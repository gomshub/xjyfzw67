Here‚Äôs the corrected version of your JIRA sync service with the following improvements:

‚úÖ Fetch only non-resolved issues from the database
‚úÖ Return a JSON response with jira_number and job_name for inserted, updated, and resolved issues
‚úÖ Separate the code into routes.py, jira_ops.py, and db_ops.py for modularity

1Ô∏è‚É£ jira_ops.py - Fetch JIRA Issues from API

import requests

JIRA_API_URL = "https://your-jira-instance/rest/api/2/search"
JIRA_AUTH = ("your-username", "your-api-token")

def fetch_jira_issues(jql_query):
    """Fetch issues from JIRA API based on a JQL filter."""
    params = {
        "jql": jql_query,
        "fields": ["summary", "status", "description", "created", "priority", "comment"]
    }
    response = requests.get(JIRA_API_URL, auth=JIRA_AUTH, params=params)
    if response.status_code == 200:
        return response.json()["issues"]
    return []

2Ô∏è‚É£ db_ops.py - Database Operations

import jaydebeapi
from datetime import datetime

DB_CONFIG = {
    "database": "your_database",
    "user": "your_user",
    "password": "your_password",
    "driver": "oracle.jdbc.OracleDriver",
    "url": "jdbc:oracle:thin:@your-db-url",
    "jar": "/path/to/ojdbc8.jar"
}

def get_db_connection():
    """Get database connection."""
    return jaydebeapi.connect(DB_CONFIG["driver"], DB_CONFIG["url"], 
                              [DB_CONFIG["user"], DB_CONFIG["password"]], 
                              DB_CONFIG["jar"])

def get_existing_non_resolved_issues():
    """Fetch only non-resolved issues from the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT jira_number, incpb_id, job_name FROM issues WHERE status != 'Resolved'")
    issues = {row[0]: {"incpb_id": row[1], "job_name": row[2]} for row in cursor.fetchall()}
    conn.close()
    return issues

def insert_issue(jira_data):
    """Insert a new issue into the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    sql = """
    INSERT INTO issues (jira_number, creation_date, criticity, job_name, job_result, summary, 
                        status, description, comments, first_comment, recent_comment) 
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """
    values = (
        jira_data["jira_number"], 
        datetime.strptime(jira_data["created"], "%Y-%m-%dT%H:%M:%S.%f%z"), 
        jira_data["priority"], 
        jira_data["job_name"], 
        jira_data["job_result"], 
        jira_data["summary"], 
        jira_data["status"], 
        jira_data["description"], 
        jira_data["comments"], 
        jira_data["first_comment"], 
        jira_data["recent_comment"]
    )
    cursor.execute(sql, values)
    conn.commit()
    conn.close()

def update_issue(jira_data, incpb_id):
    """Update an existing issue in the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    sql = """
    UPDATE issues 
    SET status = ?, comments = ?, recent_comment = ?
    WHERE incpb_id = ?
    """
    values = (jira_data["status"], jira_data["comments"], jira_data["recent_comment"], incpb_id)
    cursor.execute(sql, values)
    conn.commit()
    conn.close()

def insert_comment(incpb_id, comment):
    """Insert a new comment into the comments table."""
    conn = get_db_connection()
    cursor = conn.cursor()
    sql = """
    INSERT INTO comments (incpb_id, author, content, date_time)
    VALUES (?, ?, ?, ?)
    """
    values = (incpb_id, comment["author"], comment["content"], 
              datetime.strptime(comment["date_time"], "%Y-%m-%dT%H:%M:%S.%f%z"))
    cursor.execute(sql, values)
    conn.commit()
    conn.close()

def mark_as_resolved(incpb_id):
    """Mark an issue as resolved in the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    sql = "UPDATE issues SET status = 'Resolved' WHERE incpb_id = ?"
    cursor.execute(sql, (incpb_id,))
    conn.commit()
    conn.close()

3Ô∏è‚É£ routes.py - Flask API Route

from flask import Flask, jsonify
from jira_ops import fetch_jira_issues
from db_ops import get_existing_non_resolved_issues, insert_issue, update_issue, insert_comment, mark_as_resolved

app = Flask(__name__)

JIRA_QUERY = "project=ABC AND status!=Resolved"

@app.route('/sync_jira_issues', methods=['POST'])
def sync_jira_issues():
    """Synchronize JIRA issues with the database."""
    jira_issues = fetch_jira_issues(JIRA_QUERY)
    existing_issues = get_existing_non_resolved_issues()

    inserted = []
    updated = []
    resolved = []

    for issue in jira_issues:
        jira_number = issue["key"]
        comments = issue["fields"]["comment"]["comments"]
        formatted_comments = [
            {"author": c["author"]["displayName"], "content": c["body"], "date_time": c["created"]}
            for c in comments
        ]

        jira_data = {
            "jira_number": jira_number,
            "created": issue["fields"]["created"],
            "priority": issue["fields"]["priority"]["name"],
            "job_name": issue["fields"]["summary"].split()[0],  
            "job_result": issue["fields"]["summary"].split()[-1], 
            "summary": issue["fields"]["summary"],
            "status": issue["fields"]["status"]["name"],
            "description": issue["fields"]["description"],
            "comments": len(comments),
            "first_comment": formatted_comments[0]["content"] if comments else "",
            "recent_comment": formatted_comments[-1]["content"] if comments else ""
        }

        if jira_number in existing_issues:
            incpb_id = existing_issues[jira_number]["incpb_id"]
            update_issue(jira_data, incpb_id)
            for comment in formatted_comments:
                insert_comment(incpb_id, comment)
            updated.append({"jira_number": jira_number, "job_name": existing_issues[jira_number]["job_name"]})
        else:
            insert_issue(jira_data)
            inserted.append({"jira_number": jira_number, "job_name": jira_data["job_name"]})

    for jira_number, issue in existing_issues.items():
        if jira_number not in [i["jira_number"] for i in jira_issues] and issue["job_name"] != "Resolved":
            mark_as_resolved(issue["incpb_id"])
            resolved.append({"jira_number": jira_number, "job_name": issue["job_name"]})

    return jsonify({"inserted": inserted, "updated": updated, "resolved": resolved})

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")

üöÄ Summary of Changes

‚úÖ Fetching only non-resolved issues from the database
‚úÖ Returning JSON response with jira_number and job_name for inserted, updated, and resolved issues
‚úÖ Separation into jira_ops.py, db_ops.py, and routes.py
‚úÖ Ensuring mark_as_resolved updates only those issues missing from the JIRA API

üí° Next Steps
	1.	Run the Flask app: python routes.py
	2.	Trigger sync manually:

curl -X POST http://localhost:5000/sync_jira_issues


	3.	Automate sync with a cron job or Kubernetes job
	4.	Ensure database connection & table structures exist
	5.	Check logs to verify that inserted, updated, and resolved issues appear correctly

This ensures new issues are inserted, existing issues are updated, and resolved issues are marked. Let me know if you need modifications! üöÄ