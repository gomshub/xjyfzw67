Running RabbitMQ as a Kubernetes service and configuring it for resilience requires careful consideration of the deployment strategy, resource requirements, and Kubernetes features such as StatefulSets, Persistent Volumes, and ConfigMaps. Below is a guide to help you set up RabbitMQ on Kubernetes and make it resilient.

### 1. **RabbitMQ Kubernetes Deployment Overview**
   RabbitMQ can be deployed on Kubernetes using a StatefulSet to ensure stable network identities and persistent storage for each RabbitMQ node. This setup is crucial for stateful applications like RabbitMQ.

### 2. **Kubernetes Resources**

#### **Deployment via Helm (Recommended)**
   Helm is a package manager for Kubernetes that simplifies deployment. You can use the official RabbitMQ Helm chart.

   1. **Install Helm** (if not already installed):
      ```bash
      curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      ```

   2. **Add the RabbitMQ Helm repository**:
      ```bash
      helm repo add bitnami https://charts.bitnami.com/bitnami
      ```

   3. **Install RabbitMQ with default values**:
      ```bash
      helm install my-rabbitmq bitnami/rabbitmq
      ```

   You can customize the Helm chart by specifying your own values file or directly through the `--set` flag. For example, to customize the resource requests and limits:

   ```bash
   helm install my-rabbitmq bitnami/rabbitmq \
     --set auth.username=admin,auth.password=adminpassword \
     --set resources.requests.memory=256Mi,resources.requests.cpu=250m \
     --set resources.limits.memory=512Mi,resources.limits.cpu=500m
   ```

#### **Manual YAML Deployment**
   If you prefer not to use Helm, you can manually create the Kubernetes resources needed for RabbitMQ.

   1. **Create a ConfigMap for RabbitMQ Configuration**:
      ```yaml
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: rabbitmq-config
      data:
        rabbitmq.conf: |
          default_user = admin
          default_pass = adminpassword
          loopback_users.guest = false
      ```

   2. **Define the StatefulSet**:
      ```yaml
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: rabbitmq
      spec:
        serviceName: "rabbitmq"
        replicas: 3
        selector:
          matchLabels:
            app: rabbitmq
        template:
          metadata:
            labels:
              app: rabbitmq
          spec:
            containers:
            - name: rabbitmq
              image: rabbitmq:3-management
              ports:
              - containerPort: 5672
                name: amqp
              - containerPort: 15672
                name: management
              env:
              - name: RABBITMQ_ERLANG_COOKIE
                value: "secretcookie"
              volumeMounts:
              - name: rabbitmq-data
                mountPath: /var/lib/rabbitmq
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "250m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
        volumeClaimTemplates:
        - metadata:
            name: rabbitmq-data
          spec:
            accessModes: [ "ReadWriteOnce" ]
            storageClassName: "standard"
            resources:
              requests:
                storage: 1Gi
      ```

   3. **Create a Headless Service for RabbitMQ**:
      ```yaml
      apiVersion: v1
      kind: Service
      metadata:
        name: rabbitmq
      spec:
        ports:
        - port: 5672
          name: amqp
        - port: 15672
          name: management
        clusterIP: None
        selector:
          app: rabbitmq
      ```

### 3. **Resource Requirements**
   RabbitMQ can be resource-intensive, especially under heavy load. It's crucial to allocate enough resources to ensure stability and resilience.

   - **CPU**: RabbitMQ is generally CPU-bound, especially during periods of high message throughput.
     - **Requests**: `250m` (minimum)
     - **Limits**: `500m` to `1 CPU` (depends on load)

   - **Memory**: RabbitMQ needs sufficient memory for handling messages, queues, and connections.
     - **Requests**: `256Mi` (minimum)
     - **Limits**: `512Mi` to `1Gi` (depends on load)

   - **Storage**: Persistent storage is required for queue durability.
     - **Persistent Volume**: Minimum `1Gi` storage per node. Increase as necessary based on the number of messages and retention period.

### 4. **Resilience and High Availability**

   - **StatefulSet**: Deploy RabbitMQ as a StatefulSet to maintain the identity and state of each RabbitMQ pod across reboots.
   - **Replicas**: Deploy a minimum of 3 replicas for high availability.
   - **Erlang Cookie**: Ensure the same Erlang cookie across all nodes in the cluster for them to communicate.
   - **Persistent Volumes**: Use PersistentVolumeClaims (PVCs) to store RabbitMQ data. This ensures that data is not lost during pod restarts.
   - **Cluster Formation**: Configure automatic cluster formation and self-healing using the `rabbitmq.conf` or environment variables.
   - **Liveness and Readiness Probes**: Define Kubernetes liveness and readiness probes to restart pods that are unhealthy and to ensure traffic is only sent to ready instances.

### 5. **Networking**
   Expose RabbitMQ using a Kubernetes Service, and consider using a LoadBalancer or Ingress if you need external access.

   - **Internal Access**: Use a ClusterIP service if RabbitMQ is only accessed internally.
   - **External Access**: Use a LoadBalancer service or Ingress to expose RabbitMQ to external clients.

### 6. **Monitoring and Logging**
   - **Prometheus Exporter**: Use the RabbitMQ Prometheus exporter to monitor RabbitMQ metrics.
   - **Log Aggregation**: Forward RabbitMQ logs to a centralized logging system like ELK or Loki.

### 7. **Scaling**
   - **Horizontal Scaling**: Increase the number of RabbitMQ replicas to handle increased load.
   - **Vertical Scaling**: Increase CPU and memory resources allocated to RabbitMQ containers if needed.

### 8. **Backup and Restore**
   Implement a backup strategy for the persistent volume storing RabbitMQ data, using tools like Velero or regular snapshots.

By following this guide, you should be able to deploy RabbitMQ on Kubernetes with a setup that is resilient, scalable, and suitable for production use.