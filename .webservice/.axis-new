
No, the Connector port and Servlet configuration are not done in the axis2.xml file. These configurations are typically part of your servlet container (e.g., Apache Tomcat) and web application’s web.xml file, not within Axis2’s axis2.xml.

Here’s where each configuration is done:

1. Connector Port Configuration:

The Connector port is part of your servlet container’s configuration (e.g., Tomcat’s server.xml) rather than axis2.xml. This is where you define how the web server listens for HTTP and HTTPS requests.

For example, in Tomcat, you would configure the connector in the server.xml file like this:

Tomcat server.xml Example:

<Connector port="8443"
           protocol="org.apache.coyote.http11.Http11NioProtocol"
           maxThreads="150"
           SSLEnabled="true"
           scheme="https"
           secure="true"
           clientAuth="false"
           sslProtocol="TLS"
           keystoreFile="conf/keystore.jks"
           keystorePass="changeit"/>

	•	This configuration defines an HTTPS connector on port 8443 with SSL enabled.
	•	You must set up SSL certificates in Tomcat for this to work properly.

2. Servlet Configuration:

The Servlet configuration for Axis2 (using AxisServletListener) is done in the web.xml of your web application (which is typically located in WEB-INF/web.xml). This tells the servlet container (e.g., Tomcat) how to route requests to the Axis2 framework.

Example web.xml Configuration for Axis2:

<servlet>
    <servlet-name>AxisServlet</servlet-name>
    <servlet-class>org.apache.axis2.transport.http.AxisServlet</servlet-class>
</servlet>

<servlet-mapping>
    <servlet-name>AxisServlet</servlet-name>
    <url-pattern>/services/*</url-pattern>
</servlet-mapping>

	•	This configuration ensures that all requests matching the URL pattern /services/* are handled by the AxisServlet class, which is responsible for dispatching Axis2 services.
	•	The servlet container (e.g., Tomcat) uses this to forward requests to Axis2.

3. Axis2.xml Configuration:

The axis2.xml file is used for Axis2-specific configurations, such as:

	•	Defining parameters like WSDLServiceAddress, port, and hostname.
	•	Configuring transport receivers for HTTP/HTTPS, such as AxisServletListener.
	•	Specifying global service and module parameters.

But axis2.xml doesn’t handle:

	•	Web server-level configurations (like ports and SSL certificates).
	•	Servlet mappings (those go in web.xml).

Summary:

	•	Connector port (for HTTP/HTTPS) is configured in Tomcat’s server.xml (or another servlet container’s configuration file).
	•	Servlet mappings (for Axis2 services) are configured in the web.xml file of the web application.
	•	Axis2-specific settings (like WSDL generation, hostname, and transport receivers) are configured in axis2.xml.

Would you like more details on how to configure the Tomcat server.xml or web.xml for your Axis2 services?



<axisconfig>
    
    <!-- Other configurations -->

    <!-- Add the WSDLServiceAddress parameter here -->
    <parameter name="WSDLServiceAddress">https://abc.com</parameter>

    <!-- Continue with other configurations -->
    
</axisconfig>


To modify the axis2.xml file to change the binding URL or adjust configurations related to WSDL generation in Apache Axis2, follow these steps:

Steps to Modify axis2.xml:

	1.	Locate the axis2.xml File:
The axis2.xml configuration file is usually located in the AXIS2_HOME/conf/ directory, or in your web application’s WEB-INF/conf/ directory if you are using Axis2 within a servlet container like Apache Tomcat.
	2.	Open the axis2.xml File:
Use a text editor to open the axis2.xml file. This file contains a variety of configurations for the Axis2 engine, such as service transport protocols, module configuration, and message processing.
	3.	Modify the WSDL Address:
You can specify the servicePath and adjust the WSDL generation settings if necessary. Look for the transportReceiver section, which defines the available transport protocols, and modify the URLs used for WSDL generation.
You can also manually specify the external service endpoint by setting the http or https transport address.
For example, you may find sections like this:

<transportReceiver name="http" class="org.apache.axis2.transport.http.SimpleHTTPServer">
    <parameter name="port">8080</parameter>
    <parameter name="hostname">localhost</parameter>  <!-- change to abc.com -->
</transportReceiver>

<transportReceiver name="https" class="org.apache.axis2.transport.http.SimpleHTTPServer">
    <parameter name="port">8443</parameter>
    <parameter name="hostname">abc.com</parameter>  <!-- change to abc.com -->
</transportReceiver>


	4.	Modify the WSDLServiceAddress Property (Optional):
Some versions of Axis2 allow you to explicitly set the WSDL address. Look for a parameter like this in your axis2.xml file and adjust it:

<parameter name="WSDLServiceAddress">https://abc.com/yourService</parameter>

This forces Axis2 to generate the WSDL with the specified service address rather than the default internal one.

	5.	Modify Dynamic WSDL Generation (Optional):
If you’re using dynamic WSDL generation, you may need to programmatically adjust the endpoint URL by customizing the WSDLGenerationEngine or creating a custom MessageReceiver to override the WSDL URL. This is more advanced and typically involves modifying your Axis2 service code.
	6.	Restart the Axis2 Server:
After saving your changes to axis2.xml, restart your Axis2 engine or the web application container (e.g., Tomcat) for the changes to take effect.

Example HAProxy Setup in Axis2:

If you’re using HAProxy to forward requests from https://abc.com to http://def.com, ensure that your Axis2 is aware of the correct external URL by either modifying the axis2.xml file as shown or programmatically overriding the endpoint address in your service.

Would you like assistance with any specific step in this process?