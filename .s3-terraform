# ======================================================
# setup-terraform-s3-remotebackend.ps1
# Creates a Terraform project that deploys a new S3 bucket
# and uses an existing team S3 backend (env-specific backend conf)
# ======================================================

$root = "terraform-infra"
$modulePath = Join-Path $root "modules\s3-bucket"
$envPath = Join-Path $root "environments"
$workflowPath = Join-Path $root ".github\workflows"

# Create directories
New-Item -Path $modulePath -ItemType Directory -Force | Out-Null
New-Item -Path $envPath -ItemType Directory -Force | Out-Null
New-Item -Path $workflowPath -ItemType Directory -Force | Out-Null

# -----------------------------
# modules/s3-bucket/main.tf
# -----------------------------
@'
resource "aws_s3_bucket" "this" {
  bucket        = var.bucket_name
  acl           = var.acl
  force_destroy = var.force_destroy

  versioning {
    enabled = var.versioning_enabled
  }

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = var.sse_algorithm
      }
    }
  }

  tags = var.tags
}
'@ | Set-Content -Path (Join-Path $modulePath "main.tf")

# -----------------------------
# modules/s3-bucket/variables.tf
# -----------------------------
@'
variable "bucket_name" {
  description = "Name of the bucket to create"
  type        = string
}

variable "acl" {
  description = "ACL for the bucket"
  type        = string
  default     = "private"
}

variable "force_destroy" {
  description = "Allow destroy even if bucket non-empty"
  type        = bool
  default     = false
}

variable "versioning_enabled" {
  description = "Enable versioning on the bucket"
  type        = bool
  default     = true
}

variable "sse_algorithm" {
  description = "Server-side encryption algorithm"
  type        = string
  default     = "AES256"
}

variable "tags" {
  description = "Tags for the bucket"
  type        = map(string)
  default     = {}
}
'@ | Set-Content -Path (Join-Path $modulePath "variables.tf")

# -----------------------------
# modules/s3-bucket/outputs.tf
# -----------------------------
@'
output "bucket_id" {
  value = aws_s3_bucket.this.id
}

output "bucket_arn" {
  value = aws_s3_bucket.this.arn
}
'@ | Set-Content -Path (Join-Path $modulePath "outputs.tf")

# -----------------------------
# modules/s3-bucket/README.md
# Use double-quote here-string and escape backticks to avoid PS issues
# -----------------------------
$moduleReadme = @"
# S3 Bucket Module

Creates a single S3 bucket with sensible defaults (versioning, SSE, tags).

## Example usage

\`\`\`hcl
module "new_bucket" {
  source       = "../../modules/s3-bucket"
  bucket_name  = "mycompany-new-bucket-dev"
  acl          = "private"
  force_destroy = false
  tags = {
    Project = "infra"
    Owner   = "team@example.com"
  }
}
\`\`\`
"@

Set-Content -Path (Join-Path $modulePath "README.md") -Value $moduleReadme

# -----------------------------
# Root (common) Terraform files
# -----------------------------

# main.tf (common)
@'
provider "aws" {
  region = var.aws_region
}

module "new_s3_bucket" {
  source = "./modules/s3-bucket"

  bucket_name        = var.new_bucket_name
  acl                = var.bucket_acl
  force_destroy      = var.bucket_force_destroy
  versioning_enabled = var.bucket_versioning
  sse_algorithm      = var.bucket_sse_algorithm
  tags               = merge(var.common_tags, { Environment = var.environment })
}
'@ | Set-Content -Path (Join-Path $root "main.tf")

# variables.tf (common)
@'
variable "aws_region" {
  description = "AWS region to deploy into"
  type        = string
  default     = "eu-central-1"
}

variable "environment" {
  description = "Environment name (dev/qa/prod)"
  type        = string
}

variable "new_bucket_name" {
  description = "Name of the new S3 bucket to create"
  type        = string
}

variable "bucket_acl" {
  description = "ACL for the new bucket"
  type        = string
  default     = "private"
}

variable "bucket_force_destroy" {
  description = "Allow destroy even if bucket non-empty"
  type        = bool
  default     = false
}

variable "bucket_versioning" {
  description = "Enable versioning on the bucket"
  type        = bool
  default     = true
}

variable "bucket_sse_algorithm" {
  description = "SSE algorithm for the bucket"
  type        = string
  default     = "AES256"
}

variable "common_tags" {
  description = "Common tags applied to resources"
  type        = map(string)
  default     = {}
}
'@ | Set-Content -Path (Join-Path $root "variables.tf")

# outputs.tf (common)
@'
output "deployed_bucket_id" {
  value = module.new_s3_bucket.bucket_id
}

output "deployed_bucket_arn" {
  value = module.new_s3_bucket.bucket_arn
}
'@ | Set-Content -Path (Join-Path $root "outputs.tf")

# backend.tf (placeholder - will be configured at init by backend conf per env)
@'
terraform {
  backend "s3" {}
}
'@ | Set-Content -Path (Join-Path $root "backend.tf")

# -----------------------------
# Environments (tfvars + backend conf placeholders)
# -----------------------------
# Dev
@'
aws_region = "eu-central-1"
environment = "dev"
new_bucket_name = "mycompany-new-bucket-dev"
bucket_acl = "private"
bucket_force_destroy = false
bucket_versioning = true
bucket_sse_algorithm = "AES256"
common_tags = {
  Project = "myproject"
  Owner   = "team@example.com"
}
'@ | Set-Content -Path (Join-Path $envPath "dev.tfvars")

@'
# Backend config for dev environment.
# EDIT these values to match your team's common S3 backend.
# Example:
# bucket=team-terraform-state-bucket
# key=shared/infra/dev/terraform.tfstate
# region=eu-central-1
# dynamodb_table=team-terraform-locks
# encrypt=true

bucket=team-terraform-state-bucket
key=shared/infra/dev/terraform.tfstate
region=eu-central-1
dynamodb_table=team-terraform-locks
encrypt=true
'@ | Set-Content -Path (Join-Path $envPath "dev.backend.conf")

# QA
@'
aws_region = "eu-central-1"
environment = "qa"
new_bucket_name = "mycompany-new-bucket-qa"
bucket_acl = "private"
bucket_force_destroy = false
bucket_versioning = true
bucket_sse_algorithm = "AES256"
common_tags = {
  Project = "myproject"
  Owner   = "team@example.com"
}
'@ | Set-Content -Path (Join-Path $envPath "qa.tfvars")

@'
# Backend config for qa environment - edit to match team settings
bucket=team-terraform-state-bucket
key=shared/infra/qa/terraform.tfstate
region=eu-central-1
dynamodb_table=team-terraform-locks
encrypt=true
'@ | Set-Content -Path (Join-Path $envPath "qa.backend.conf")

# Prod
@'
aws_region = "eu-central-1"
environment = "prod"
new_bucket_name = "mycompany-new-bucket-prod"
bucket_acl = "private"
bucket_force_destroy = false
bucket_versioning = true
bucket_sse_algorithm = "AES256"
common_tags = {
  Project = "myproject"
  Owner   = "team@example.com"
}
'@ | Set-Content -Path (Join-Path $envPath "prod.tfvars")

@'
# Backend config for prod environment - edit to match team settings
bucket=team-terraform-state-bucket
key=shared/infra/prod/terraform.tfstate
region=eu-central-1
dynamodb_table=team-terraform-locks
encrypt=true
'@ | Set-Content -Path (Join-Path $envPath "prod.backend.conf")

# -----------------------------
# Helper script: run-terraform.ps1
# Usage:
#   .\run-terraform.ps1 -Env dev [-AutoApply]
# -----------------------------
$runner = @'
param(
  [Parameter(Mandatory=$true)]
  [ValidateSet("dev","qa","prod")]
  [string]$Env,

  [switch]$AutoApply
)

$root = "terraform-infra"
$envPath = Join-Path $root "environments"
$backendFile = Join-Path $envPath ("$Env.backend.conf")
$tfvars = Join-Path $envPath ("$Env.tfvars")

if (-not (Test-Path $backendFile)) {
  Write-Error "Backend config not found: $backendFile`nEdit the file to point to your team S3 backend and DynamoDB lock table."
  exit 1
}

if (-not (Test-Path $tfvars)) {
  Write-Error "tfvars not found: $tfvars"
  exit 1
}

Push-Location $root
try {
  Write-Host "Initializing Terraform with backend config: $backendFile"
  & terraform init "-backend-config=$backendFile" -reconfigure

  if ($LASTEXITCODE -ne 0) {
    Write-Error "terraform init failed"
    exit $LASTEXITCODE
  }

  Write-Host "Planning using var-file: $tfvars"
  & terraform plan "-var-file=$tfvars" -out=tfplan

  if ($LASTEXITCODE -ne 0) {
    Write-Error "terraform plan failed"
    exit $LASTEXITCODE
  }

  if ($AutoApply) {
    Write-Host "Applying plan..."
    & terraform apply -auto-approve tfplan
    if ($LASTEXITCODE -ne 0) {
      Write-Error "terraform apply failed"
      exit $LASTEXITCODE
    }
  } else {
    Write-Host "Plan completed and saved to tfplan. Re-run with -AutoApply to apply."
  }
} finally {
  Pop-Location
}
'@

Set-Content -Path (Join-Path $root "run-terraform.ps1") -Value $runner

Write-Host "âœ… Project skeleton created at .\$root"
Write-Host "`nNext steps:"
Write-Host "  1) Edit the environment backend config files in '$envPath' (e.g. dev.backend.conf) to point to your team's S3 backend bucket, key, region, and DynamoDB lock table."
Write-Host "     - e.g. bucket=team-terraform-state-bucket"
Write-Host "            key=shared/infra/dev/terraform.tfstate"
Write-Host "            region=eu-central-1"
Write-Host "            dynamodb_table=team-terraform-locks"
Write-Host "  2) Edit the env tfvars (dev.tfvars / qa.tfvars / prod.tfvars) to set the desired new_bucket_name and tags."
Write-Host "  3) Run a plan or apply for an environment (example for dev):"
Write-Host "       Set-Location .\$root"
Write-Host "       ./run-terraform.ps1 -Env dev             # runs init & plan"
Write-Host "       ./run-terraform.ps1 -Env dev -AutoApply  # runs init, plan and apply"