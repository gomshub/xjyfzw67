Hereâ€™s a complete example of a Python Flask API service that allows you to:
	â€¢	Call an endpoint like /get-files?dataset=abc&date=180524
	â€¢	Retrieve matching files (from S3, local disk, or mock for now)
	â€¢	Deploy it in Kubernetes
	â€¢	Includes a README.md with curl usage

â¸»

âœ… 1. Flask App (app.py)

from flask import Flask, request, jsonify, send_file, abort
import os
from pathlib import Path

app = Flask(__name__)

# Base folder where files are stored, e.g. /data/abc/180524/
BASE_DIR = "/data"

@app.route("/get-files", methods=["GET"])
def get_files():
    dataset = request.args.get("dataset")
    date = request.args.get("date")  # Expecting DDMMYY

    if not dataset or not date:
        return jsonify({"error": "Missing 'dataset' or 'date' parameter"}), 400

    folder_path = Path(BASE_DIR) / dataset / date

    if not folder_path.exists() or not folder_path.is_dir():
        return jsonify({"error": f"No folder found for {folder_path}"}), 404

    # List files
    files = [f.name for f in folder_path.glob("*") if f.is_file()]
    
    if not files:
        return jsonify({"message": f"No files found for {dataset} on {date}"}), 200

    return jsonify({
        "dataset": dataset,
        "date": date,
        "files": files
    })

@app.route("/download", methods=["GET"])
def download_file():
    dataset = request.args.get("dataset")
    date = request.args.get("date")
    filename = request.args.get("filename")

    if not dataset or not date or not filename:
        return jsonify({"error": "Missing parameters"}), 400

    file_path = Path(BASE_DIR) / dataset / date / filename
    if not file_path.exists():
        return jsonify({"error": "File not found"}), 404

    return send_file(str(file_path), as_attachment=True)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)


â¸»

âœ… 2. Dockerfile

FROM python:3.9-slim

WORKDIR /app
COPY app.py .

RUN pip install flask

EXPOSE 5000
CMD ["python", "app.py"]


â¸»

âœ… 3. Kubernetes YAML (Deployment + Service)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: file-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: file-api
  template:
    metadata:
      labels:
        app: file-api
    spec:
      containers:
      - name: file-api
        image: yourregistry/file-api:latest
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: data-volume
          mountPath: /data
      volumes:
      - name: data-volume
        hostPath:
          path: /mnt/data  # Example local path on kube node
---
apiVersion: v1
kind: Service
metadata:
  name: file-api-service
spec:
  type: NodePort
  selector:
    app: file-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
      nodePort: 30080


â¸»

âœ… 4. README.md

# File Fetch API

This service lets you query and download files for a given dataset and date.

### ðŸ”§ Run Locally

```bash
docker build -t file-api .
docker run -p 5000:5000 -v /your/data:/data file-api

ðŸ“¦ Deploy to Kubernetes

kubectl apply -f deployment.yaml

ðŸ“¡ API Endpoints

List files:

curl "http://<node-ip>:30080/get-files?dataset=abc&date=180524"

Download file:

curl -O "http://<node-ip>:30080/download?dataset=abc&date=180524&filename=file1.xml"

ðŸ—‚ Directory Structure

/data/abc/180524/file1.xml
/data/abc/180524/file2.out
/data/xyz/170524/file3.csv

---

Let me know if you want to:

- Switch to **S3-based** storage instead of local files
- Add **auth/token-based access**
- Convert files (e.g., XML â†’ Parquet) before download