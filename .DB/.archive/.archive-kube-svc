To deploy the archival process as a Kubernetes service using a Python module, we'll create a containerized application that runs scheduled tasks for weekly and daily archival. We'll use Kubernetes `CronJob` resources to schedule the archival tasks.

### Python Module Structure

The Python module will have the following structure:

```
archive_module/
    ├── Dockerfile
    ├── requirements.txt
    ├── main.py
    ├── archive.py
    ├── config.py
    ├── kubernetes/
        ├── deployment.yaml
        ├── service.yaml
        ├── cronjob_weekly.yaml
        ├── cronjob_daily.yaml
```

### 1. `config.py`

Contains database configuration.

```python
import os

class Config:
    MAIN_DB_CONFIG = {
        'user': os.getenv('MAIN_DB_USER'),
        'password': os.getenv('MAIN_DB_PASS'),
        'host': os.getenv('MAIN_DB_HOST'),
        'database': os.getenv('MAIN_DB_NAME'),
    }
    ARCHIVE_DB_CONFIG = {
        'user': os.getenv('ARCHIVE_DB_USER'),
        'password': os.getenv('ARCHIVE_DB_PASS'),
        'host': os.getenv('ARCHIVE_DB_HOST'),
        'database': os.getenv('ARCHIVE_DB_NAME'),
    }
    EMAIL = os.getenv('EMAIL')
```

### 2. `archive.py`

Handles the archival logic.

```python
import mysql.connector
from config import Config
import smtplib
from email.mime.text import MIMEText

def connect_db(config):
    return mysql.connector.connect(
        user=config['user'],
        password=config['password'],
        host=config['host'],
        database=config['database']
    )

def send_email(subject, body, recipient):
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = Config.EMAIL
    msg['To'] = recipient

    with smtplib.SMTP('localhost') as server:
        server.send_message(msg)

def archive_data(start_date, end_date):
    main_conn = connect_db(Config.MAIN_DB_CONFIG)
    archive_conn = connect_db(Config.ARCHIVE_DB_CONFIG)

    cursor_main = main_conn.cursor()
    cursor_archive = archive_conn.cursor()

    try:
        cursor_main.execute(f"SELECT * FROM orders WHERE order_date >= '{start_date}' AND order_date <= '{end_date}'")
        orders = cursor_main.fetchall()

        for order in orders:
            cursor_archive.execute("INSERT INTO archived_orders VALUES (%s, %s, %s, %s)", order)

        cursor_main.execute(f"SELECT oi.* FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= '{start_date}' AND o.order_date <= '{end_date}'")
        order_items = cursor_main.fetchall()

        for item in order_items:
            cursor_archive.execute("INSERT INTO archived_order_items VALUES (%s, %s, %s, %s, %s)", item)

        archive_conn.commit()

        main_count_orders = cursor_main.execute(f"SELECT COUNT(*) FROM orders WHERE order_date >= '{start_date}' AND order_date <= '{end_date}'")
        archive_count_orders = cursor_archive.execute(f"SELECT COUNT(*) FROM archived_orders WHERE order_date >= '{start_date}' AND order_date <= '{end_date}'")

        if main_count_orders == archive_count_orders:
            cursor_main.execute(f"DELETE FROM order_items WHERE order_id IN (SELECT order_id FROM orders WHERE order_date >= '{start_date}' AND order_date <= '{end_date}')")
            cursor_main.execute(f"DELETE FROM orders WHERE order_date >= '{start_date}' AND order_date <= '{end_date}'")
            main_conn.commit()

            send_email("Archival Process Completed", f"Archival process completed for date range {start_date} to {end_date}.", Config.EMAIL)
        else:
            send_email("Archival Process Failed", f"Archival verification failed for date range {start_date} to {end_date}.", Config.EMAIL)
    
    finally:
        cursor_main.close()
        cursor_archive.close()
        main_conn.close()
        archive_conn.close()
```

### 3. `main.py`

Entry point for the module.

```python
import sys
from datetime import datetime, timedelta
from archive import archive_data

if len(sys.argv) != 3:
    print("Usage: python main.py <start_date> <end_date>")
    sys.exit(1)

start_date = sys.argv[1]
end_date = sys.argv[2]

archive_data(start_date, end_date)
```

### 4. `requirements.txt`

List of dependencies.

```
mysql-connector-python
```

### 5. `Dockerfile`

Defines the Docker image.

```Dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

CMD ["python", "main.py"]
```

### 6. Kubernetes Manifests

#### `deployment.yaml`

Defines the deployment for the archival service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: archive-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: archive
  template:
    metadata:
      labels:
        app: archive
    spec:
      containers:
      - name: archive-container
        image: your-docker-repo/archive:latest
        env:
        - name: MAIN_DB_USER
          valueFrom:
            secretKeyRef:
              name: main-db-secret
              key: user
        - name: MAIN_DB_PASS
          valueFrom:
            secretKeyRef:
              name: main-db-secret
              key: password
        - name: MAIN_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: main-db-config
              key: host
        - name: MAIN_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: main-db-config
              key: name
        - name: ARCHIVE_DB_USER
          valueFrom:
            secretKeyRef:
              name: archive-db-secret
              key: user
        - name: ARCHIVE_DB_PASS
          valueFrom:
            secretKeyRef:
              name: archive-db-secret
              key: password
        - name: ARCHIVE_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: archive-db-config
              key: host
        - name: ARCHIVE_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: archive-db-config
              key: name
        - name: EMAIL
          valueFrom:
            secretKeyRef:
              name: email-secret
              key: address
```

#### `service.yaml`

Defines the service for the deployment.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: archive-service
spec:
  selector:
    app: archive
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
```

#### `cronjob_weekly.yaml`

Defines the CronJob for weekly archival.

```yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: weekly-archive
spec:
  schedule: "0 0 * * 0"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: archive
            image: your-docker-repo/archive:latest
            args:
            - "2020-01-01"
            - "$(date -d '3 years ago -1 day' +%Y-%m-%d)"
            env:
            - name: MAIN_DB_USER
              valueFrom:
                secretKeyRef:
                  name: main-db-secret
                  key: user
            - name: MAIN_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: main-db-secret
                  key: password
            - name: MAIN_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: main-db-config
                  key: host
            - name: MAIN_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: main-db-config
                  key: name
            - name: ARCHIVE_DB_USER
              valueFrom:
                secretKeyRef:
                  name: archive-db-secret
                  key: user
            - name: ARCHIVE_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: archive-db-secret
                  key: password
            - name: ARCHIVE_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: archive-db-config
                  key: host
            - name: ARCHIVE_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: archive-db-config
                  key: name
            - name: EMAIL
              valueFrom:
                secretKeyRef:
                  name: email-secret
                  key: address
          restartPolicy: OnFailure
```

#### `cronjob_daily.yaml`

Defines the CronJob for daily archival.

```yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: daily-archive
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: archive
            image: your-docker-repo/archive:latest
            args:
            - "$(date -d '3 years ago -1 day' +%Y-%m-%d)"
            - "$(date -d '3 years ago' +%Y-%m-%d)"
            env:
            - name: MAIN_DB_USER
              valueFrom:
                secretKeyRef:
                  name: main-db-secret
                  key: user
            - name: MAIN_DB_PASS
              valueFrom:
                secretKeyRef