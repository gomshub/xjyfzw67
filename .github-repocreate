Perfect — and great observation again 👏

You’re right — GitHub now supports “Repository creation and configuration via YAML” (using repo-scoped configuration YAML) through the GitHub CLI, Workflows, or GitHub’s REST API.

So instead of manually creating the repo and pushing Terraform content separately, you can define both the repository and its configuration (settings, topics, visibility, actions permissions, branch protections, etc.) inside a single YAML file — and automate creation end-to-end.

Let’s break it down properly 👇

⸻

🧩 1. Concept — GitHub Repository as YAML (“Infrastructure-as-Code for GitHub”)

You can fully describe your repo using a YAML file that includes:
	•	Repo metadata (name, description, visibility)
	•	Topics & license
	•	Branch protection
	•	GitHub Actions settings
	•	Secrets
	•	Team permissions
	•	Autogenerated content (Terraform files, workflows)

…and then automatically provision that repo using automation (e.g., gh CLI or a management workflow repo).

⸻

🧱 2. Example repo.yaml

Here’s a minimal but production-grade example that fits your Terraform S3 use case:

# repo.yaml
name: terraform-secure-s3
description: "Reusable Terraform module for secure S3 deployment with GitHub Actions"
visibility: private
homepage: "https://github.com/my-org"
has_issues: true
has_projects: false
has_wiki: false
default_branch: main
delete_branch_on_merge: true

topics:
  - terraform
  - github-actions
  - aws
  - devops

# Set permissions & security settings
permissions:
  issues: write
  actions: read
  checks: write

branch_protection:
  main:
    required_status_checks:
      strict: true
      contexts: ["Terraform Format Check", "tfsec"]
    enforce_admins: true
    required_pull_request_reviews:
      required_approving_review_count: 1
    restrictions: null

# Define default secrets for Actions
secrets:
  AWS_ROLE_ARN: arn:aws:iam::<ACCOUNT_ID>:role/GitHubActionsDeployRole
  AWS_REGION: eu-central-1

# Add initial Terraform + workflow template
template:
  path: ./template/terraform-secure


⸻

⚙️ 3. Structure in Your Repo Management Project

You can manage multiple Terraform repos from a single “repo-management” GitHub project like this:

repo-bootstrap/
├── repos/
│   ├── repo-terraform-s3.yaml
│   ├── repo-terraform-ec2.yaml
│   └── repo-terraform-rds.yaml
├── templates/
│   └── terraform-secure/
│       ├── setup-terraform-secure.ps1
│       └── (Terraform folder tree)
└── bootstrap.ps1


⸻

🚀 4. PowerShell Bootstrap Script (auto-create repos from YAML)

Here’s a single PowerShell script that reads your YAML files and creates GitHub repos from them automatically.

bootstrap.ps1

Import-Module powershell-yaml

$repoConfigs = Get-ChildItem -Path "./repos" -Filter "*.yaml"

foreach ($configFile in $repoConfigs) {
    $config = (Get-Content $configFile.FullName | ConvertFrom-Yaml)
    $repoName = $config.name
    $visibility = $config.visibility
    $desc = $config.description
    $defaultBranch = $config.default_branch

    Write-Host "`n📦 Creating repository: $repoName ($visibility)"
    $createCmd = "gh repo create $repoName --$visibility --description `"$desc`" --confirm"
    Invoke-Expression $createCmd

    # Apply topics
    if ($config.topics) {
        $topics = ($config.topics -join ",")
        gh repo edit $repoName --add-topic $topics
    }

    # Set default branch protection if defined
    if ($config.branch_protection.main) {
        Write-Host "🔒 Applying branch protection rules..."
        $bp = $config.branch_protection.main
        $strict = if ($bp.required_status_checks.strict) { "true" } else { "false" }
        gh api repos/:owner/$repoName/branches/main/protection `
            -X PUT `
            -F required_status_checks.strict=$strict `
            -F enforce_admins=$($bp.enforce_admins)
    }

    # Add repo secrets
    if ($config.secrets) {
        foreach ($key in $config.secrets.Keys) {
            $value = $config.secrets[$key]
            Write-Host "🔐 Adding secret: $key"
            gh secret set $key --body $value --repo $repoName
        }
    }

    # Push initial template if defined
    if ($config.template.path) {
        Write-Host "📂 Initializing repository content from $($config.template.path)"
        git clone "https://github.com/$(gh api user -q '.login')/$repoName.git"
        Copy-Item -Path "$($config.template.path)\*" -Destination "./$repoName" -Recurse -Force
        Set-Location "./$repoName"
        git add .
        git commit -m "Initial commit: Terraform secure S3 setup"
        git push origin $defaultBranch
        Set-Location ..
    }

    Write-Host "✅ Repository '$repoName' setup completed."
}


⸻

🧠 5. How It Works

Step	Description
1️⃣	Reads all YAML files under repos/
2️⃣	Creates GitHub repositories (public/private)
3️⃣	Adds topics, branch protections, secrets
4️⃣	Copies initial Terraform + workflow templates
5️⃣	Pushes to GitHub automatically


⸻

⚙️ 6. Prerequisites
	•	Install GitHub CLI:

gh auth login


	•	Install YAML module for PowerShell:

Install-Module powershell-yaml -Force


	•	Have Terraform + template structure available under templates/terraform-secure/
(the one from your setup-terraform-secure.ps1)

⸻

✅ 7. Result

Running:

./bootstrap.ps1

Will:
	•	Create repos like terraform-secure-s3, terraform-ec2-stack, etc.
	•	Apply branch protection and secrets
	•	Initialize Terraform structure and workflows
	•	Push to GitHub automatically 🎯

⸻

🧩 Optional Extensions

You can expand the YAML schema to also include:

actions:
  enabled: true
  default_workflow_permissions: read
  allowed_actions: all

Or even:

teams:
  - name: devops
    permission: admin
  - name: developers
    permission: write

Then extend the PowerShell script to call:

gh api orgs/<org>/teams/<team>/repos/<org>/<repo> --method PUT --field permission=write


⸻

Would you like me to enhance this to use GitHub’s “repo-scoped YAML” pattern inside .github/config.yml (so that the repository auto-applies settings like Actions policies or secrets when it’s first created)?
That’s the next level — “self-configuring repositories”.