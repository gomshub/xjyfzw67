Here is the complete code for the application based on the refined requirements. The solution includes the backend services, HTML templates with elegant CSS, and the necessary Kubernetes configuration for deployment.

1. routes.py

Handles API calls, interactive services, and rendering HTML responses.

from flask import Flask, render_template, request, jsonify
from db_ops import DBManager
from jira_ops import JiraAPI
from settings import Config
import os
import json

app = Flask(__name__)
app.config.from_object(Config)

# Initialize database managers
prod_db = DBManager(
    Config.PROD_DB_URL, Config.PROD_DB_USER, Config.PROD_DB_PASSWORD, Config.JDBC_DRIVER, Config.DRIVER_PATH
)
quality_db = DBManager(
    Config.QUALITY_DB_URL, Config.QUALITY_DB_USER, Config.QUALITY_DB_PASSWORD, Config.JDBC_DRIVER, Config.DRIVER_PATH
)

# Helper: Get API token from Kubernetes secret
def get_api_token(user):
    try:
        secrets = json.loads(os.getenv("USERS_APITOKEN", "{}"))
        return secrets.get(user)
    except Exception as e:
        print(f"Error fetching API token for user {user}: {e}")
        return None


@app.route("/detailed_results", methods=["GET"])
def detailed_results():
    """
    Fetch issues from JIRA API and return as a detailed results HTML.
    """
    jira_issues = prod_db.fetch_jira_issues()
    return render_template("detailed_results.html", issues=jira_issues, base_url=Config.BASE_URL)


@app.route("/summary_results", methods=["GET"])
def summary_results():
    """
    Fetch issues from JIRA API and return as a summary results HTML.
    """
    jira_issues = prod_db.fetch_jira_issues()
    return render_template("summary.html", issues=jira_issues, base_url=Config.BASE_URL)

def get_kube_base_url():
    """
    Dynamically extract the base URL from the incoming request.
    """
    # Extract the base URL from the request
    scheme = request.scheme  # http or https
    host = request.host      # Includes hostname and port (e.g., intg:8008)
    base_url = f"{scheme}://{host}"
    return base_url

@app.route("/interactive", methods=["GET", "POST"])
def interactive():
    """
    Interactive service for updating comments and resolving issues.
    """
    if request.method == "POST":
        data = request.json
        jira_number = data.get("jira_number")
        job_number = data.get("job_number")
        update_comment = data.get("update_comment")
        resolve_status = data.get("resolve_status")
        system_user = data.get("system_user")

        if not system_user:
          # Return an error message and status code
          return jsonify({"error": "No user defined to interact with jira_api"}), 400
        
        # Dynamically fetch the kube_base_url from the request
        kube_base_url = get_kube_base_url()

        # Select the appropriate DB
        db = prod_db if job_number.startswith("P") else quality_db
        api_token = get_api_token(system_user)
        if not api_token:
            return jsonify({"error": "API token not found for user"}), 400

        # Update comment or resolve
        success = False
        if update_comment:
            success = db.update_comment(jira_number, update_comment)
        elif resolve_status:
            jira_api = JiraAPI(api_token)
            success = jira_api.resolve_issue(jira_number)

        return jsonify({"status": "success" if success else "failure"})

    # Fetch issues for rendering
    issues = prod_db.fetch_all_issues() + quality_db.fetch_all_issues()
    return render_template("interactive.html", issues=issues, base_url=kube_base_url)


@app.route("/interactive_detailed", methods=["GET", "POST"])
def interactive_detailed():
    """
    Interactive detailed service for updating `update_comment`.
    """
    if request.method == "POST":
        data = request.json
        jira_number = data.get("jira_number")
        job_number = data.get("job_number")
        update_comment = data.get("update_comment")
        system_user = data.get("system_user")

        # Select the appropriate DB
        db = prod_db if job_number.startswith("P") else quality_db
        success = db.update_comment(jira_number, update_comment)
        return jsonify({"status": "success" if success else "failure"})

    # Fetch issues for rendering
    issues = prod_db.fetch_all_issues() + quality_db.fetch_all_issues()
    return render_template("interactive_detailed.html", issues=issues, base_url=Config.BASE_URL)


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=6000)

2. db_ops.py

Handles database interactions.

import jaydebeapi


class DBManager:
    def __init__(self, db_url, db_user, db_password, jdbc_driver, driver_path):
        self.db_url = db_url
        self.db_user = db_user
        self.db_password = db_password
        self.jdbc_driver = jdbc_driver
        self.driver_path = driver_path

    def fetch_jira_issues(self):
        """
        Fetch issues from the database.
        """
        query = """
        SELECT jira_number, job_number, criticity, summary, description, comments,
               first_comment, recent_comment, update_comment
        FROM jira_issues
        """
        return self._execute_query(query)

    def fetch_all_issues(self):
        """
        Fetch all issues from the database.
        """
        query = "SELECT * FROM jira_issues"
        return self._execute_query(query)

    def update_comment(self, jira_number, comment):
        """
        Update the comment for a given JIRA number.
        """
        query = "UPDATE jira_issues SET update_comment = ? WHERE jira_number = ?"
        return self._execute_query(query, (comment, jira_number), update=True)

    def _execute_query(self, query, params=None, update=False):
        """
        Helper function to execute a database query.
        """
        try:
            conn = jaydebeapi.connect(
                self.jdbc_driver,
                self.db_url,
                [self.db_user, self.db_password],
                self.driver_path,
            )
            with conn.cursor() as cursor:
                if update:
                    cursor.execute(query, params)
                    conn.commit()
                    return True
                cursor.execute(query, params or ())
                return cursor.fetchall()
        except Exception as e:
            print(f"Error executing query: {e}")
            return [] if not update else False

3. jira_ops.py

Handles JIRA API interactions.

import requests


class JiraAPI:
    def __init__(self, api_token):
        self.api_token = api_token
        self.base_url = "https://your-jira-instance.atlassian.net/rest/api/3"

    def resolve_issue(self, jira_number):
        """
        Mark a JIRA issue as resolved.
        """
        url = f"{self.base_url}/issue/{jira_number}/transitions"
        headers = {"Authorization": f"Bearer {self.api_token}", "Content-Type": "application/json"}
        payload = {"transition": {"id": "31"}}  # Adjust transition ID based on your JIRA workflow

        response = requests.post(url, json=payload, headers=headers)
        return response.status_code == 204

4. settings.py

Handles application configuration.

import os


class Config:
    PROD_DB_URL = os.getenv("PROD_DB_URL")
    PROD_DB_USER = "prod_user"
    PROD_DB_PASSWORD = os.getenv("PROD_DB_PASSWORD")
    QUALITY_DB_URL = os.getenv("QUALITY_DB_URL")
    QUALITY_DB_USER = "quality_user"
    QUALITY_DB_PASSWORD = os.getenv("QUALITY_DB_PASSWORD")
    BASE_URL = "http://localhost:6000"
    JDBC_DRIVER = "oracle.jdbc.OracleDriver"
    DRIVER_PATH = "/path/to/ojdbc8.jar"

5. Kubernetes YAML

Deployment (deployment.yaml)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: flask-app:latest
        ports:
        - containerPort: 6000
        env:
        - name: PROD_DB_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: prod_db_url
        - name: PROD_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: prod_db_password
        - name: QUALITY_DB_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: quality_db_url
        - name: QUALITY_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: quality_db_password
        - name: USERS_APITOKEN
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: users_apitoken

Service (service.yaml)

apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  selector:
    app: flask-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 6000
  type: LoadBalancer

6. HTML Templates

Refer to the detailed examples previously provided for detailed_results.html, summary.html, interactive.html, and interactive_detailed.html.

Each HTML template has dynamic rendering with CSS to ensure clean and readable output. The interactive templates include forms and dropdowns for user actions.

Let me know if further details or refinements are needed!