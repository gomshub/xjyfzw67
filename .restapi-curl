Here are plain `curl` commands that you can run directly in Git Bash on Windows to:

1. Obtain an API key by passing a username and password to an authentication endpoint.
2. Use the API key to make a request.
3. If the API key has expired, repeat the process to log in again.

### Example Commands

#### 1. **Login and Get the API Key**

```bash
curl -X POST https://example.com/api/login \
-H "Content-Type: application/json" \
-d "{\"username\":\"your_username\", \"password\":\"your_password\"}" > response.json
```

- This command sends a POST request with your username and password to the authentication endpoint.
- The result (which should contain the API key) is saved in a file called `response.json`.

#### 2. **Extract the API Key from the JSON Response**

Since youâ€™re using Git Bash on Windows, you can use `grep` to extract the API key from the JSON response:

```bash
cat response.json | grep -o '"apiKey": *"[^"]*' | grep -o '[^"]*$' > apikey.txt
```

- This extracts the value of `apiKey` from the JSON response and saves it to a file called `apikey.txt`.

#### 3. **Make a Request Using the API Key**

Now that you have the API key saved in `apikey.txt`, you can use it in your subsequent requests. To do that:

```bash
API_KEY=$(cat apikey.txt)

curl -X GET https://example.com/api/data \
-H "Authorization: Bearer $API_KEY" \
-o output.txt
```

- This command reads the API key from `apikey.txt` and uses it in the `Authorization: Bearer` header to make the GET request.
- The result is saved to `output.txt`.

#### 4. **Check for API Key Expiry**

If the API key has expired (which usually results in a `401 Unauthorized` response), you can detect it by checking the HTTP status code:

```bash
curl -w "%{http_code}" -X GET https://example.com/api/data \
-H "Authorization: Bearer $API_KEY" \
-o output.txt
```

- The `-w "%{http_code}"` flag outputs the HTTP status code after the request.

#### 5. **Handle Expired API Key**

If the response is `401 Unauthorized`, log in again to get a new API key:

```bash
# Check if the previous request returned 401 Unauthorized
HTTP_STATUS=$(curl -w "%{http_code}" -X GET https://example.com/api/data \
-H "Authorization: Bearer $API_KEY" \
-o output.txt)

if [ "$HTTP_STATUS" == "401" ]; then
    echo "API key expired, fetching a new one..."
    curl -X POST https://example.com/api/login \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"your_username\", \"password\":\"your_password\"}" > response.json
    
    cat response.json | grep -o '"apiKey": *"[^"]*' | grep -o '[^"]*$' > apikey.txt
    API_KEY=$(cat apikey.txt)
    
    # Retry the request with the new API key
    curl -X GET https://example.com/api/data \
    -H "Authorization: Bearer $API_KEY" \
    -o output.txt
fi
```

### Summary of Commands:
1. **Login and get the API key**:
   ```bash
   curl -X POST https://example.com/api/login -H "Content-Type: application/json" -d "{\"username\":\"your_username\", \"password\":\"your_password\"}" > response.json
   ```

2. **Extract the API key**:
   ```bash
   cat response.json | grep -o '"apiKey": *"[^"]*' | grep -o '[^"]*$' > apikey.txt
   ```

3. **Make a request using the API key**:
   ```bash
   API_KEY=$(cat apikey.txt)
   curl -X GET https://example.com/api/data -H "Authorization: Bearer $API_KEY" -o output.txt
   ```

4. **Check if the API key is expired** (optional):
   ```bash
   HTTP_STATUS=$(curl -w "%{http_code}" -X GET https://example.com/api/data -H "Authorization: Bearer $API_KEY" -o output.txt)
   ```

5. **Fetch a new API key and retry if expired**:
   ```bash
   if [ "$HTTP_STATUS" == "401" ]; then
       echo "API key expired, fetching a new one..."
       curl -X POST https://example.com/api/login -H "Content-Type: application/json" -d "{\"username\":\"your_username\", \"password\":\"your_password\"}" > response.json
       cat response.json | grep -o '"apiKey": *"[^"]*' | grep -o '[^"]*$' > apikey.txt
       API_KEY=$(cat apikey.txt)
       curl -X GET https://example.com/api/data -H "Authorization: Bearer $API_KEY" -o output.txt
   fi
   ```

Replace the URLs (`https://example.com/api/login`, `https://example.com/api/data`) and credentials (`your_username`, `your_password`) with the correct values for your API.