
Great — here’s a secure and clean guide to using Maven encrypted credentials with Windows Credential Manager for deploying to Artifactory.

⸻

🔐 GOAL

Securely store Artifactory credentials on Windows, and use them in Maven deploy without exposing them in:
	•	settings.xml
	•	Environment variables
	•	Eclipse or logs

⸻

✅ Step-by-Step: Encrypt and Store Artifactory Credentials

⸻

1. Encrypt Your Artifactory Password or API Token

In your terminal (Git Bash / PowerShell / CMD):

mvn --encrypt-password

You’ll be prompted to enter your real password or token.
Maven returns something like:

{jSM1dfU2A3kfdLkjsdf==}

✅ Copy this encrypted password. Do not store the plain text anywhere now.

⸻

2. Update ~/.m2/settings-security.xml (optional)

This file contains the master key used for decryption.

Usually at:

C:\Users\<your-user>\.m2\settings-security.xml

If it doesn’t exist, Maven creates one automatically with:

mvn --encrypt-password

You don’t need to modify this file unless you want to re-use a specific master key (in teams, for example).

⸻

3. Update settings.xml Securely

Edit your Maven settings file:
C:\Users\<your-user>\.m2\settings.xml

Add the Artifactory server section with the encrypted password:

<servers>
  <server>
    <id>artifactory-snapshot</id>
    <username>your-artifactory-username</username>
    <password>{jSM1dfU2A3kfdLkjsdf==}</password> <!-- ENCRYPTED -->
  </server>
</servers>

🔒 This is now safe to use, as the password is not in plaintext.

⸻

✅ Optional: Add Distribution Management in pom.xml

<distributionManagement>
  <snapshotRepository>
    <id>artifactory-snapshot</id>
    <url>https://artifactory.company.com/artifactory/libs-snapshot-local</url>
  </snapshotRepository>
</distributionManagement>


⸻

4. Use mvn deploy as Usual

Now Maven will:
	•	Use the encrypted password
	•	Automatically decrypt it using your master key
	•	Upload to Artifactory securely

⸻

🧠 Summary

Step	File	Secure?
Encrypt password	mvn --encrypt-password	✅
Store encrypted token	settings.xml	✅
Keep master key safe	settings-security.xml	✅
Avoid plain env vars or plaintext secrets	✅	✅


⸻

🛡️ Extra Tip: Windows Credential Manager (Optional)

If you want to store the real token there and pull it dynamically into your Maven settings.xml, you’ll need a custom Maven extension (not standard Maven behavior).

So the recommended approach remains:
	•	Encrypt it using mvn --encrypt-password
	•	Keep it in your settings.xml

⸻

Would you like me to generate a ready-to-paste settings.xml and pom.xml sample based on your snapshot module and Artifactory structure?

===

Sure! Here’s a complete README that gives you everything to create a minimal runnable Maven test-runner project named indicator-daily-sync-test which:
	•	References your Karate snapshot JAR from Artifactory
	•	Includes a minimal JUnit 5 test runner class to trigger tests
	•	Explains how to pass env variables & tags at runtime (e.g., from Bamboo)
	•	Requires only pom.xml and TestRunner.java source file

⸻

📘 Complete README: indicator-daily-sync-test Maven Test Runner Project

⸻

Project Structure

indicator-daily-sync-test/
├── pom.xml
└── src
    └── test
        └── java
            └── com
                └── yourorg
                    └── runner
                        └── TestRunner.java


⸻

1. pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.yourorg</groupId>
  <artifactId>indicator-daily-sync-test</artifactId>
  <version>1.0.0</version>

  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <karate.version>1.4.1</karate.version>
  </properties>

  <dependencies>
    <!-- Dependency on your Karate tests snapshot -->
    <dependency>
      <groupId>com.yourorg</groupId>
      <artifactId>karate-tests</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>

    <!-- Karate JUnit 5 for the test runner -->
    <dependency>
      <groupId>com.intuit.karate</groupId>
      <artifactId>karate-junit5</artifactId>
      <version>${karate.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>artifactory-snapshots</id>
      <url>https://yourcompany.jfrog.io/artifactory/libs-snapshot</url>
    </repository>
  </repositories>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <systemPropertyVariables>
            <!-- Pass environment variables and Karate options from command line -->
            <karate.env>${karate.env}</karate.env>
            <user.name>${user.name}</user.name>
            <user.pass>${user.pass}</user.pass>
            <karate.options>${karate.options}</karate.options>
          </systemPropertyVariables>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>


⸻

2. TestRunner.java

Create this file under src/test/java/com/yourorg/runner/TestRunner.java:

package com.yourorg.runner;

import com.intuit.karate.junit5.Karate;

public class TestRunner {

    @Karate.Test
    Karate testAll() {
        // Run all feature files from the classpath (your snapshot jar)
        return Karate.run().relativeTo(getClass());
    }

}


⸻

3. How to Run Tests

You must pass environment and sensitive variables at runtime (e.g., from Bamboo or CLI):

mvn clean test \
  -Dkarate.env=qa \
  -Duser.name=someuser \
  -Duser.pass=somepassword \
  -Dkarate.options="--tags @daily"

	•	karate.env: sets the environment, read inside karate-config.js
	•	user.name, user.pass: read securely inside your karate-config.js via karate.properties[]
	•	karate.options: pass Karate CLI options like --tags

⸻

4. Bamboo Setup (Example)
	•	Add Bamboo Plan Variables or Secure Variables for user.name, user.pass
	•	Use a Maven task with goal:

clean test \
  -Dkarate.env=${bamboo_env} \
  -Duser.name=${bamboo_USER} \
  -Duser.pass=${bamboo_PASS} \
  -Dkarate.options="--tags @daily"

Replace ${bamboo_env}, ${bamboo_USER}, ${bamboo_PASS} with Bamboo variable references.

⸻

5. Notes
	•	This runner does not contain feature files or credentials — it relies on the Karate snapshot JAR dependency.
	•	Your Karate snapshot JAR (artifact com.yourorg:karate-tests:1.0.0-SNAPSHOT) must be deployed to your Artifactory snapshot repo before running this.
	•	karate-config.js inside that snapshot JAR should read sensitive info like this:

function fn() {
  var config = {};
  config.env = karate.env; // from -Dkarate.env
  config.username = karate.properties['user.name'];
  config.password = karate.properties['user.pass'];
  return config;
}


⸻

If you want, I can generate a zip archive with this minimal project structure or a sample Bamboo YAML pipeline for you! Just ask.