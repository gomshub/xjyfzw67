Great ‚Äî here‚Äôs the final version of the Flask app that:

‚∏ª

‚úÖ Accepts any hostname via query parameter (?host=)

‚úÖ Optionally supports ?port= (defaults to 443)

‚úÖ Returns the .pem certificate as a downloadable file

‚úÖ Logs all major steps

‚ùå Never writes to disk

‚∏ª

‚úÖ Flask App (Dynamic Host Support)

from flask import Flask, Response, request, jsonify
import ssl
import socket
import logging

app = Flask(__name__)

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fetch_ssl_cert_pem(host: str, port: int = 443) -> str:
    try:
        logger.info(f"Fetching SSL cert from {host}:{port}...")

        conn = socket.create_connection((host, port), timeout=5)
        context = ssl.create_default_context()
        sock = context.wrap_socket(conn, server_hostname=host)

        der_cert = sock.getpeercert(binary_form=True)
        pem_cert = ssl.DER_cert_to_PEM_cert(der_cert)

        logger.info(f"Successfully fetched cert from {host}:{port}")
        return pem_cert
    except Exception as e:
        logger.error(f"Error fetching cert from {host}:{port} - {e}")
        raise

@app.route('/get-cert', methods=['GET'])
def get_cert():
    host = request.args.get('host')
    port = int(request.args.get('port', 443))

    if not host:
        return jsonify({"error": "Missing 'host' query parameter"}), 400

    try:
        pem_data = fetch_ssl_cert_pem(host, port)

        return Response(
            pem_data,
            mimetype='application/x-pem-file',
            headers={
                'Content-Disposition': f'attachment; filename="{host.replace(".", "_")}_cert.pem"'
            }
        )
    except Exception as e:
        logger.exception("Failed to return cert")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000)


‚∏ª

‚úÖ How to Use

üì• To download S3 cert:

curl "http://<pod-ip>:5000/get-cert?host=s3.amazonaws.com" -o s3_cert.pem

üì• To download custom MinIO or internal cert:

curl "http://<pod-ip>:5000/get-cert?host=s3.internal.domain&port=443" -o my_s3_cert.pem


‚∏ª

üîê Bonus: Use the cert in Python requests

response = requests.get(
    "https://s3.internal.domain/bucket-name/object",
    verify="my_s3_cert.pem"
)


‚∏ª

Let me know if you want:
	‚Ä¢	To validate the cert expiration before downloading
	‚Ä¢	To support full cert chains
	‚Ä¢	To convert and return .crt or .der instead

Want any of these?