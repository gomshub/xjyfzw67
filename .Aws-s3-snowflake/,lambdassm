Excellent ‚Äî this is a really good question üëè and one that comes up a lot in secure DevOps workflows.

Let‚Äôs break it down clearly and practically:
‚úÖ Yes, secrets can be stored in AWS Systems Manager (SSM) Parameter Store,
but it‚Äôs important to understand how it compares to Secrets Manager, and when to choose one over the other.

‚∏ª

üß© 1Ô∏è‚É£ SSM Parameter Store vs Secrets Manager

Feature	SSM Parameter Store (SecureString)	Secrets Manager
Purpose	General configuration and secrets	Secrets and credentials (rotatable)
Encryption	Uses KMS (same encryption strength)	Uses KMS
Rotation	‚ùå Manual only	‚úÖ Automatic rotation (Lambda-based)
Versioning	‚úÖ Supported	‚úÖ Supported
Cost	‚úÖ Free (except KMS usage)	üí∞ ~$0.40 per secret/month
Integration	‚úÖ Works with Lambda, ECS, EC2, etc.	‚úÖ Works with same + RDS rotation
API calls	ssm:GetParameter	secretsmanager:GetSecretValue
Best for	Static configs, API keys, non-rotated secrets	Database credentials, tokens needing rotation

So, yes ‚Äî you can use SSM Parameter Store instead of Secrets Manager, especially if you:
	‚Ä¢	Don‚Äôt need automatic secret rotation
	‚Ä¢	Want to save cost
	‚Ä¢	Are okay managing secrets manually

‚∏ª

üõ†Ô∏è 2Ô∏è‚É£ How to Store Secrets in SSM

You can create them manually or in Terraform.

Example Secret:

aws ssm put-parameter \
  --name "/snowflake/lambda/creds" \
  --type "SecureString" \
  --value '{"snowflake_user":"LAMBDA_CI","snowflake_password":"StrongPassword!","snowflake_account":"abc12345.us-east-1.privatelink","snowflake_database":"MY_DB","snowflake_schema":"PUBLIC","snowflake_warehouse":"COMPUTE_WH"}'


‚∏ª

üß± 3Ô∏è‚É£ Terraform Example: Store in SSM

resource "aws_ssm_parameter" "snowflake_creds" {
  name  = "/snowflake/lambda/creds"
  type  = "SecureString"
  value = jsonencode({
    snowflake_user      = "LAMBDA_CI"
    snowflake_password  = "StrongPassword!"
    snowflake_account   = "abc12345.us-east-1.privatelink"
    snowflake_database  = "MY_DB"
    snowflake_schema    = "PUBLIC"
    snowflake_warehouse = "COMPUTE_WH"
  })
}


‚∏ª

üß† 4Ô∏è‚É£ Update Your Lambda Code

Instead of fetching from Secrets Manager, use SSM via boto3.client('ssm'):

import boto3
import os
import json
import yaml
import snowflake.connector
import pandas as pd
from io import StringIO
from datetime import datetime

def lambda_handler(event, context):
    ssm_param = os.environ["SSM_PARAM_NAME"]
    s3_bucket = os.environ["S3_BUCKET"]

    ssm = boto3.client('ssm')
    response = ssm.get_parameter(Name=ssm_param, WithDecryption=True)
    creds = json.loads(response['Parameter']['Value'])

    with open(os.path.join(os.path.dirname(__file__), "queries.yml"), "r") as f:
        config = yaml.safe_load(f)
    query_name = os.environ.get("QUERY_NAME", "daily_sales_report")
    query = config['queries'][query_name]

    conn = snowflake.connector.connect(
        user=creds["snowflake_user"],
        password=creds["snowflake_password"],
        account=creds["snowflake_account"],
        warehouse=creds["snowflake_warehouse"],
        database=creds["snowflake_database"],
        schema=creds["snowflake_schema"]
    )

    cur = conn.cursor()
    cur.execute(query)
    df = cur.fetch_pandas_all()
    cur.close()
    conn.close()

    s3 = boto3.client('s3')
    csv_buffer = StringIO()
    df.to_csv(csv_buffer, index=False)
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = f"daily/{today}/{query_name}.csv"

    s3.put_object(Bucket=s3_bucket, Key=key, Body=csv_buffer.getvalue())

    return {"status": "success", "s3_key": key}


‚∏ª

üß© 5Ô∏è‚É£ Terraform IAM Policy Update (for SSM Access)

Replace the Secrets Manager permissions with this:

resource "aws_iam_policy" "lambda_ssm_access" {
  name = "lambda_ssm_snowflake_access"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParameterHistory"
        ],
        Effect   = "Allow",
        Resource = "arn:aws:ssm:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:parameter${var.ssm_param_name}"
      },
      {
        Action = [
          "kms:Decrypt"
        ],
        Effect = "Allow",
        Resource = "*"
      }
    ]
  })
}

‚úÖ Least privilege to read only your parameter and decrypt it.

‚∏ª

‚öôÔ∏è 6Ô∏è‚É£ Update Terraform Environment Variables for Lambda

Replace SECRET_NAME with SSM_PARAM_NAME:

environment {
  variables = {
    AWS_REGION      = data.aws_region.current.name
    S3_BUCKET       = var.s3_bucket_name
    QUERY_NAME      = var.query_name
    SSM_PARAM_NAME  = var.ssm_param_name
  }
}


‚∏ª

üìò 7Ô∏è‚É£ Add to variables.tf

variable "ssm_param_name" {
  description = "Name of the SSM parameter that stores Snowflake credentials"
  type        = string
}


‚∏ª

‚úÖ 8Ô∏è‚É£ When to Use SSM vs Secrets Manager

Use Case	Recommended Service
Store static credentials (rarely rotated)	SSM Parameter Store
Store database credentials, tokens, or passwords requiring rotation	Secrets Manager
Need cross-service config storage (e.g. app settings + secrets)	SSM
Need automatic rotation	Secrets Manager
Cost sensitive, simple setup	SSM


‚∏ª

üß≠ TL;DR
	‚Ä¢	‚úÖ You can safely use SSM Parameter Store (SecureString) for Snowflake credentials.
	‚Ä¢	üîí It uses KMS encryption ‚Äî just like Secrets Manager.
	‚Ä¢	üí∞ It‚Äôs cheaper, simpler, but doesn‚Äôt support auto-rotation.
	‚Ä¢	üë®‚Äçüíª Lambda code only changes from boto3.client('secretsmanager') ‚Üí boto3.client('ssm').

‚∏ª

Would you like me to give you the final Terraform + Lambda code combo (using SSM instead of Secrets Manager) so you can directly deploy that version?