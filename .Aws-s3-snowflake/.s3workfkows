Perfect ‚úÖ ‚Äî you want a complete Terraform CI/CD setup with three workflows, handling:
	1.	Validation on all branches (to prevent bad Terraform before merging)
	2.	Automatic LTIQ deployment when changes reach main
	3.	Manual PROD deployment (with human approval)

Let‚Äôs finalize these cleanly and production-ready.

‚∏ª

üß© Terraform CI/CD Flow Overview

Stage	Branch	Trigger	Action	AWS Role	Approval
üß™ Validate	Any feature branch	Push / PR	fmt, validate, plan	LTIQ role	‚ùå
üöÄ Deploy LTIQ	main	Auto after merge	apply using ltiq.tfvars	LTIQ role	‚ùå
üèÅ Deploy PROD	Manual	Manual trigger	apply using prod.tfvars	PROD role	‚úÖ


‚∏ª

‚öôÔ∏è 1Ô∏è‚É£ .github/workflows/terraform-validate.yml

Validate on any branch (before merge)

name: Terraform Validation

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_DIR: infra/terraform/s3
  AWS_REGION: eu-central-1
  ROLE_ARN_LTIQ: arn:aws:iam::<LTIQ_ACCOUNT_ID>:role/robot-role

jobs:
  validate:
    name: Terraform Format, Validate & Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check -diff

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN_LTIQ }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -var-file=ltiq.tfvars -out=tfplan-ltiq

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-ltiq
          path: ${{ env.TF_DIR }}/tfplan-ltiq

      - name: Comment Summary on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ‚úÖ **Terraform Validation Successful**
            - Environment: LTIQ
            - Plan file: `tfplan-ltiq`

üß† Purpose:
	‚Ä¢	Runs on every branch or PR.
	‚Ä¢	Ensures Terraform code is formatted, valid, and safe to merge.
	‚Ä¢	Prevents unvalidated code from reaching main.

‚∏ª

‚öôÔ∏è 2Ô∏è‚É£ .github/workflows/deploy-ltiq.yml

Automatic deploy when merged to main

name: Deploy to LTIQ

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  TF_DIR: infra/terraform/s3
  AWS_REGION: eu-central-1
  ROLE_ARN_LTIQ: arn:aws:iam::<LTIQ_ACCOUNT_ID>:role/robot-role

jobs:
  deploy_ltiq:
    name: Apply Terraform to LTIQ
    runs-on: ubuntu-latest
    environment: ltiq
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials (LTIQ)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN_LTIQ }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false

      - name: Terraform Plan (LTIQ)
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -var-file=ltiq.tfvars -out=tfplan-ltiq

      - name: Terraform Apply (LTIQ)
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve tfplan-ltiq

üß† Purpose:
	‚Ä¢	Automatically deploys after merge to main
	‚Ä¢	Uses LTIQ tfvars
	‚Ä¢	Fully automated ‚Äî no approval required

‚∏ª

‚öôÔ∏è 3Ô∏è‚É£ .github/workflows/deploy-prod.yml

Manual trigger for PROD with approval

name: Deploy to PROD

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  TF_DIR: infra/terraform/s3
  AWS_REGION: eu-central-1
  ROLE_ARN_PROD: arn:aws:iam::<PROD_ACCOUNT_ID>:role/robot-role

jobs:
  deploy_prod:
    name: Manual Deploy to PROD
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: https://console.aws.amazon.com/s3
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials (PROD)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false

      - name: Terraform Plan (PROD)
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -var-file=prod.tfvars -out=tfplan-prod

      - name: Terraform Apply (PROD)
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve tfplan-prod

üß† Purpose:
	‚Ä¢	Triggered manually from the Actions tab (workflow_dispatch)
	‚Ä¢	Deploys using prod.tfvars
	‚Ä¢	Protected by GitHub Environment Approvals (requires reviewers)

‚∏ª

‚úÖ 4Ô∏è‚É£ Best Practices Setup

In GitHub Repo Settings:
	1.	Branch Protection
	‚Ä¢	Protect main:
	‚Ä¢	Require PR review before merge
	‚Ä¢	Require checks from Terraform Validation to pass
	2.	Environments
	‚Ä¢	Create:
	‚Ä¢	ltiq ‚Üí no reviewers (auto)
	‚Ä¢	prod ‚Üí add reviewers for manual approval
	3.	Secrets
	‚Ä¢	Store sensitive data (if needed) in:
	‚Ä¢	Repo ‚Üí Settings ‚Üí Secrets and Variables ‚Üí Actions

‚∏ª

üß† Summary Table

Workflow	Trigger	Action	Approval	AWS Role	tfvars Used
terraform-validate.yml	Push/PR to any branch	Validate + Plan	‚ùå	LTIQ	ltiq.tfvars
deploy-ltiq.yml	Push to main	Auto Apply	‚ùå	LTIQ	ltiq.tfvars
deploy-prod.yml	Manual	Apply	‚úÖ	PROD	prod.tfvars


‚∏ª

Would you like me to include an auto-comment in PR showing the terraform plan output (with resource changes added/removed) ‚Äî like how Atlantis or Spacelift do it?
It‚Äôs a great addition for reviewers before merging.