To validate XML files before extracting the data, and to ensure that each key element and its child elements are included in the CSV for comparison, we will follow these steps:

1. **Validate XML files against an XSD schema.**
2. **Extract key elements and their child elements values from valid XML files and write them to CSV files.**
3. **Compare the key element values in the CSV files.**
4. **Check if the differences exceed a certain threshold.**
5. **Email the differences as a CSV file.**

We'll use the `lxml` library for XML validation, and `xml.etree.ElementTree` for parsing. Let's start by implementing the required functions:

### Install Required Library
Make sure to install the `lxml` library:
```sh
pip install lxml
```

### Code Implementation

```python
import xml.etree.ElementTree as ET
import csv
import difflib
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from lxml import etree

def validate_xml(xml_file, xsd_file):
    xmlschema_doc = etree.parse(xsd_file)
    xmlschema = etree.XMLSchema(xmlschema_doc)
    xml_doc = etree.parse(xml_file)
    return xmlschema.validate(xml_doc)

def extract_key_and_child_elements_to_csv(file_path, key_elements, csv_path):
    tree = ET.parse(file_path)
    root = tree.getroot()
    
    with open(csv_path, 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile)
        header_written = False
        for elem in key_elements:
            for key_element in root.findall(f".//{elem}"):
                row = [key_element.tag]
                child_values = []
                for child in key_element:
                    row.append(child.tag)
                    child_values.append(child.text.strip() if child.text else '')
                if not header_written:
                    csvwriter.writerow(row)
                    header_written = True
                csvwriter.writerow([key_element.tag] + child_values)

def read_csv_to_dict(csv_path):
    data = {}
    with open(csv_path, 'r') as csvfile:
        csvreader = csv.reader(csvfile)
        headers = next(csvreader, None)
        for row in csvreader:
            if row:
                key = row[0]
                data[key] = row[1:]
    return data, headers

def compare_and_check_threshold(dict_a, dict_b, threshold):
    differences = {}
    for key in set(dict_a.keys()).union(dict_b.keys()):
        val_a = dict_a.get(key, [])
        val_b = dict_b.get(key, [])
        if val_a != val_b:
            diff = list(difflib.ndiff([' '.join(val_a)], [' '.join(val_b)]))
            diff_count = sum(1 for d in diff if d.startswith('- ') or d.startswith('+ '))
            if diff_count > threshold:
                differences[key] = diff
    return differences

def write_differences_to_csv(differences, csv_path, headers):
    with open(csv_path, 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile)
        csvwriter.writerow(headers)
        for key, diff in differences.items():
            csvwriter.writerow([key] + [' '.join(diff)])

def send_email_with_attachment(subject, body, to_email, from_email, smtp_server, smtp_port, smtp_user, smtp_pass, attachment_path):
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    with open(attachment_path, 'rb') as file:
        attachment = MIMEApplication(file.read(), _subtype='csv')
        attachment.add_header('Content-Disposition', 'attachment', filename='differences.csv')
        msg.attach(attachment)

    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(smtp_user, smtp_pass)
        server.sendmail(from_email, to_email, msg.as_string())

# File paths and threshold
file_a = 'file_a.xml'
file_b = 'file_b.xml'
xsd_file = 'schema.xsd'  # Path to your XSD schema file
csv_a = 'file_a_out.csv'
csv_b = 'file_b_out.csv'
differences_csv = 'differences.csv'
key_elements = ['KeyElement1', 'KeyElement2']  # List of key elements to extract
threshold = 5  # Example threshold

# Email configuration
to_email = 'recipient@example.com'
from_email = 'your_email@example.com'
smtp_server = 'smtp.example.com'
smtp_port = 587
smtp_user = 'your_email@example.com'
smtp_pass = 'your_password'

# Validate XML files
if validate_xml(file_a, xsd_file) and validate_xml(file_b, xsd_file):
    # Extract key elements and their child elements to CSV
    extract_key_and_child_elements_to_csv(file_a, key_elements, csv_a)
    extract_key_and_child_elements_to_csv(file_b, key_elements, csv_b)

    # Read CSV to dictionaries
    dict_a, headers_a = read_csv_to_dict(csv_a)
    dict_b, headers_b = read_csv_to_dict(csv_b)

    # Compare and check threshold
    differences = compare_and_check_threshold(dict_a, dict_b, threshold)

    if differences:
        # Write differences to CSV
        write_differences_to_csv(differences, differences_csv, headers_a)
        
        # Send email with attachment
        subject = 'XML Content Differences Exceeding Threshold'
        body = f'The differences exceed the threshold of {threshold}. Please find the attached CSV file for details.'
        send_email_with_attachment(subject, body, to_email, from_email, smtp_server, smtp_port, smtp_user, smtp_pass, differences_csv)

    print("Comparison complete. Email sent if differences exceed the threshold.")
else:
    print("XML validation failed. Please check the XML files against the provided XSD schema.")
```

### Explanation:
1. **Validate XML:**
   - `validate_xml` function checks if the XML file adheres to the provided XSD schema.

2. **Extract Key and Child Elements to CSV:**
   - `extract_key_and_child_elements_to_csv` function extracts key elements and their child elements and writes them to a CSV file.

3. **Read CSV to Dictionary:**
   - `read_csv_to_dict` function reads the CSV file into a dictionary where the key is the first column and the value is a list of the remaining columns. It also returns the headers for later use.

4. **Compare and Check Threshold:**
   - `compare_and_check_threshold` function compares the dictionaries and checks if the differences exceed the threshold. Differences are computed using `difflib.ndiff`.

5. **Write Differences to CSV:**
   - `write_differences_to_csv` function writes the differences to a CSV file.

6. **Send Email with Attachment:**
   - `send_email_with_attachment` function sends an email with the differences CSV file attached.

### Running the Code:
- Ensure you have the `lxml` library installed.
- Update the `key_elements` list with the elements you want to extract.
- Set the `threshold` for what you consider a significant difference.
- Configure the email parameters with your SMTP server details.
- Run the script. It will validate the XML files, extract data, compare differences, and email the differences if they exceed the threshold.