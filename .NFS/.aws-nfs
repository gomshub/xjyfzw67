Setting up AWS NFS for on-premises servers using AWS Storage Gateway involves deploying an AWS Storage Gateway File Gateway on your on-premises infrastructure and configuring it to provide NFS shares backed by Amazon S3. Hereâ€™s a step-by-step guide to set it up:

### Step 1: Set Up AWS Storage Gateway File Gateway

#### Prerequisites
- An AWS account
- An Amazon S3 bucket to store the files
- A VM host (e.g., VMware ESXi, Microsoft Hyper-V) or an EC2 instance if deploying in AWS

#### Step 1.1: Create an S3 Bucket

1. **Log in to AWS Management Console.**
2. **Navigate to the S3 service.**
3. **Create a new S3 bucket** or use an existing one.
   - Choose a unique name for the bucket.
   - Select the appropriate region.
   - Configure options and permissions as needed.

#### Step 1.2: Download and Deploy the Storage Gateway VM

1. **Navigate to the AWS Storage Gateway console.**
2. **Click "Create gateway."**
3. **Choose "File gateway" and click "Next."**
4. **Download the VM image** for your hypervisor (VMware ESXi, Microsoft Hyper-V, KVM, etc.).
5. **Deploy the VM image** on your hypervisor.
6. **Configure the VM's network settings** to ensure it can communicate with AWS services (internet access required).

#### Step 1.3: Activate the Gateway

1. **Get the VM IP address** from your hypervisor console.
2. **In the AWS Storage Gateway console**, select the region and click "Next."
3. **Enter the IP address of the gateway VM** and click "Connect to gateway."
4. **Follow the prompts to activate the gateway**, providing the necessary details:
   - Gateway name
   - Time zone
5. **Select the S3 bucket** you created earlier for your file storage.

### Step 2: Configure File Share

1. **In the Storage Gateway console**, navigate to "File shares."
2. **Click "Create file share."**
3. **Select your gateway.**
4. **Configure the file share settings**:
   - **Amazon S3 bucket name**: The bucket you created earlier.
   - **Access settings**: Choose NFS and configure the allowed client IP addresses (CIDR).
   - **Object metadata settings**: Choose how you want to manage object metadata (optional).
   - **NFS export settings**: Configure export settings, like squash and root squash.
5. **Review and create the file share.**

### Step 3: Mount the NFS Share on On-Premises Servers

1. **Install NFS client** on your on-premises server if not already installed.

   For Ubuntu/Debian:
   ```bash
   sudo apt-get update
   sudo apt-get install nfs-common
   ```

   For CentOS/RHEL:
   ```bash
   sudo yum install nfs-utils
   ```

2. **Create a mount point** on your on-premises server:
   ```bash
   sudo mkdir -p /mnt/aws-nfs
   ```

3. **Mount the NFS share**:
   ```bash
   sudo mount -t nfs -o nolock <gateway_ip>:/<file_share> /mnt/aws-nfs
   ```

   Replace `<gateway_ip>` with the IP address of your Storage Gateway and `<file_share>` with the name of your file share.

4. **Verify the mount**:
   ```bash
   df -h /mnt/aws-nfs
   ```

5. **Optionally, add the mount to `/etc/fstab`** for persistent mounting:
   ```bash
   <gateway_ip>:/<file_share> /mnt/aws-nfs nfs defaults,nolock 0 0
   ```

### Step 4: Configure Post-Transfer Cleanup (Optional)

If you want to automatically delete files from the source server after transferring them to the NFS share, you can create a script to handle this process.

1. **Create a script** (e.g., `transfer_and_cleanup.sh`):
   ```bash
   #!/bin/bash

   SOURCE_DIR="/path/to/source/files"
   MOUNT_DIR="/mnt/aws-nfs"

   # Transfer files to AWS NFS
   cp $SOURCE_DIR/* $MOUNT_DIR/

   # Check if the transfer was successful
   if [ $? -eq 0 ]; then
       # Delete files from the source directory
       rm -rf $SOURCE_DIR/*
       echo "Files transferred and deleted successfully."
   else
       echo "File transfer failed!"
       exit 1
   fi
   ```

2. **Make the script executable**:
   ```bash
   chmod +x /path/to/transfer_and_cleanup.sh
   ```

3. **Schedule the script using cron** (optional):
   ```bash
   crontab -e
   ```

   Add a line to run the script at a specified time (e.g., every day at 2 AM):
   ```bash
   0 2 * * * /path/to/transfer_and_cleanup.sh
   ```

### Conclusion

By following these steps, you will have set up an AWS Storage Gateway File Gateway to provide NFS shares for your on-premises servers. This setup allows you to seamlessly transfer files from your local infrastructure to Amazon S3, leveraging the benefits of cloud storage while maintaining local access to your data. The optional script automates the cleanup process after file transfer, ensuring efficient data management.