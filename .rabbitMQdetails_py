| **Reason**                                         | **Request Endpoint**                   |
| -------------------------------------------------- | -------------------------------------- |
| **Get the list of all virtual hosts (vhosts)**     | `GET /api/vhosts`                      |
| **Get the list of all queues in a specific vhost** | `GET /api/queues/{vhost}`              |
| **Get the details of a specific queue in a vhost** | `GET /api/queues/{vhost}/{queue_name}` |
| **Get the list of consumers for a specific queue** | `GET /api/queues/{vhost}/{queue_name}` |

| **Reason**                                           | **Request Endpoint**                   | **Data to Look For in Response**                               | **Where to Find the Count**                                                                           |
| ---------------------------------------------------- | -------------------------------------- | -------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| **Get the list of all virtual hosts (vhosts)**       | `GET /api/vhosts`                      | A list of vhosts                                               | N/A (just a list of vhosts)                                                                           |
| **Get the list of all queues in a specific vhost**   | `GET /api/queues/{vhost}`              | A list of queues with attributes like name, durable, consumers | **Queue Count**: Number of queues in the vhost (length of the list)                                   |
| **Get the details of a specific queue in a vhost**   | `GET /api/queues/{vhost}/{queue_name}` | Queue details like name, consumer count, and consumer details  | **Consumer Count**: `consumers` field (total number of consumers)                                     |
| **Get the list of consumers for a specific queue**   | `GET /api/queues/{vhost}/{queue_name}` | Consumer details within `consumer_details` array               | **Channel Count**: Number of unique channels consuming from the queue (unique `channel_details.user`) |
| **Count of queues per channel** (based on consumers) | `GET /api/queues/{vhost}/{queue_name}` | Consumers list with channel details                            | **Channel Count**: Count unique channels (`consumer.channel_details.user`) consuming a queue          |




import requests
import csv
from requests.auth import HTTPBasicAuth

# Define RabbitMQ Management API URL and credentials
RABBITMQ_API_URL = "http://<your-rabbitmq-server>:15672/api"
USERNAME = "guest"  # Default username (change as needed)
PASSWORD = "guest"  # Default password (change as needed)

# Function to get vhosts
def get_vhosts():
    vhosts_url = f"{RABBITMQ_API_URL}/vhosts"
    response = requests.get(vhosts_url, auth=HTTPBasicAuth(USERNAME, PASSWORD))
    response.raise_for_status()
    return response.json()

# Function to get queues in a specific vhost
def get_queues(vhost):
    queues_url = f"{RABBITMQ_API_URL}/queues/{vhost}"
    response = requests.get(queues_url, auth=HTTPBasicAuth(USERNAME, PASSWORD))
    response.raise_for_status()
    return response.json()

# Function to get consumers of a specific queue in a vhost
def get_consumers(vhost, queue_name):
    queue_url = f"{RABBITMQ_API_URL}/queues/{vhost}/{queue_name}"
    response = requests.get(queue_url, auth=HTTPBasicAuth(USERNAME, PASSWORD))
    response.raise_for_status()
    queue_data = response.json()
    return queue_data.get('consumer_details', [])

# Function to write data to a CSV file
def write_to_csv(data):
    with open("rabbitmq_counts.csv", mode='w', newline='') as file:
        writer = csv.writer(file)
        # Write the header
        writer.writerow(["vhost", "queue_name", "consumer_count", "channel_count", "queue_count_in_vhost"])
        
        # Write the data
        for row in data:
            writer.writerow(row)

# Main function to fetch vhost, queue, and consumer details
def main():
    data = []  # List to store rows for CSV
    
    # Get all vhosts
    vhosts = get_vhosts()
    
    for vhost in vhosts:
        print(f"Fetching data for vhost: {vhost['name']}")
        
        # Get all queues in the vhost
        queues = get_queues(vhost['name'])
        
        # Calculate queue count per vhost
        queue_count_in_vhost = len(queues)
        
        for queue in queues:
            print(f"  Queue: {queue['name']}")
            
            # Get consumers for each queue
            consumers = get_consumers(vhost['name'], queue['name'])
            
            # Calculate consumer count per queue
            consumer_count = len(consumers)
            
            # To calculate queue count per channel, we will track which channels are consuming the queues
            channel_count = len(set([consumer['channel_details']['user'] for consumer in consumers]))  # Unique channels
            
            # Prepare data for CSV (vhost, queue_name, consumer_count, channel_count, queue_count_in_vhost)
            row = [
                vhost['name'], 
                queue['name'], 
                consumer_count, 
                channel_count,
                queue_count_in_vhost
            ]
            data.append(row)
    
    # Write the collected data to CSV
    write_to_csv(data)
    print("Data has been written to 'rabbitmq_counts.csv'.")

if __name__ == "__main__":
    try:
        main()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
