
To get a database session for a specific environment (such as “prod” or “quality”) in Python using SQLAlchemy, you can use multiple database connections and switch between them based on the environment. In SQLAlchemy, you can set up different databases and choose which one to connect to based on the environment you’re working in.

Approach
	1.	Define Multiple Database URIs:
In the Flask configuration, set up different database URIs for different environments (e.g., prod_db_uri, quality_db_uri).
	2.	Create a Custom Session Maker:
Use SQLAlchemy’s sessionmaker to create a session for each environment.
	3.	Switch Between Environments:
Based on the environment (e.g., prod or quality), select the appropriate database URI and use the session to interact with that database.

Step-by-Step Implementation

1. Configuration (in .env or config.py)

import os

class Config:
    # Common configuration
    SQLALCHEMY_TRACK_MODIFICATIONS = False

class DevelopmentConfig(Config):
    # Database URIs for different environments
    SQLALCHEMY_DATABASE_URI_PROD = os.getenv("SQLALCHEMY_DATABASE_URI_PROD")
    SQLALCHEMY_DATABASE_URI_QUALITY = os.getenv("SQLALCHEMY_DATABASE_URI_QUALITY")

In the .env file, you can specify the URIs for the databases:

SQLALCHEMY_DATABASE_URI_PROD=postgresql://user:password@prod_host/dbname
SQLALCHEMY_DATABASE_URI_QUALITY=postgresql://user:password@quality_host/dbname

2. Create Database Sessions

In your application code, set up a session maker that can switch between the environments:

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session

class DBSessionManager:
    def __init__(self, app):
        self.app = app
        self.prod_session = None
        self.quality_session = None

    def get_session(self, environment):
        """Get the session for the specified environment (prod or quality)."""
        if environment == "prod":
            if not self.prod_session:
                # Create session for prod environment
                engine = create_engine(self.app.config["SQLALCHEMY_DATABASE_URI_PROD"])
                Session = scoped_session(sessionmaker(bind=engine))
                self.prod_session = Session
            return self.prod_session()
        elif environment == "quality":
            if not self.quality_session:
                # Create session for quality environment
                engine = create_engine(self.app.config["SQLALCHEMY_DATABASE_URI_QUALITY"])
                Session = scoped_session(sessionmaker(bind=engine))
                self.quality_session = Session
            return self.quality_session()
        else:
            raise ValueError("Unknown environment: {}".format(environment))

# Instantiate DBSessionManager in your app
db_session_manager = DBSessionManager(app)

3. Switching Between Environments

When you need to interact with the database, you can call get_session() with the desired environment ("prod" or "quality").

@app.route("/sync", methods=["POST"])
def sync_issues():
    try:
        data = request.get_json()
        filter_id = data["filter_id"]
        environment = data["environment"]  # Pass either 'prod' or 'quality'

        # Get the appropriate session based on the environment
        session = db_session_manager.get_session(environment)
        
        # Fetch and sync issues
        issues_from_jira = jira_api.get_issues(filter_id)
        prod_issues, quality_issues = categorize_issues(issues_from_jira)
        sync_issues_to_environment(prod_issues, session, "prod")
        sync_issues_to_environment(quality_issues, session, "quality")

        # Generate HTML content
        html_content = generate_html(prod_issues, quality_issues)
        
        # Write the HTML content to a file
        output_file = "/tmp/result_list.html"
        with open(output_file, "w") as file:
            file.write(html_content)

        # Return the HTML file as a response to the client
        response = send_file(output_file, as_attachment=True, download_name="Result_list.html")
        
        # Delete the file after sending
        os.remove(output_file)

        return response

    except Exception as e:
        return jsonify({"error": str(e)}), 500

In this code:
	•	get_session: Retrieves the session based on the environment (prod or quality). This allows you to switch between databases.
	•	sync_issues_to_environment: Passes the session to the function where database operations (insert, update) are performed for the correct environment.

4. Session in the sync_issues_to_environment Function

Here’s an example of how you might use the session in the sync_issues_to_environment function:

def sync_issues_to_environment(issues, session, environment):
    """Synchronize issues to the database for the given environment."""
    for issue in issues:
        job_number = extract_job_number(issue["fields"]["summary"])
        existing_issue = session.query(JiraIssue).filter_by(jira_number=issue["key"]).first()

        if existing_issue:
            # Update existing record
            existing_issue.status = issue["fields"]["status"]["name"]
            existing_issue.summary = issue["fields"]["summary"]
            existing_issue.criticity = issue["fields"]["priority"]["name"]
            existing_issue.description = issue["fields"]["description"]
            existing_issue.creation_date = issue["fields"]["created"]
            existing_issue.comments = issue["fields"]["comment"]["comments"]
            # Assume first and last comment are the first and last in the list
            if issue["fields"]["comment"]["comments"]:
                existing_issue.first_comment = issue["fields"]["comment"]["comments"][0]["body"]
                existing_issue.last_comment = issue["fields"]["comment"]["comments"][-1]["body"]
            existing_issue.job_number = job_number
        else:
            # Insert new record
            new_issue = JiraIssue(
                jira_number=issue["key"],
                status=issue["fields"]["status"]["name"],
                summary=issue["fields"]["summary"],
                criticity=issue["fields"]["priority"]["name"],
                description=issue["fields"]["description"],
                creation_date=issue["fields"]["created"],
                comments=issue["fields"]["comment"]["comments"],
                first_comment=issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else None,
                last_comment=issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else None,
                job_number=job_number
            )
            session.add(new_issue)
        
        session.commit()

Summary
	•	Environment-Specific Database Sessions: The DBSessionManager class dynamically provides a session for the specified environment (prod or quality).
	•	Switching Between Databases: Depending on the environment parameter passed to the API, the appropriate database session is used for synchronizing JIRA issues.
	•	Session Management: By using scoped_session from SQLAlchemy, sessions are managed in a thread-safe way, ensuring each thread (or request) gets its own session.

This approach allows you to easily switch between multiple databases in different environments within the same application, ensuring that operations are performed on the correct database based on the environment.
=#=##

Here is the complete implementation of the /sync endpoint along with all the dependent functions, including the necessary operations to sync JIRA issues to the database, generate the HTML report, and return it as a downloadable file.

Complete Code for /sync Endpoint and Dependencies

import os
from flask import Flask, request, jsonify, send_file, current_app
from flask_sqlalchemy import SQLAlchemy
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

app = Flask(__name__)
app.config.from_pyfile('.env')  # Load config from .env file
db = SQLAlchemy(app)

# Assuming you have models for prod and quality environments
class JiraIssue(db.Model):
    __tablename__ = 'jira_issues'
    id = db.Column(db.Integer, primary_key=True)
    jira_number = db.Column(db.String(50), nullable=False)
    status = db.Column(db.String(50))
    summary = db.Column(db.String(255))
    job_number = db.Column(db.String(50))
    criticity = db.Column(db.String(50))
    description = db.Column(db.String(255))
    creation_date = db.Column(db.DateTime)
    comments = db.Column(db.Text)
    first_comment = db.Column(db.Text)
    last_comment = db.Column(db.Text)
    update_comment = db.Column(db.Text)
    update_status = db.Column(db.String(50))

# Helper functions
def extract_job_number(summary):
    """Extract job number from summary using regex."""
    import re
    match = re.search(r'(P01|Q01)\d+', summary)
    return match.group(0) if match else None

def categorize_issues(issues_from_jira):
    """Categorize issues into Prod and Quality based on job number."""
    prod_issues = []
    quality_issues = []

    for issue in issues_from_jira:
        job_number = extract_job_number(issue["fields"]["summary"])
        if job_number and job_number.startswith("P01"):
            prod_issues.append(issue)
        elif job_number and job_number.startswith("Q01"):
            quality_issues.append(issue)

    return prod_issues, quality_issues

def sync_issues_to_environment(issues, environment):
    """Synchronize issues to the database for the given environment."""
    session = db.session  # Connect to the appropriate environment session
    for issue in issues:
        job_number = extract_job_number(issue["fields"]["summary"])
        existing_issue = JiraIssue.query.filter_by(jira_number=issue["key"]).first()

        if existing_issue:
            # Update existing record
            existing_issue.status = issue["fields"]["status"]["name"]
            existing_issue.summary = issue["fields"]["summary"]
            existing_issue.criticity = issue["fields"]["priority"]["name"]
            existing_issue.description = issue["fields"]["description"]
            existing_issue.creation_date = issue["fields"]["created"]
            existing_issue.comments = issue["fields"]["comment"]["comments"]
            # Assume first and last comment are the first and last in the list
            if issue["fields"]["comment"]["comments"]:
                existing_issue.first_comment = issue["fields"]["comment"]["comments"][0]["body"]
                existing_issue.last_comment = issue["fields"]["comment"]["comments"][-1]["body"]
            existing_issue.job_number = job_number
        else:
            # Insert new record
            new_issue = JiraIssue(
                jira_number=issue["key"],
                status=issue["fields"]["status"]["name"],
                summary=issue["fields"]["summary"],
                criticity=issue["fields"]["priority"]["name"],
                description=issue["fields"]["description"],
                creation_date=issue["fields"]["created"],
                comments=issue["fields"]["comment"]["comments"],
                first_comment=issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else None,
                last_comment=issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else None,
                job_number=job_number
            )
            session.add(new_issue)
        
        session.commit()

def generate_html(prod_issues, quality_issues):
    """Generate HTML content for the result."""
    html = "<html><body>"
    
    # Prod Issues
    if prod_issues:
        html += "<h2>Updated Successfully to Prod Environment</h2>"
        html += "<table border='1'><tr><th>JIRA</th><th>Job Number</th><th>Criticity</th><th>Creation Date</th></tr>"
        for issue in prod_issues:
            job_number = extract_job_number(issue["fields"]["summary"])
            html += (
                f"<tr><td><a href='{issue['self']}'>{issue['key']}</a></td>"
                f"<td>{job_number}</td>"
                f"<td>{issue['fields'].get('priority', {}).get('name', 'N/A')}</td>"
                f"<td>{issue['fields']['created']}</td></tr>"
            )
        html += "</table>"

    # Quality Issues
    if quality_issues:
        html += "<h2>Updated Successfully to Quality Environment</h2>"
        html += "<table border='1'><tr><th>JIRA</th><th>Job Number</th><th>Criticity</th><th>Creation Date</th></tr>"
        for issue in quality_issues:
            job_number = extract_job_number(issue["fields"]["summary"])
            html += (
                f"<tr><td><a href='{issue['self']}'>{issue['key']}</a></td>"
                f"<td>{job_number}</td>"
                f"<td>{issue['fields'].get('priority', {}).get('name', 'N/A')}</td>"
                f"<td>{issue['fields']['created']}</td></tr>"
            )
        html += "</table>"

    html += "</body></html>"
    return html

@app.route("/sync", methods=["POST"])
def sync_issues():
    try:
        data = request.get_json()
        filter_id = data["filter_id"]

        # Fetch and sync issues
        issues_from_jira = jira_api.get_issues(filter_id)
        prod_issues, quality_issues = categorize_issues(issues_from_jira)
        sync_issues_to_environment(prod_issues, "prod")
        sync_issues_to_environment(quality_issues, "quality")

        # Generate HTML content
        html_content = generate_html(prod_issues, quality_issues)
        
        # Write the HTML content to a file
        output_file = "/tmp/result_list.html"
        with open(output_file, "w") as file:
            file.write(html_content)

        # Return the HTML file as a response to the client
        response = send_file(output_file, as_attachment=True, download_name="Result_list.html")
        
        # Delete the file after sending
        os.remove(output_file)

        return response

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)

Explanation of the Code:
	1.	JiraIssue Model:
The JiraIssue model represents the structure of your database table where JIRA issues will be stored. It has all necessary fields like jira_number, status, summary, etc.
	2.	Helper Functions:
	•	extract_job_number: This function extracts the job number from the JIRA issue summary using regular expressions.
	•	categorize_issues: This function separates the issues into prod_issues and quality_issues based on the job number extracted from the summary.
	•	sync_issues_to_environment: This function synchronizes issues to the database. If the issue already exists, it updates the record; otherwise, it inserts a new record.
	3.	Generate HTML:
	•	The generate_html function builds an HTML report containing tables of JIRA issues categorized into Prod and Quality environments.
	4.	/sync Endpoint:
	•	This endpoint fetches JIRA issues using a given filter, categorizes them, syncs them to the database, generates an HTML report, and returns it as a downloadable file (Result_list.html).
	•	The file is temporarily stored in /tmp/result_list.html and is returned to the user for download.
	•	After sending the file, the temporary file is deleted to keep the environment clean.

Usage Flow:
	1.	Sync Issues:
JIRA issues are fetched, categorized, and synchronized with the database (Prod/Quality).
	2.	Generate Report:
An HTML file containing the sync results is generated.
	3.	Download File:
The HTML file is returned to the client for download.
	4.	File Cleanup:
The temporary file is deleted after it is sent to the user.

Environment Configuration (.env):

SQLALCHEMY_DATABASE_URI=your_database_uri
SQLALCHEMY_TRACK_MODIFICATIONS=False

Dependencies:
	1.	Flask for web framework.
	2.	SQLAlchemy for ORM-based database interaction.
	3.	smtplib for email sending (if needed for other operations).
	4.	Regex for extracting job numbers.

Install the necessary dependencies using pip:

pip install flask flask_sqlalchemy

This structure should fulfill your requirements for syncing JIRA issues to the database and returning an HTML report as a downloadable file. Let me know if you need further assistance!



=#=#
To ensure synchronization happens with the correct database (Prod or Quality) based on the Job Number in the summary, you can configure separate database connections for Prod and Quality. Depending on the detected Job Number pattern, the application will dynamically switch to the corresponding database.

Implementation Steps
	1.	Set up Separate Configurations for Prod and Quality Databases
Use Flask’s configuration settings to define separate connection strings for Prod and Quality.
	2.	Detect Environment from Job Number
Parse the Job Number from the Summary using a regular expression.
	•	P01 in the Job Number maps to Prod.
	•	Q01 in the Job Number maps to Quality.
	3.	Use Scoped Sessions for Dynamic DB Binding
Use SQLAlchemy’s scoped_session to dynamically bind the database session based on the environment.
	4.	Modify the db.py to Dynamically Switch Connections

Database Configurations

config.py

class Config:
    # Default settings
    SQLALCHEMY_TRACK_MODIFICATIONS = False

class ProdConfig(Config):
    SQLALCHEMY_DATABASE_URI = "oracle+cx_oracle://user:password@prod-db-host:1521/prod_service_name"

class QualityConfig(Config):
    SQLALCHEMY_DATABASE_URI = "oracle+cx_oracle://user:password@quality-db-host:1521/quality_service_name"

Dynamic Database Switching

app/db.py

from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker
from app.db_models import Base
from flask import current_app

class DatabaseSessionManager:
    def __init__(self, prod_uri, quality_uri):
        self.prod_engine = create_engine(prod_uri)
        self.quality_engine = create_engine(quality_uri)
        self.sessions = {
            "prod": scoped_session(sessionmaker(bind=self.prod_engine)),
            "quality": scoped_session(sessionmaker(bind=self.quality_engine)),
        }

    def get_session(self, environment):
        """Get the database session for the specified environment."""
        return self.sessions[environment]

# Initialize the session manager
db_manager = DatabaseSessionManager(
    prod_uri=current_app.config["SQLALCHEMY_DATABASE_URI_PROD"],
    quality_uri=current_app.config["SQLALCHEMY_DATABASE_URI_QUALITY"],
)

def get_environment_from_job_number(job_number):
    """Determine the environment (prod or quality) based on the job number."""
    if job_number.startswith("P01"):
        return "prod"
    elif job_number.startswith("Q01"):
        return "quality"
    else:
        raise ValueError(f"Invalid job number format: {job_number}")

Updated /sync Endpoint with Dynamic DB Switching

@sync_service.route("/sync", methods=["POST"])
def sync_issues():
    try:
        data = request.get_json()
        filter_id = data["filter_id"]

        # Fetch issues from JIRA API
        issues_from_jira = jira_api.get_issues(filter_id)

        # Categorize JIRA issues by environment
        prod_issues = []
        quality_issues = []
        for issue in issues_from_jira:
            job_number = extract_job_number(issue["fields"]["summary"])
            if job_number.startswith("P01"):
                prod_issues.append(issue)
            elif job_number.startswith("Q01"):
                quality_issues.append(issue)

        # Sync issues to Prod DB
        if prod_issues:
            prod_session = db_manager.get_session("prod")
            sync_issues_to_db(prod_issues, prod_session)

        # Sync issues to Quality DB
        if quality_issues:
            quality_session = db_manager.get_session("quality")
            sync_issues_to_db(quality_issues, quality_session)

        # Generate HTML Report
        html_content = generate_html(prod_issues, quality_issues)
        with open("result_list.html", "w") as file:
            file.write(html_content)

        return send_file("result_list.html")
    except Exception as e:
        return jsonify({"error": str(e)}), 500


def sync_issues_to_db(issues, session):
    """Synchronize JIRA issues with the database (insert, update, delete)."""
    try:
        # Fetch existing issues in the database
        existing_issues = session.query(JiraIssue).all()
        jira_keys_in_db = {issue.jira_number for issue in existing_issues}

        # Identify operations
        jira_keys_from_jira = {issue["key"] for issue in issues}
        jira_keys_to_insert = jira_keys_from_jira - jira_keys_in_db
        jira_keys_to_update = jira_keys_from_jira & jira_keys_in_db
        jira_keys_to_delete = jira_keys_in_db - jira_keys_from_jira

        # Insert new issues
        for issue in issues:
            if issue["key"] in jira_keys_to_insert:
                job_number = extract_job_number(issue["fields"]["summary"])
                new_issue = JiraIssue(
                    jira_number=issue["key"],
                    status=issue["fields"]["status"]["name"],
                    summary=issue["fields"]["summary"],
                    job_number=job_number,
                    criticity=issue["fields"].get("priority", {}).get("name", "Unknown"),
                    description=issue["fields"].get("description", ""),
                    creation_date=issue["fields"]["created"],
                    comments="\n".join([c["body"] for c in issue["fields"]["comment"]["comments"]]),
                    first_comment=issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else "",
                    last_comment=issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else "",
                )
                session.add(new_issue)

        # Update existing issues
        for issue in issues:
            if issue["key"] in jira_keys_to_update:
                db_issue = session.query(JiraIssue).get(issue["key"])
                db_issue.status = issue["fields"]["status"]["name"]
                db_issue.summary = issue["fields"]["summary"]
                db_issue.job_number = extract_job_number(issue["fields"]["summary"])
                db_issue.criticity = issue["fields"].get("priority", {}).get("name", "Unknown")
                db_issue.description = issue["fields"].get("description", "")
                db_issue.creation_date = issue["fields"]["created"]
                db_issue.comments = "\n".join([c["body"] for c in issue["fields"]["comment"]["comments"]])
                db_issue.first_comment = issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else ""
                db_issue.last_comment = issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else ""

        # Delete issues no longer in JIRA
        for jira_key in jira_keys_to_delete:
            db_issue = session.query(JiraIssue).get(jira_key)
            if db_issue:
                session.delete(db_issue)

        session.commit()
    except Exception as e:
        session.rollback()
        raise Exception(f"Error during DB sync: {str(e)}")

Summary of Updates
	•	Separate Database Connections:
	•	prod DB for job numbers starting with P01.
	•	quality DB for job numbers starting with Q01.
	•	Dynamic Switching Logic:
Based on the job_number parsed from the issue’s summary.
	•	DML Operations:
	•	Insert, Update, and Delete implemented dynamically for each environment.

Let me know if you need further assistance!


#=#=#=#
Here is the complete Python module structure and codebase, including Kubernetes deployment, secret management, and .env configuration for development. The deployment ensures JIRA token and database credentials are securely managed.

Directory Structure

jira_sync_service/
│
├── app/
│   ├── __init__.py
│   ├── db.py
│   ├── jira_api.py
│   ├── utils.py
│   ├── sync_service.py
│
├── templates/
│   ├── result_list.html  # Template for rendering HTML (if dynamic rendering needed)
│
├── tests/
│   ├── test_sync_service.py
│
├── requirements.txt
├── Dockerfile
├── .env                 # Local development environment variables
├── deployment/
│   ├── secrets.yaml
│   ├── deployment.yaml
│   ├── service.yaml
│   ├── helm_chart/
│       ├── Chart.yaml
│       ├── templates/
│           ├── deployment.yaml
│           ├── service.yaml
│           ├── secrets.yaml
│       ├── values.yaml
│
└── app.py

Codebase

1. app/__init__.py

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Initialize Flask and SQLAlchemy
db = SQLAlchemy()

def create_app():
    app = Flask(__name__)

    # Configurations
    app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv("DB_URI")
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

    # Initialize extensions
    db.init_app(app)

    # Register blueprints
    from app.sync_service import sync_service
    app.register_blueprint(sync_service, url_prefix="/api")

    return app

2. app/db.py

from app import db

class JiraIssue(db.Model):
    __tablename__ = "jira_issues"

    jira_number = db.Column(db.String(50), primary_key=True)
    status = db.Column(db.String(50))
    summary = db.Column(db.String(255))
    job_number = db.Column(db.String(50))
    criticity = db.Column(db.String(50))
    description = db.Column(db.Text)
    creation_date = db.Column(db.DateTime)
    comments = db.Column(db.Text)
    first_comment = db.Column(db.Text)
    last_comment = db.Column(db.Text)
    update_comment = db.Column(db.Text)
    update_status = db.Column(db.Text)

3. app/jira_api.py

import requests

class JiraAPI:
    def __init__(self, base_url, token):
        self.base_url = base_url
        self.headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

    def get_issue(self, jira_id):
        url = f"{self.base_url}/rest/api/3/issue/{jira_id}"
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()

    def get_issues(self, filter_id):
        url = f"{self.base_url}/rest/api/3/search?jql=filter={filter_id}"
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()["issues"]

    def update_comment(self, jira_id, comment):
        url = f"{self.base_url}/rest/api/3/issue/{jira_id}/comment"
        payload = {"body": comment}
        response = requests.post(url, json=payload, headers=self.headers)
        response.raise_for_status()
        return response.json()

4. app/utils.py

import re
from flask import render_template

def extract_job_number(summary):
    match = re.search(r"\bJOB-(\d+)\b", summary)
    return match.group(0) if match else None

def generate_html(issues_with_job, issues_without_job):
    html = "<html><body><h1>JIRA Sync Results</h1>"
    if issues_with_job:
        html += "<h2>Updated successfully to respective environment</h2><table><tr><th>JIRA</th><th>Job Number</th><th>Criticity</th><th>Creation Date</th></tr>"
        for issue in issues_with_job:
            html += f"<tr><td><a href='{issue['self']}'>{issue['key']}</a></td><td>{extract_job_number(issue['fields']['summary'])}</td><td>{issue['fields']['priority']['name']}</td><td>{issue['fields']['created']}</td></tr>"
        html += "</table>"
    if issues_without_job:
        html += "<h2>Not Updated into DB</h2><table><tr><th>JIRA</th><th>Criticity</th><th>Creation Date</th></tr>"
        for issue in issues_without_job:
            html += f"<tr><td><a href='{issue['self']}'>{issue['key']}</a></td><td>{issue['fields']['priority']['name']}</td><td>{issue['fields']['created']}</td></tr>"
        html += "</table>"
    html += "</body></html>"
    return html

5. requirements.txt

Flask==2.3.3
Flask-SQLAlchemy==3.0.5
python-dotenv==1.0.0
requests==2.31.0

6. deployment/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: jira-sync-secrets
type: Opaque
data:
  JIRA_TOKEN: <base64_encoded_token>
  DB_URI: <base64_encoded_db_uri>

7. deployment/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-sync-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jira-sync-service
  template:
    metadata:
      labels:
        app: jira-sync-service
    spec:
      containers:
      - name: jira-sync-service
        image: jira-sync-service:latest
        env:
        - name: JIRA_TOKEN
          valueFrom:
            secretKeyRef:
              name: jira-sync-secrets
              key: JIRA_TOKEN
        - name: DB_URI
          valueFrom:
            secretKeyRef:
              name: jira-sync-secrets
              key: DB_URI
        ports:
        - containerPort: 5000

8. .env

FLASK_ENV=development
DB_URI=oracle+cx_oracle://username:password@host:port/sid
JIRA_TOKEN=<your_jira_token>

Running the Application

Local Development

# Install dependencies
pip install -r requirements.txt

# Run migrations (if needed)
flask db upgrade

# Run the app
flask run --host=0.0.0.0 --port=5000

Docker Build

# Build Docker image
docker build -t jira-sync-service .

# Run Docker container
docker run -d -p 5000:5000 --env-file .env jira-sync-service

Kubernetes Deployment

# Apply secrets
kubectl apply -f deployment/secrets.yaml

# Apply deployment
kubectl apply -f deployment/deployment.yaml

Let me know if you need further clarifications!

=#=#

Here is the full implementation of your requirement with Flask, Oracle Database interaction, and Kubernetes configuration:

Directory Structure

jira-sync-service/
├── app/
│   ├── __init__.py          # Initialize Flask app and DB
│   ├── db.py                # Database model and utilities
│   ├── jira_api.py          # Jira API interaction
│   ├── sync_service.py      # Sync logic and main service routes
│   ├── utils.py             # Utility functions for HTML generation, regex
│   ├── templates/
│   │   └── result_list.html # HTML template for the output
├── helm/
│   ├── Chart.yaml           # Helm chart metadata
│   ├── templates/
│   │   ├── deployment.yaml  # Kubernetes Deployment YAML
│   │   ├── service.yaml     # Kubernetes Service YAML
├── requirements.txt         # Python dependencies
├── app.py                   # Entry point for Flask app
├── Dockerfile               # Dockerfile for the service
└── README.md                # Instructions

Python Code

app/__init__.py

from flask import Flask
from app.db import init_db

def create_app():
    app = Flask(__name__)
    app.config.from_mapping({
        "SQLALCHEMY_DATABASE_URI": "oracle+cx_oracle://user:password@host:port/service_name",
        "SQLALCHEMY_TRACK_MODIFICATIONS": False
    })
    init_db(app)
    return app

app/db.py

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class JiraIssue(db.Model):
    __tablename__ = "jira_issues"

    jira_number = db.Column(db.String(20), primary_key=True)
    status = db.Column(db.String(50))
    summary = db.Column(db.Text)
    job_number = db.Column(db.String(50), nullable=True)
    criticity = db.Column(db.String(20))
    description = db.Column(db.Text)
    creation_date = db.Column(db.DateTime)
    comments = db.Column(db.Text)
    first_comment = db.Column(db.Text)
    last_comment = db.Column(db.Text)
    update_comment = db.Column(db.Text, nullable=True)
    update_status = db.Column(db.Text, nullable=True)

def init_db(app):
    db.init_app(app)
    with app.app_context():
        db.create_all()

app/jira_api.py

import requests

class JiraAPI:
    def __init__(self, base_url, token):
        self.base_url = base_url
        self.headers = {"Authorization": f"Bearer {token}"}

    def get_issues(self, filter_id):
        url = f"{self.base_url}/rest/api/2/search?jql=filter={filter_id}"
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()["issues"]

    def get_issue(self, jira_id):
        url = f"{self.base_url}/rest/api/2/issue/{jira_id}"
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()

    def update_comment(self, jira_id, comment):
        url = f"{self.base_url}/rest/api/2/issue/{jira_id}/comment"
        response = requests.post(url, headers=self.headers, json={"body": comment})
        response.raise_for_status()
        return response.json()

app/utils.py

import re
from flask import render_template

def extract_job_number(summary):
    match = re.search(r"JOB-(\d+)", summary)
    return match.group(0) if match else None

def generate_html(issues_with_job, issues_without_job):
    return render_template(
        "result_list.html",
        updated_issues=issues_with_job,
        not_updated_issues=issues_without_job
    )

app/sync_service.py

from flask import Blueprint, request, jsonify, send_file
from app.db import db, JiraIssue
from app.jira_api import JiraAPI
from app.utils import extract_job_number, generate_html
import os

sync_service = Blueprint("sync_service", __name__)

# Initialize Jira API
jira_api = JiraAPI(base_url="https://your-jira-instance.atlassian.net", token="your_bearer_token")

@sync_service.route("/fetch_jira/<jira_id>", methods=["GET"])
def fetch_jira(jira_id):
    issue = jira_api.get_issue(jira_id)
    return jsonify(issue)

@sync_service.route("/sync", methods=["POST"])
def sync_issues():
    data = request.get_json()
    filter_id = data["filter_id"]

    # Fetch issues from JIRA API
    issues = jira_api.get_issues(filter_id)

    issues_with_job = []
    issues_without_job = []

    for issue in issues:
        job_number = extract_job_number(issue["fields"]["summary"])
        db_issue = JiraIssue.query.get(issue["key"])

        if db_issue:
            db_issue.status = issue["fields"]["status"]["name"]
            db_issue.summary = issue["fields"]["summary"]
            db_issue.job_number = job_number
            db_issue.criticity = issue["fields"].get("priority", {}).get("name", "Unknown")
            db_issue.description = issue["fields"].get("description", "")
            db_issue.creation_date = issue["fields"]["created"]
            db_issue.comments = "\n".join([comment["body"] for comment in issue["fields"]["comment"]["comments"]])
            db_issue.first_comment = issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else ""
            db_issue.last_comment = issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else ""
        else:
            db_issue = JiraIssue(
                jira_number=issue["key"],
                status=issue["fields"]["status"]["name"],
                summary=issue["fields"]["summary"],
                job_number=job_number,
                criticity=issue["fields"].get("priority", {}).get("name", "Unknown"),
                description=issue["fields"].get("description", ""),
                creation_date=issue["fields"]["created"],
                comments="\n".join([comment["body"] for comment in issue["fields"]["comment"]["comments"]]),
                first_comment=issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else "",
                last_comment=issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else ""
            )
            db.session.add(db_issue)

        if job_number:
            issues_with_job.append(issue)
        else:
            issues_without_job.append(issue)

    db.session.commit()

    # Generate HTML
    html_content = generate_html(issues_with_job, issues_without_job)
    with open("result_list.html", "w") as file:
        file.write(html_content)

    return send_file("result_list.html")

app/templates/result_list.html

<!DOCTYPE html>
<html>
<head>
    <title>Result List</title>
</head>
<body>
    <h1>Updated successfully to respective environment</h1>
    <table border="1">
        <tr>
            <th>JIRA Number</th>
            <th>Job Number</th>
            <th>Criticity</th>
            <th>Creation Date</th>
        </tr>
        {% for issue in updated_issues %}
        <tr>
            <td><a href="https://your-jira-instance.atlassian.net/browse/{{ issue.key }}">{{ issue.key }}</a></td>
            <td>{{ issue.fields.summary }}</td>
            <td>{{ issue.fields.priority.name }}</td>
            <td>{{ issue.fields.created }}</td>
        </tr>
        {% endfor %}
    </table>

    <h1>Not Updated into DB</h1>
    <table border="1">
        <tr>
            <th>JIRA Number</th>
            <th>Criticity</th>
            <th>Creation Date</th>
        </tr>
        {% for issue in not_updated_issues %}
        <tr>
            <td><a href="https://your-jira-instance.atlassian.net/browse/{{ issue.key }}">{{ issue.key }}</a></td>
            <td>{{ issue.fields.priority.name }}</td>
            <td>{{ issue.fields.created }}</td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>

Kubernetes Deployment and Helm Chart

helm/templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jira-sync-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jira-sync-service
  template:
    metadata:
      labels:
        app: jira-sync-service
    spec:
      containers:
      - name: jira-sync-service
        image: your-docker-image
        ports:
        - containerPort: 5000
        env:
        - name: ORACLE_DB_URI
          valueFrom:
            secretKeyRef:
              name: oracle-db-secret
              key: uri

Let me know if you need further details or customizations!

=#=#=###


Here is the complete implementation with all four services as requested:

Updated Routes
	1.	Fetch details of an individual JIRA (/fetch_jira/<jira_id>).
	2.	Get details of the list of JIRAs in a filter as an HTML page (/fetch_issues/<filter_id>).
	3.	Synchronize JIRAs to DB based on Job Number (/sync).
	4.	Update a comment on a JIRA (/update_comment/<jira_id>).

Complete app/sync_service.py

from flask import Blueprint, request, jsonify, send_file
from app.db import db, JiraIssue
from app.jira_api import JiraAPI
from app.utils import extract_job_number, generate_html
import os

sync_service = Blueprint("sync_service", __name__)

# Initialize Jira API
jira_api = JiraAPI(base_url="https://your-jira-instance.atlassian.net", token="your_bearer_token")


# 1. Fetch details of an individual JIRA
@sync_service.route("/fetch_jira/<jira_id>", methods=["GET"])
def fetch_jira(jira_id):
    try:
        issue = jira_api.get_issue(jira_id)
        return jsonify(issue)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# 2. Get details of the list of JIRAs in a filter as HTML page
@sync_service.route("/fetch_issues/<filter_id>", methods=["GET"])
def fetch_issues(filter_id):
    try:
        issues = jira_api.get_issues(filter_id)
        issues_with_job = []
        issues_without_job = []

        for issue in issues:
            job_number = extract_job_number(issue["fields"]["summary"])
            if job_number:
                issues_with_job.append(issue)
            else:
                issues_without_job.append(issue)

        # Generate HTML
        html_content = generate_html(issues_with_job, issues_without_job)
        with open("result_list.html", "w") as file:
            file.write(html_content)

        return send_file("result_list.html")
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# 3. Synchronize JIRAs to DB based on Job Number
@sync_service.route("/sync", methods=["POST"])
def sync_issues():
    try:
        data = request.get_json()
        filter_id = data["filter_id"]

        # Fetch issues from JIRA API
        issues = jira_api.get_issues(filter_id)

        issues_with_job = []
        issues_without_job = []

        for issue in issues:
            job_number = extract_job_number(issue["fields"]["summary"])
            db_issue = JiraIssue.query.get(issue["key"])

            if db_issue:
                db_issue.status = issue["fields"]["status"]["name"]
                db_issue.summary = issue["fields"]["summary"]
                db_issue.job_number = job_number
                db_issue.criticity = issue["fields"].get("priority", {}).get("name", "Unknown")
                db_issue.description = issue["fields"].get("description", "")
                db_issue.creation_date = issue["fields"]["created"]
                db_issue.comments = "\n".join([comment["body"] for comment in issue["fields"]["comment"]["comments"]])
                db_issue.first_comment = issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else ""
                db_issue.last_comment = issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else ""
            else:
                db_issue = JiraIssue(
                    jira_number=issue["key"],
                    status=issue["fields"]["status"]["name"],
                    summary=issue["fields"]["summary"],
                    job_number=job_number,
                    criticity=issue["fields"].get("priority", {}).get("name", "Unknown"),
                    description=issue["fields"].get("description", ""),
                    creation_date=issue["fields"]["created"],
                    comments="\n".join([comment["body"] for comment in issue["fields"]["comment"]["comments"]]),
                    first_comment=issue["fields"]["comment"]["comments"][0]["body"] if issue["fields"]["comment"]["comments"] else "",
                    last_comment=issue["fields"]["comment"]["comments"][-1]["body"] if issue["fields"]["comment"]["comments"] else ""
                )
                db.session.add(db_issue)

            if job_number:
                issues_with_job.append(issue)
            else:
                issues_without_job.append(issue)

        db.session.commit()

        # Generate HTML
        html_content = generate_html(issues_with_job, issues_without_job)
        with open("result_list.html", "w") as file:
            file.write(html_content)

        return send_file("result_list.html")
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# 4. Update a comment on a JIRA
@sync_service.route("/update_comment/<jira_id>", methods=["POST"])
def update_comment(jira_id):
    try:
        data = request.get_json()
        comment = data["comment"]

        # Fetch comment to update from DB if needed
        db_issue = JiraIssue.query.get(jira_id)
        if not db_issue:
            return jsonify({"error": f"JIRA ID {jira_id} not found in DB"}), 404

        db_issue.update_comment = comment
        db.session.commit()

        # Update the comment in JIRA
        response = jira_api.update_comment(jira_id, comment)
        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

Summary of Services
	1.	Fetch Individual JIRA
	•	URL: /fetch_jira/<jira_id>
	•	Method: GET
	•	Description: Fetches details of a single JIRA using its ID.
	2.	Fetch Issues as HTML
	•	URL: /fetch_issues/<filter_id>
	•	Method: GET
	•	Description: Fetches all issues in a filter and returns an HTML file categorizing them based on Job Numbers.
	3.	Synchronize JIRAs to DB
	•	URL: /sync
	•	Method: POST
	•	Description: Synchronizes JIRA issues with the database based on the filter and Job Numbers.
	4.	Update Comment on JIRA
	•	URL: /update_comment/<jira_id>
	•	Method: POST
	•	Payload: { "comment": "Updated comment text" }
	•	Description: Updates the Update_comment field in DB and JIRA.

Test Scenarios

You can test these routes using curl or any REST API client like Postman.

Example Requests:
	1.	Fetch JIRA by ID:

curl -X GET http://localhost:5000/fetch_jira/JIRA-123


	2.	Fetch Issues as HTML:

curl -X GET http://localhost:5000/fetch_issues/12345


	3.	Synchronize Issues:

curl -X POST http://localhost:5000/sync -H "Content-Type: application/json" -d '{"filter_id": "12345"}'


	4.	Update Comment on JIRA:

curl -X POST http://localhost:5000/update_comment/JIRA-123 -H "Content-Type: application/json" -d '{"comment": "This is an updated comment."}'



Let me know if further clarifications are needed!