
Thanks for the detailed clarification. Let‚Äôs design this in two Bamboo plans:

‚∏ª

üéØ Goal
	‚Ä¢	Build Plan:
	‚Ä¢	Accepts releaseVersion, helmChartVersion, and optional forceDeploy (default: false).
	‚Ä¢	Detects if any JIRA has breaking_change label.
	‚Ä¢	Sets a hasBreakingChange variable to true or false.
	‚Ä¢	Triggers the Deploy Plan, passing:
	‚Ä¢	releaseVersion
	‚Ä¢	helmChartVersion
	‚Ä¢	forceDeploy
	‚Ä¢	hasBreakingChange
	‚Ä¢	Deploy Plan:
	‚Ä¢	Deploys only if:
	‚Ä¢	hasBreakingChange=false
	‚Ä¢	OR forceDeploy=true

‚∏ª

üß© 1. Build Plan Setup

üîß Bamboo Variables

Variable Name	Type	Default	Description
releaseVersion	Text	(no default)	Runtime input (e.g., 2025.07.04.Release)
helmChartVersion	Text	(no default)	Runtime input (e.g., 1.2.3)
forceDeploy	Boolean	false	Runtime optional input. Default false.

‚úÖ Mark forceDeploy as a plan variable, and allow override at runtime.

‚∏ª

üîß Script Task: check_jira_breaking.sh

#!/bin/bash

# Input Variables (injected by Bamboo)
FIX_VERSION="${bamboo.releaseVersion}"
FORCE_DEPLOY="${bamboo.forceDeploy:-false}"

# JIRA Config
JIRA_BASE_URL="https://your-jira.atlassian.net"
JIRA_USERNAME="${bamboo.jiraUsername}"
JIRA_TOKEN="${bamboo.jiraToken}"
PROJECT_KEY="MYPROJ"

# Init
HAS_BREAKING_CHANGE=false
REPORT_FILE="target/jira_breaking_check.html"
mkdir -p target

log() {
  echo "[INFO] $1"
}

fail() {
  echo "[ERROR] $1"
  exit 1
}

get_jira_issues() {
  local jql="project=${PROJECT_KEY} AND fixVersion=\"${FIX_VERSION}\""
  local url="${JIRA_BASE_URL}/rest/api/2/search?jql=$(echo "$jql" | jq -sRr @uri)&fields=key,summary,labels"
  curl -s -u "${JIRA_USERNAME}:${JIRA_TOKEN}" -H "Accept: application/json" "$url"
}

generate_report() {
  echo "<html><body><h3>JIRA Breaking Change Check</h3><table border='1'><tr><th>Key</th><th>Summary</th><th>Labels</th></tr>" > "$REPORT_FILE"
  while read -r issue; do
    key=$(echo "$issue" | jq -r '.key')
    summary=$(echo "$issue" | jq -r '.fields.summary')
    labels=$(echo "$issue" | jq -r '.fields.labels | join(", ")')

    if echo "$labels" | grep -q "breaking_change"; then
      HAS_BREAKING_CHANGE=true
      echo "<tr style='background-color:#fdd'><td>$key</td><td>$summary</td><td>$labels</td></tr>" >> "$REPORT_FILE"
    else
      echo "<tr><td>$key</td><td>$summary</td><td>$labels</td></tr>" >> "$REPORT_FILE"
    fi
  done <<< "$(echo "$jira_response" | jq -c '.issues[]')"
  echo "</table></body></html>" >> "$REPORT_FILE"
}

# Run
log "Checking JIRA issues for fixVersion: $FIX_VERSION"
jira_response=$(get_jira_issues)

generate_report

# Export HAS_BREAKING_CHANGE variable for downstream
echo "HAS_BREAKING_CHANGE=${HAS_BREAKING_CHANGE}" > breaking.env
echo "FORCE_DEPLOY=${FORCE_DEPLOY}" >> breaking.env


‚∏ª

‚úÖ Build Plan Artifact
	‚Ä¢	Copy pattern: target/jira_breaking_check.html
	‚Ä¢	Optional shared artifact for review.

‚∏ª

‚úÖ Inject Environment Variables

In the final task of Build Plan (after JIRA check):

# Inject environment vars for deployment trigger
source breaking.env

Then pass HAS_BREAKING_CHANGE and FORCE_DEPLOY into the triggered deploy plan as variables.

‚∏ª

üöÄ 2. Trigger Deploy Plan

‚úÖ Final Task in Build Plan:

Use a Bamboo Trigger Plan Task or a custom curl to trigger deployment with variables:

curl -X POST -u "${bamboo.deployUsername}:${bamboo.deployToken}" \
  -H "Content-Type: application/json" \
  "https://bamboo.example.com/rest/api/latest/queue/DEPLOY-PLAN-KEY?stage&executeAllStages=true" \
  --data '{
    "variables": {
      "releaseVersion": "'"${FIX_VERSION}"'",
      "helmChartVersion": "'"${bamboo.helmChartVersion}"'",
      "forceDeploy": "'"${FORCE_DEPLOY}"'",
      "hasBreakingChange": "'"${HAS_BREAKING_CHANGE}"'"
    }
  }'


‚∏ª

üß© 3. Deploy Plan Logic

üîß Script Task in Deploy Plan (deploy.sh)

#!/bin/bash

RELEASE_VERSION="${bamboo.releaseVersion}"
CHART_VERSION="${bamboo.helmChartVersion}"
FORCE_DEPLOY="${bamboo.forceDeploy:-false}"
HAS_BREAKING_CHANGE="${bamboo.hasBreakingChange:-false}"

echo "[INFO] Starting deployment for $RELEASE_VERSION, Chart $CHART_VERSION"
echo "[INFO] forceDeploy = $FORCE_DEPLOY"
echo "[INFO] hasBreakingChange = $HAS_BREAKING_CHANGE"

if [[ "$HAS_BREAKING_CHANGE" == "true" && "$FORCE_DEPLOY" != "true" ]]; then
  echo "[ERROR] Breaking changes detected and forceDeploy not enabled. Skipping deployment."
  exit 1
fi

# Proceed with deployment
echo "[INFO] Deploying to CTLQ..."
# ./deploy-ctlq.sh "$RELEASE_VERSION" "$CHART_VERSION"


‚∏ª

üîÅ Summary of Flow

‚û§ Build Plan
	‚Ä¢	Inputs: releaseVersion, helmChartVersion, forceDeploy (default false)
	‚Ä¢	Runs JIRA check script
	‚Ä¢	Generates hasBreakingChange output
	‚Ä¢	Triggers Deploy Plan with both values

‚û§ Deploy Plan
	‚Ä¢	Reads forceDeploy and hasBreakingChange
	‚Ä¢	Deploys only if:
	‚Ä¢	No breaking changes
	‚Ä¢	OR forceDeploy is true

‚∏ª

Would you like a sample Bamboo YAML spec or need this wrapped as reusable Bamboo shared tasks?


==###Great! Let‚Äôs enhance the script to:

‚∏ª

‚úÖ Updated Requirements Recap
	1.	Fetch JIRA issues by fixVersion.
	2.	Identify breaking_change labeled issues.
	3.	Log list of JIRA keys + summary + label flag to console.
	4.	Generate an HTML report showing:
	‚Ä¢	JIRA Key (with link),
	‚Ä¢	Summary,
	‚Ä¢	Labels (highlight if breaking_change),
	‚Ä¢	Decision (Deploy / Skip).
	5.	Fail deployment unless FORCE_DEPLOY=true.
	6.	Save HTML in a folder (target/) so Bamboo can pick it up as an artifact.

‚∏ª

üìù deploy_to_ctlq.sh (Enhanced)

#!/bin/bash

# ---- Inputs ----
JIRA_BASE_URL="${JIRA_BASE_URL:-https://your-jira-instance.atlassian.net}"
JIRA_PROJECT_KEY="${JIRA_PROJECT_KEY:-MYPROJ}"
JIRA_USERNAME="${JIRA_USERNAME:-jira_user@example.com}"
JIRA_TOKEN="${JIRA_TOKEN:-your_jira_token}"  # Use Bamboo secret variable
FIX_VERSION="${FIX_VERSION:-2025.07.04.Release}"
FORCE_DEPLOY="${FORCE_DEPLOY:-false}"

# ---- Paths ----
REPORT_DIR="target"
REPORT_HTML="${REPORT_DIR}/jira_deploy_report.html"
mkdir -p "$REPORT_DIR"

# ---- Functions ----
function log() {
    echo "[INFO] $1"
}

function fail() {
    echo "[ERROR] $1"
    exit 1
}

function get_jiras_for_fix_version() {
    local jql="project=${JIRA_PROJECT_KEY} AND fixVersion=\"${FIX_VERSION}\" ORDER BY key"
    local url="${JIRA_BASE_URL}/rest/api/2/search?jql=$(echo "$jql" | jq -sRr @uri)&fields=key,summary,labels"

    curl -s -u "${JIRA_USERNAME}:${JIRA_TOKEN}" -H "Accept: application/json" "$url"
}

function generate_html_header() {
    cat <<EOF > "$REPORT_HTML"
<html><head><style>
body { font-family: Arial; }
table { border-collapse: collapse; width: 100%; }
th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
th { background-color: #eee; }
.breaking { background-color: #fdd; font-weight: bold; }
.ok { background-color: #dfd; }
</style></head><body>
<h2>JIRA Deployment Report for Version: $FIX_VERSION</h2>
<table>
<tr><th>JIRA</th><th>Summary</th><th>Labels</th><th>Status</th></tr>
EOF
}

function generate_html_footer() {
    echo "</table></body></html>" >> "$REPORT_HTML"
}

# ---- Execution ----
log "Checking JIRA issues for fixVersion: $FIX_VERSION"
response=$(get_jiras_for_fix_version)

if [ -z "$response" ]; then
    fail "No response from JIRA API."
fi

issues=$(echo "$response" | jq -c '.issues[]')
has_breaking_change=false

generate_html_header

log "---- JIRA Issues for Version $FIX_VERSION ----"
while read -r issue; do
    key=$(echo "$issue" | jq -r '.key')
    summary=$(echo "$issue" | jq -r '.fields.summary')
    labels=$(echo "$issue" | jq -r '.fields.labels | join(", ")')
    url="$JIRA_BASE_URL/browse/$key"

    if echo "$issue" | jq -e '.fields.labels[]? | select(. == "breaking_change")' > /dev/null; then
        has_breaking_change=true
        status="SKIP DEPLOY"
        echo "[BREAKING] $key: $summary (labels: $labels)"
        echo "<tr class='breaking'><td><a href='$url'>$key</a></td><td>$summary</td><td>$labels</td><td><b>$status</b></td></tr>" >> "$REPORT_HTML"
    else
        status="SAFE TO DEPLOY"
        echo "[SAFE]     $key: $summary (labels: $labels)"
        echo "<tr class='ok'><td><a href='$url'>$key</a></td><td>$summary</td><td>$labels</td><td>$status</td></tr>" >> "$REPORT_HTML"
    fi
done <<< "$issues"

generate_html_footer

if [[ "$has_breaking_change" == "true" && "$FORCE_DEPLOY" != "true" ]]; then
    log "Detected JIRA(s) with 'breaking_change' label. Skipping deployment to CTLQ."
    log "To override, set FORCE_DEPLOY=true."
    fail "Deployment halted due to breaking changes."
else
    log "No blocking issues found, or FORCE_DEPLOY enabled. Proceeding with deployment to CTLQ."
    # ---- Your deployment command here ----
    log "Deploying version $FIX_VERSION to CTLQ..."
    # ./run-ctlq-deployment.sh "$FIX_VERSION"
fi


‚∏ª

üì¶ Bamboo Setup

1. Inject variables into Bamboo Plan:
	‚Ä¢	JIRA_USERNAME, JIRA_TOKEN (as Secure Variables)
	‚Ä¢	FIX_VERSION (release version)
	‚Ä¢	Optional: FORCE_DEPLOY = true

2. Script Task

chmod +x deploy_to_ctlq.sh
./deploy_to_ctlq.sh

3. Artifact Definition

Go to Job ‚Üí Artifacts ‚Üí Define Artifact:
	‚Ä¢	Name: JIRA_Report
	‚Ä¢	Copy pattern: target/jira_deploy_report.html
	‚Ä¢	Shared: Yes (if needed)

‚∏ª

‚úÖ Sample Output (Console)

[INFO] Checking JIRA issues for fixVersion: 2025.07.04.Release
---- JIRA Issues for Version 2025.07.04.Release ----
[SAFE]     MYPROJ-101: Fix styling (labels: ui,low)
[BREAKING] MYPROJ-102: Schema change (labels: breaking_change,backend)
[ERROR] Deployment halted due to breaking changes.


‚∏ª

‚úÖ Sample Output (HTML)

A well-formatted table with breaking_change rows highlighted in red and clickable JIRA links.

‚∏ª

Let me know if you want to:
	‚Ä¢	Email the HTML report via SMTP.
	‚Ä¢	Automatically attach the HTML report to a Confluence page.
	‚Ä¢	Or include a Markdown export too.