Got it â€” weâ€™ll rewrite the script without jq, using pure bash and grep/sed/awk for parsing. The goal is:

âœ… New Requirements Recap:
	â€¢	Use Bearer token authentication.
	â€¢	No JQL (so filter locally).
	â€¢	No jq â€“ use standard tools (grep, awk, sed, etc.).
	â€¢	Generate a basic HTML report.
	â€¢	Output a HAS_BREAKING_CHANGE=true|false for use in the next Bamboo stage.

â¸»

ðŸ”§ Updated Script: check_jira_breaking.sh (No jq)

#!/bin/bash

set -e

# === Config Variables (injected from Bamboo) ===
PROJECT_KEY="${bamboo.jiraProjectKey:-MYPROJ}"
FIX_VERSION="${bamboo.releaseVersion}"
JIRA_BASE_URL="${bamboo.jiraBaseUrl}"
JIRA_BEARER_TOKEN="${bamboo.jiraBearerToken}"
FORCE_DEPLOY="${bamboo.forceDeploy:-false}"

# === Output variables ===
HAS_BREAKING_CHANGE=false
REPORT_DIR="target"
REPORT_FILE="$REPORT_DIR/jira_breaking_check.html"
mkdir -p "$REPORT_DIR"

# === Log Helpers ===
log() { echo "[INFO] $1"; }
warn() { echo "[WARN] $1"; }

# === HTML Header ===
generate_report_header() {
cat <<EOF > "$REPORT_FILE"
<html><head><style>
table { border-collapse: collapse; width: 100%; }
th, td { border: 1px solid #ccc; padding: 8px; }
.breaking { background-color: #fdd; }
.safe { background-color: #dfd; }
</style></head><body>
<h3>JIRA Breaking Change Report - FixVersion: $FIX_VERSION</h3>
<table><tr><th>Key</th><th>Summary</th><th>Labels</th><th>Status</th></tr>
EOF
}

generate_report_footer() {
  echo "</table></body></html>" >> "$REPORT_FILE"
}

# === Fetch issues page-by-page ===
fetch_issues() {
  local start=0
  local max=50
  local more=true

  while [ "$more" = true ]; do
    log "Fetching issues from startAt=$start"
    response=$(curl -s -H "Authorization: Bearer $JIRA_BEARER_TOKEN" \
      "$JIRA_BASE_URL/rest/api/2/search?startAt=$start&maxResults=$max&fields=key,summary,labels,fixVersions&project=$PROJECT_KEY")

    # If response empty or invalid, stop
    echo "$response" | grep -q '"issues":\[' || break

    # Extract all issue blocks (crude but works for our use case)
    echo "$response" | tr '\n' ' ' | sed 's/},[[:space:]]*{/\n{/g' > issues.tmp

    while read -r issue; do
      key=$(echo "$issue" | grep -oE '"key":"[^"]+"' | cut -d':' -f2 | tr -d '"')
      summary=$(echo "$issue" | grep -oE '"summary":"[^"]+"' | cut -d':' -f2- | tr -d '"')
      labels=$(echo "$issue" | grep -oE '"labels":\[[^]]*' | sed 's/"labels":\[//' | tr -d '"')
      fix_versions=$(echo "$issue" | grep -oE '"fixVersions":\[[^]]*' | sed 's/"fixVersions":\[//' | tr -d '"')

      # Check if FIX_VERSION is present
      echo "$fix_versions" | grep -q "$FIX_VERSION" || continue

      # Check for breaking_change
      if echo "$labels" | grep -q "breaking_change"; then
        HAS_BREAKING_CHANGE=true
        status="SKIP DEPLOY"
        echo "<tr class='breaking'><td>$key</td><td>$summary</td><td>$labels</td><td>$status</td></tr>" >> "$REPORT_FILE"
        log "[BREAKING] $key: $summary (labels: $labels)"
      else
        status="OK"
        echo "<tr class='safe'><td>$key</td><td>$summary</td><td>$labels</td><td>$status</td></tr>" >> "$REPORT_FILE"
        log "[SAFE] $key: $summary"
      fi
    done < issues.tmp

    # Check if we got fewer results than max
    num_returned=$(grep -c '"key":"' issues.tmp)
    if [ "$num_returned" -lt "$max" ]; then
      more=false
    else
      start=$((start + max))
    fi
  done

  rm -f issues.tmp
}

# === Run ===
generate_report_header
fetch_issues
generate_report_footer

# === Export for Bamboo Deploy Plan ===
echo "HAS_BREAKING_CHANGE=$HAS_BREAKING_CHANGE" > breaking.env
echo "FORCE_DEPLOY=$FORCE_DEPLOY" >> breaking.env


â¸»

âœ… Bamboo Plan Integration

âœ… Shared Artifact
	â€¢	target/jira_breaking_check.html â€“ visible in Bamboo artifacts tab.

âœ… Variables Output

Use a task in Bamboo to read from breaking.env like:

source breaking.env
echo "## HAS_BREAKING_CHANGE: $HAS_BREAKING_CHANGE"

âœ… Trigger Deployment

From Build Plan, pass these values to the Deploy Plan using:
	â€¢	Bamboo deployment trigger task
	â€¢	Or curl trigger to Bamboo REST API (let me know if you want that too)

â¸»

âœ… Deploy Plan Logic (Reminder)

#!/bin/bash

FORCE_DEPLOY="${bamboo.forceDeploy}"
HAS_BREAKING_CHANGE="${bamboo.hasBreakingChange}"

echo "[INFO] Deploy conditions - forceDeploy=$FORCE_DEPLOY, hasBreakingChange=$HAS_BREAKING_CHANGE"

if [ "$HAS_BREAKING_CHANGE" = "true" ] && [ "$FORCE_DEPLOY" != "true" ]; then
  echo "[SKIP] Breaking changes detected. Not deploying to CTLQ."
  exit 0
fi

echo "[DEPLOYING] Proceeding with deployment to CTLQ..."
# ./deploy-ctlq.sh or Helm deploy command


â¸»

Would you like me to:
	â€¢	Convert this setup into a Bamboo YAML spec?
	â€¢	Provide the trigger deployment step via REST API with curl?
	â€¢	Add email/Slack alert on skip?

Let me know!