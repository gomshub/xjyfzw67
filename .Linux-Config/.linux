lookup file by partial name

find /path/to/folder -type f -name "*partial_name*" -printf "%f\n" -exec stat --format="%Y %n" {} \; | sort -k 1,1nr | cut -d' ' -f2-

=#=##


You can achieve this by using the following commands in a Unix-based terminal:

1. List subfolders older than 2021, including 2021:
```bash
find /path/to/parent/folder -mindepth 1 -maxdepth 1 -type d ! -newermt 2022-01-01
```
Replace `/path/to/parent/folder` with the actual path to the parent folder where your subfolders are located.

2. Zip each subfolder individually and replace the folders with zip files:
```bash
find /path/to/parent/folder -mindepth 1 -maxdepth 1 -type d ! -newermt 2022-01-01 -exec sh -c 'zip -r "$1.zip" "$1" && rm -rf "$1"' _ {} \;
```
This command will zip each subfolder older than 2021, including 2021, into separate zip files and then delete the original folder.

Make sure to replace `/path/to/parent/folder` with the actual path to your parent folder.

Please exercise caution while running these commands to avoid accidental data loss.


=#=#=

To extract the contents of the zip files back into the same subfolders, you can use the following commands in a Unix-based terminal:

1. Navigate to the directory where the zip files are located:
```bash
cd /path/to/parent/folder
```
Replace `/path/to/parent/folder` with the actual path to the parent folder containing the zip files.

2. Extract the zip files back into their respective subfolders:
```bash
find . -type f -name "*.zip" -exec sh -c 'unzip -d "${1%.*}" "$1"' _ {} \;
```
This command will find all zip files in the current directory and extract their contents back into the subfolders with the same name as the zip files (excluding the .zip extension).

Make sure to run these commands in the correct directory and replace `/path/to/parent/folder` with the actual path to the parent folder where the zip files are located.

Please exercise caution while running these commands to avoid accidental data loss.



=#=##
bash
find /path/to/parent/folder -mindepth 1 -maxdepth 1 -type d ! -newermt 2022-01-01 -exec zip -r {}.zip {} \;


=#=

To identify CPU-usage processes using the `ps` command in a Linux system, you can run the following command:

```bash
ps aux --sort=-%cpu
```

This command will list all processes along with their CPU usage in descending order. The `%CPU` column will show the percentage of CPU usage for each process. This way, you can easily identify which processes are consuming the most CPU resources on your system.


=#=#

To insert a line at a specific line number into a file using the Linux command line, you can use the `sed` command. Here's an example command that inserts a new line at line number 5 in a file named "example.txt":

```bash
sed -i '5i\This is the new line to be inserted' example.txt
```

In this command:
- `5` specifies the line number where you want to insert the new line.
- `i\` tells `sed` to insert the following text.
- `"This is the new line to be inserted"` is the text you want to insert.
- `example.txt` is the name of the file where you want to perform the insertion.


.=#=#=#

To find and replace a specific text string, such as `/var/www/html`, with a new directory path in a file, you can use the `sed` command in Linux. Here's how you can do it:

1. **Using sed Command**:
   You can use `sed` to perform a find and replace operation on a file. Here's the basic syntax:
   ```bash
   sed -i 's/old_directory/new_directory/g' filename
   ```

   - Replace `old_directory` with the text you want to replace.
   - Replace `new_directory` with the new text you want to insert.
   - Specify the filename where you want to perform the replacement.

2. **Example**:
   Let's say you want to replace `/var/www/html` with `/new/path/to/html` in a file named `example.conf`. You can use the following command:
   ```bash
   sed -i 's/\/var\/www\/html/\/new\/path\/to\/html/g' example.conf
   ```

   - The backslashes (`\`) before the slashes (`/`) are used to escape them in the sed command.

3. **Verify Changes**:
   After running the `sed` command, check the file to ensure that the replacements were made correctly:
   ```bash
   cat example.conf
   ```

By following these steps, you can easily find and replace occurrences of `/var/www/html` with a new directory path in a file using the `sed` command.


bash
grep "^I 23/3/2024" /path/to/server.logs | sed 's/^I 23\/3\/2024//' | sort | uniq -c > output_file.txt




=#=#=#=

To search for the "I 23/3/2024" pattern only in the `server.logs` file generated on 23/3/2024, remove duplicates, and store the output in a new file, you can use the following command:

```bash
grep -h "I 23/3/2024" $(find /path/to/logs/directory -name "server.logs" -newermt "2024-03-23" ! -newermt "2024-03-24") | sed 's/^I 23\/3\/2024//' | sort -u > output_file.txt | sort -u -o output_file.txt output_file.txt

```

In this updated command:
- `grep -h "I 23/3/2024" $(find /path/to/logs/directory -name "server.logs" -newermt "2024-03-23" ! -newermt "2024-03-24")` searches for lines starting with "I 23/3/2024" in the identified `server.logs` file.
- `sed 's/^I 23\/3\/2024//'` removes the date from the matched lines.
- `sort -u` sorts the lines and removes duplicates.
- `> output_file.txt` stores the unique lines in the `output_file.txt` file.

Yes, you can remove duplicate lines from the output file and overwrite the same file using the following command:

```bash
sort -u -o output_file.txt output_file.txt
```

This command will sort the lines in `output_file.txt`, remove duplicates, and then overwrite the original file with the unique lines.

=#=#=#

You can compress files generated between a particular time in Linux using the `find` command in combination with `tar`. Here's an example command that finds files generated between two specific dates and compresses them into a tar archive:

```bash
find /path/to/directory -type f -newermt 2024-01-01 ! -newermt 2024-02-01 -exec tar -rvf archive.tar {} +
```

In this command:
- Replace `/path/to/directory` with the actual directory path you want to search.
- The dates `2024-01-01` and `2024-02-01` should be adjusted to your specific time range.
- The `tar` command creates or appends files to the `archive.tar` file.
  
After running this command, you'll have a tar archive containing the files generated within the specified time range.



=#=#=#=#

You can delete huge size files that were generated within a specific time range in Linux using the `find` command along with the `rm` command. Here's an example command to delete files larger than a certain size that were generated between two specific dates:

```bash
find /path/to/directory -type f -size +100M -newermt 2024-01-01 ! -newermt 2024-02-01 -delete
```

In this command:
- Replace `/path/to/directory` with the actual directory path you want to search.
- Adjust the file size (`+100M` in this example) to your desired threshold.
- The dates `2024-01-01` and `2024-02-01` should be modified according to your specific time range.
- The `delete` option at the end of the command will delete the files that meet the criteria.

Please be cautious while using the `delete` option with the `find` command as it permanently removes files without moving them to the trash. Make sure you have backups or are certain about the files you are deleting.
